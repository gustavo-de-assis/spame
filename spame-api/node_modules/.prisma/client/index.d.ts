
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions

export type PrismaPromise<T> = $Public.PrismaPromise<T>


export type AddressPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "Address"
  objects: {
    Patient: PatientPayload<ExtArgs>[]
  }
  scalars: $Extensions.GetResult<{
    id: number
    street: string
    houseNumber: string
    complement: string
    district: string
    city: string
    state: string
  }, ExtArgs["result"]["address"]>
  composites: {}
}

/**
 * Model Address
 * 
 */
export type Address = runtime.Types.DefaultSelection<AddressPayload>
export type AdministratorPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "Administrator"
  objects: {
    Patient: PatientPayload<ExtArgs>
    Role: RolePayload<ExtArgs>
  }
  scalars: $Extensions.GetResult<{
    id: number
    patientId: number
    password: string
    roleId: number
  }, ExtArgs["result"]["administrator"]>
  composites: {}
}

/**
 * Model Administrator
 * 
 */
export type Administrator = runtime.Types.DefaultSelection<AdministratorPayload>
export type AppointmentPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "Appointment"
  objects: {
    Patient: PatientPayload<ExtArgs>
    Doctor: DoctorPayload<ExtArgs>
    Recepcionist: RecepcionistPayload<ExtArgs>
    MedicalRecord: MedicalRecordPayload<ExtArgs>[]
  }
  scalars: $Extensions.GetResult<{
    id: number
    scheduleTo: Date
    patientId: number
    doctorId: number
    recepcionistId: number
    diagnosis: string
    createdAt: Date
  }, ExtArgs["result"]["appointment"]>
  composites: {}
}

/**
 * Model Appointment
 * 
 */
export type Appointment = runtime.Types.DefaultSelection<AppointmentPayload>
export type DoctorPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "Doctor"
  objects: {
    Appointment: AppointmentPayload<ExtArgs>[]
    Patient: PatientPayload<ExtArgs>
    Role: RolePayload<ExtArgs>
  }
  scalars: $Extensions.GetResult<{
    id: number
    patientId: number
    crm: string
    speciality: string
    password: string
    roleId: number
  }, ExtArgs["result"]["doctor"]>
  composites: {}
}

/**
 * Model Doctor
 * 
 */
export type Doctor = runtime.Types.DefaultSelection<DoctorPayload>
export type MedicalRecordPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "MedicalRecord"
  objects: {
    Patient: PatientPayload<ExtArgs>
    Appointment: AppointmentPayload<ExtArgs>
  }
  scalars: $Extensions.GetResult<{
    id: number
    patientId: number
    appointmentId: number
  }, ExtArgs["result"]["medicalRecord"]>
  composites: {}
}

/**
 * Model MedicalRecord
 * 
 */
export type MedicalRecord = runtime.Types.DefaultSelection<MedicalRecordPayload>
export type PatientPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "Patient"
  objects: {
    Administrator: AdministratorPayload<ExtArgs>[]
    Appointment: AppointmentPayload<ExtArgs>[]
    Doctor: DoctorPayload<ExtArgs>[]
    MedicalRecord: MedicalRecordPayload<ExtArgs>[]
    Address: AddressPayload<ExtArgs>
    Recepcionist: RecepcionistPayload<ExtArgs>[]
  }
  scalars: $Extensions.GetResult<{
    id: number
    name: string
    birthdate: Date
    gender: string
    cpf: string
    rg: string | null
    mother: string
    father: string
    email: string
    phone: string
    createdAt: Date
    addressId: number
  }, ExtArgs["result"]["patient"]>
  composites: {}
}

/**
 * Model Patient
 * 
 */
export type Patient = runtime.Types.DefaultSelection<PatientPayload>
export type RecepcionistPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "Recepcionist"
  objects: {
    Appointment: AppointmentPayload<ExtArgs>[]
    Patient: PatientPayload<ExtArgs>
    Role: RolePayload<ExtArgs>
  }
  scalars: $Extensions.GetResult<{
    id: number
    patientId: number
    password: string
    roleId: number
  }, ExtArgs["result"]["recepcionist"]>
  composites: {}
}

/**
 * Model Recepcionist
 * 
 */
export type Recepcionist = runtime.Types.DefaultSelection<RecepcionistPayload>
export type RolePayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "Role"
  objects: {
    Administrator: AdministratorPayload<ExtArgs>[]
    Doctor: DoctorPayload<ExtArgs>[]
    Recepcionist: RecepcionistPayload<ExtArgs>[]
  }
  scalars: $Extensions.GetResult<{
    id: number
    name: string
    accessLevel: number
  }, ExtArgs["result"]["role"]>
  composites: {}
}

/**
 * Model Role
 * 
 */
export type Role = runtime.Types.DefaultSelection<RolePayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Addresses
 * const addresses = await prisma.address.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false,
  ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Addresses
   * const addresses = await prisma.address.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => Promise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.address`: Exposes CRUD operations for the **Address** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Addresses
    * const addresses = await prisma.address.findMany()
    * ```
    */
  get address(): Prisma.AddressDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.administrator`: Exposes CRUD operations for the **Administrator** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Administrators
    * const administrators = await prisma.administrator.findMany()
    * ```
    */
  get administrator(): Prisma.AdministratorDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.appointment`: Exposes CRUD operations for the **Appointment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Appointments
    * const appointments = await prisma.appointment.findMany()
    * ```
    */
  get appointment(): Prisma.AppointmentDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.doctor`: Exposes CRUD operations for the **Doctor** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Doctors
    * const doctors = await prisma.doctor.findMany()
    * ```
    */
  get doctor(): Prisma.DoctorDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.medicalRecord`: Exposes CRUD operations for the **MedicalRecord** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MedicalRecords
    * const medicalRecords = await prisma.medicalRecord.findMany()
    * ```
    */
  get medicalRecord(): Prisma.MedicalRecordDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.patient`: Exposes CRUD operations for the **Patient** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Patients
    * const patients = await prisma.patient.findMany()
    * ```
    */
  get patient(): Prisma.PatientDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.recepcionist`: Exposes CRUD operations for the **Recepcionist** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Recepcionists
    * const recepcionists = await prisma.recepcionist.findMany()
    * ```
    */
  get recepcionist(): Prisma.RecepcionistDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.role`: Exposes CRUD operations for the **Role** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Roles
    * const roles = await prisma.role.findMany()
    * ```
    */
  get role(): Prisma.RoleDelegate<GlobalReject, ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export type Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export type Args<T, F extends $Public.Operation> = $Public.Args<T, F>
  export type Payload<T, F extends $Public.Operation> = $Public.Payload<T, F>
  export type Result<T, A, F extends $Public.Operation> = $Public.Result<T, A, F>
  export type Exact<T, W> = $Public.Exact<T, W>

  /**
   * Prisma Client JS version: 4.16.2
   * Query Engine version: 4bc8b6e1b66cb932731fb1bdbbc550d1e010de81
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Address: 'Address',
    Administrator: 'Administrator',
    Appointment: 'Appointment',
    Doctor: 'Doctor',
    MedicalRecord: 'MedicalRecord',
    Patient: 'Patient',
    Recepcionist: 'Recepcionist',
    Role: 'Role'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.Args}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'address' | 'administrator' | 'appointment' | 'doctor' | 'medicalRecord' | 'patient' | 'recepcionist' | 'role'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      Address: {
        payload: AddressPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.AddressFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AddressPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AddressFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AddressPayload>
          }
          findFirst: {
            args: Prisma.AddressFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AddressPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AddressFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AddressPayload>
          }
          findMany: {
            args: Prisma.AddressFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AddressPayload>[]
          }
          create: {
            args: Prisma.AddressCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AddressPayload>
          }
          createMany: {
            args: Prisma.AddressCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.AddressDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AddressPayload>
          }
          update: {
            args: Prisma.AddressUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AddressPayload>
          }
          deleteMany: {
            args: Prisma.AddressDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.AddressUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.AddressUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AddressPayload>
          }
          aggregate: {
            args: Prisma.AddressAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateAddress>
          }
          groupBy: {
            args: Prisma.AddressGroupByArgs<ExtArgs>,
            result: $Utils.Optional<AddressGroupByOutputType>[]
          }
          count: {
            args: Prisma.AddressCountArgs<ExtArgs>,
            result: $Utils.Optional<AddressCountAggregateOutputType> | number
          }
        }
      }
      Administrator: {
        payload: AdministratorPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.AdministratorFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AdministratorPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AdministratorFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AdministratorPayload>
          }
          findFirst: {
            args: Prisma.AdministratorFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AdministratorPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AdministratorFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AdministratorPayload>
          }
          findMany: {
            args: Prisma.AdministratorFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AdministratorPayload>[]
          }
          create: {
            args: Prisma.AdministratorCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AdministratorPayload>
          }
          createMany: {
            args: Prisma.AdministratorCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.AdministratorDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AdministratorPayload>
          }
          update: {
            args: Prisma.AdministratorUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AdministratorPayload>
          }
          deleteMany: {
            args: Prisma.AdministratorDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.AdministratorUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.AdministratorUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AdministratorPayload>
          }
          aggregate: {
            args: Prisma.AdministratorAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateAdministrator>
          }
          groupBy: {
            args: Prisma.AdministratorGroupByArgs<ExtArgs>,
            result: $Utils.Optional<AdministratorGroupByOutputType>[]
          }
          count: {
            args: Prisma.AdministratorCountArgs<ExtArgs>,
            result: $Utils.Optional<AdministratorCountAggregateOutputType> | number
          }
        }
      }
      Appointment: {
        payload: AppointmentPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.AppointmentFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AppointmentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AppointmentFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AppointmentPayload>
          }
          findFirst: {
            args: Prisma.AppointmentFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AppointmentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AppointmentFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AppointmentPayload>
          }
          findMany: {
            args: Prisma.AppointmentFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AppointmentPayload>[]
          }
          create: {
            args: Prisma.AppointmentCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AppointmentPayload>
          }
          createMany: {
            args: Prisma.AppointmentCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.AppointmentDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AppointmentPayload>
          }
          update: {
            args: Prisma.AppointmentUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AppointmentPayload>
          }
          deleteMany: {
            args: Prisma.AppointmentDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.AppointmentUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.AppointmentUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AppointmentPayload>
          }
          aggregate: {
            args: Prisma.AppointmentAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateAppointment>
          }
          groupBy: {
            args: Prisma.AppointmentGroupByArgs<ExtArgs>,
            result: $Utils.Optional<AppointmentGroupByOutputType>[]
          }
          count: {
            args: Prisma.AppointmentCountArgs<ExtArgs>,
            result: $Utils.Optional<AppointmentCountAggregateOutputType> | number
          }
        }
      }
      Doctor: {
        payload: DoctorPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.DoctorFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<DoctorPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DoctorFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<DoctorPayload>
          }
          findFirst: {
            args: Prisma.DoctorFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<DoctorPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DoctorFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<DoctorPayload>
          }
          findMany: {
            args: Prisma.DoctorFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<DoctorPayload>[]
          }
          create: {
            args: Prisma.DoctorCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<DoctorPayload>
          }
          createMany: {
            args: Prisma.DoctorCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.DoctorDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<DoctorPayload>
          }
          update: {
            args: Prisma.DoctorUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<DoctorPayload>
          }
          deleteMany: {
            args: Prisma.DoctorDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.DoctorUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.DoctorUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<DoctorPayload>
          }
          aggregate: {
            args: Prisma.DoctorAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateDoctor>
          }
          groupBy: {
            args: Prisma.DoctorGroupByArgs<ExtArgs>,
            result: $Utils.Optional<DoctorGroupByOutputType>[]
          }
          count: {
            args: Prisma.DoctorCountArgs<ExtArgs>,
            result: $Utils.Optional<DoctorCountAggregateOutputType> | number
          }
        }
      }
      MedicalRecord: {
        payload: MedicalRecordPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.MedicalRecordFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<MedicalRecordPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MedicalRecordFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<MedicalRecordPayload>
          }
          findFirst: {
            args: Prisma.MedicalRecordFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<MedicalRecordPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MedicalRecordFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<MedicalRecordPayload>
          }
          findMany: {
            args: Prisma.MedicalRecordFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<MedicalRecordPayload>[]
          }
          create: {
            args: Prisma.MedicalRecordCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<MedicalRecordPayload>
          }
          createMany: {
            args: Prisma.MedicalRecordCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.MedicalRecordDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<MedicalRecordPayload>
          }
          update: {
            args: Prisma.MedicalRecordUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<MedicalRecordPayload>
          }
          deleteMany: {
            args: Prisma.MedicalRecordDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.MedicalRecordUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.MedicalRecordUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<MedicalRecordPayload>
          }
          aggregate: {
            args: Prisma.MedicalRecordAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateMedicalRecord>
          }
          groupBy: {
            args: Prisma.MedicalRecordGroupByArgs<ExtArgs>,
            result: $Utils.Optional<MedicalRecordGroupByOutputType>[]
          }
          count: {
            args: Prisma.MedicalRecordCountArgs<ExtArgs>,
            result: $Utils.Optional<MedicalRecordCountAggregateOutputType> | number
          }
        }
      }
      Patient: {
        payload: PatientPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.PatientFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<PatientPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PatientFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<PatientPayload>
          }
          findFirst: {
            args: Prisma.PatientFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<PatientPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PatientFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<PatientPayload>
          }
          findMany: {
            args: Prisma.PatientFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<PatientPayload>[]
          }
          create: {
            args: Prisma.PatientCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<PatientPayload>
          }
          createMany: {
            args: Prisma.PatientCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.PatientDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<PatientPayload>
          }
          update: {
            args: Prisma.PatientUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<PatientPayload>
          }
          deleteMany: {
            args: Prisma.PatientDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.PatientUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.PatientUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<PatientPayload>
          }
          aggregate: {
            args: Prisma.PatientAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregatePatient>
          }
          groupBy: {
            args: Prisma.PatientGroupByArgs<ExtArgs>,
            result: $Utils.Optional<PatientGroupByOutputType>[]
          }
          count: {
            args: Prisma.PatientCountArgs<ExtArgs>,
            result: $Utils.Optional<PatientCountAggregateOutputType> | number
          }
        }
      }
      Recepcionist: {
        payload: RecepcionistPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.RecepcionistFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<RecepcionistPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RecepcionistFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<RecepcionistPayload>
          }
          findFirst: {
            args: Prisma.RecepcionistFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<RecepcionistPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RecepcionistFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<RecepcionistPayload>
          }
          findMany: {
            args: Prisma.RecepcionistFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<RecepcionistPayload>[]
          }
          create: {
            args: Prisma.RecepcionistCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<RecepcionistPayload>
          }
          createMany: {
            args: Prisma.RecepcionistCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.RecepcionistDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<RecepcionistPayload>
          }
          update: {
            args: Prisma.RecepcionistUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<RecepcionistPayload>
          }
          deleteMany: {
            args: Prisma.RecepcionistDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.RecepcionistUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.RecepcionistUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<RecepcionistPayload>
          }
          aggregate: {
            args: Prisma.RecepcionistAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateRecepcionist>
          }
          groupBy: {
            args: Prisma.RecepcionistGroupByArgs<ExtArgs>,
            result: $Utils.Optional<RecepcionistGroupByOutputType>[]
          }
          count: {
            args: Prisma.RecepcionistCountArgs<ExtArgs>,
            result: $Utils.Optional<RecepcionistCountAggregateOutputType> | number
          }
        }
      }
      Role: {
        payload: RolePayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.RoleFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<RolePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RoleFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<RolePayload>
          }
          findFirst: {
            args: Prisma.RoleFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<RolePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RoleFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<RolePayload>
          }
          findMany: {
            args: Prisma.RoleFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<RolePayload>[]
          }
          create: {
            args: Prisma.RoleCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<RolePayload>
          }
          createMany: {
            args: Prisma.RoleCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.RoleDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<RolePayload>
          }
          update: {
            args: Prisma.RoleUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<RolePayload>
          }
          deleteMany: {
            args: Prisma.RoleDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.RoleUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.RoleUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<RolePayload>
          }
          aggregate: {
            args: Prisma.RoleAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateRole>
          }
          groupBy: {
            args: Prisma.RoleGroupByArgs<ExtArgs>,
            result: $Utils.Optional<RoleGroupByOutputType>[]
          }
          count: {
            args: Prisma.RoleCountArgs<ExtArgs>,
            result: $Utils.Optional<RoleCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type AddressCountOutputType
   */


  export type AddressCountOutputType = {
    Patient: number
  }

  export type AddressCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    Patient?: boolean | AddressCountOutputTypeCountPatientArgs
  }

  // Custom InputTypes

  /**
   * AddressCountOutputType without action
   */
  export type AddressCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AddressCountOutputType
     */
    select?: AddressCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * AddressCountOutputType without action
   */
  export type AddressCountOutputTypeCountPatientArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: PatientWhereInput
  }



  /**
   * Count Type AppointmentCountOutputType
   */


  export type AppointmentCountOutputType = {
    MedicalRecord: number
  }

  export type AppointmentCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    MedicalRecord?: boolean | AppointmentCountOutputTypeCountMedicalRecordArgs
  }

  // Custom InputTypes

  /**
   * AppointmentCountOutputType without action
   */
  export type AppointmentCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AppointmentCountOutputType
     */
    select?: AppointmentCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * AppointmentCountOutputType without action
   */
  export type AppointmentCountOutputTypeCountMedicalRecordArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: MedicalRecordWhereInput
  }



  /**
   * Count Type DoctorCountOutputType
   */


  export type DoctorCountOutputType = {
    Appointment: number
  }

  export type DoctorCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    Appointment?: boolean | DoctorCountOutputTypeCountAppointmentArgs
  }

  // Custom InputTypes

  /**
   * DoctorCountOutputType without action
   */
  export type DoctorCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoctorCountOutputType
     */
    select?: DoctorCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * DoctorCountOutputType without action
   */
  export type DoctorCountOutputTypeCountAppointmentArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: AppointmentWhereInput
  }



  /**
   * Count Type PatientCountOutputType
   */


  export type PatientCountOutputType = {
    Administrator: number
    Appointment: number
    Doctor: number
    MedicalRecord: number
    Recepcionist: number
  }

  export type PatientCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    Administrator?: boolean | PatientCountOutputTypeCountAdministratorArgs
    Appointment?: boolean | PatientCountOutputTypeCountAppointmentArgs
    Doctor?: boolean | PatientCountOutputTypeCountDoctorArgs
    MedicalRecord?: boolean | PatientCountOutputTypeCountMedicalRecordArgs
    Recepcionist?: boolean | PatientCountOutputTypeCountRecepcionistArgs
  }

  // Custom InputTypes

  /**
   * PatientCountOutputType without action
   */
  export type PatientCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientCountOutputType
     */
    select?: PatientCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * PatientCountOutputType without action
   */
  export type PatientCountOutputTypeCountAdministratorArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: AdministratorWhereInput
  }


  /**
   * PatientCountOutputType without action
   */
  export type PatientCountOutputTypeCountAppointmentArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: AppointmentWhereInput
  }


  /**
   * PatientCountOutputType without action
   */
  export type PatientCountOutputTypeCountDoctorArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: DoctorWhereInput
  }


  /**
   * PatientCountOutputType without action
   */
  export type PatientCountOutputTypeCountMedicalRecordArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: MedicalRecordWhereInput
  }


  /**
   * PatientCountOutputType without action
   */
  export type PatientCountOutputTypeCountRecepcionistArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: RecepcionistWhereInput
  }



  /**
   * Count Type RecepcionistCountOutputType
   */


  export type RecepcionistCountOutputType = {
    Appointment: number
  }

  export type RecepcionistCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    Appointment?: boolean | RecepcionistCountOutputTypeCountAppointmentArgs
  }

  // Custom InputTypes

  /**
   * RecepcionistCountOutputType without action
   */
  export type RecepcionistCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RecepcionistCountOutputType
     */
    select?: RecepcionistCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * RecepcionistCountOutputType without action
   */
  export type RecepcionistCountOutputTypeCountAppointmentArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: AppointmentWhereInput
  }



  /**
   * Count Type RoleCountOutputType
   */


  export type RoleCountOutputType = {
    Administrator: number
    Doctor: number
    Recepcionist: number
  }

  export type RoleCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    Administrator?: boolean | RoleCountOutputTypeCountAdministratorArgs
    Doctor?: boolean | RoleCountOutputTypeCountDoctorArgs
    Recepcionist?: boolean | RoleCountOutputTypeCountRecepcionistArgs
  }

  // Custom InputTypes

  /**
   * RoleCountOutputType without action
   */
  export type RoleCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoleCountOutputType
     */
    select?: RoleCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * RoleCountOutputType without action
   */
  export type RoleCountOutputTypeCountAdministratorArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: AdministratorWhereInput
  }


  /**
   * RoleCountOutputType without action
   */
  export type RoleCountOutputTypeCountDoctorArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: DoctorWhereInput
  }


  /**
   * RoleCountOutputType without action
   */
  export type RoleCountOutputTypeCountRecepcionistArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: RecepcionistWhereInput
  }



  /**
   * Models
   */

  /**
   * Model Address
   */


  export type AggregateAddress = {
    _count: AddressCountAggregateOutputType | null
    _avg: AddressAvgAggregateOutputType | null
    _sum: AddressSumAggregateOutputType | null
    _min: AddressMinAggregateOutputType | null
    _max: AddressMaxAggregateOutputType | null
  }

  export type AddressAvgAggregateOutputType = {
    id: number | null
  }

  export type AddressSumAggregateOutputType = {
    id: number | null
  }

  export type AddressMinAggregateOutputType = {
    id: number | null
    street: string | null
    houseNumber: string | null
    complement: string | null
    district: string | null
    city: string | null
    state: string | null
  }

  export type AddressMaxAggregateOutputType = {
    id: number | null
    street: string | null
    houseNumber: string | null
    complement: string | null
    district: string | null
    city: string | null
    state: string | null
  }

  export type AddressCountAggregateOutputType = {
    id: number
    street: number
    houseNumber: number
    complement: number
    district: number
    city: number
    state: number
    _all: number
  }


  export type AddressAvgAggregateInputType = {
    id?: true
  }

  export type AddressSumAggregateInputType = {
    id?: true
  }

  export type AddressMinAggregateInputType = {
    id?: true
    street?: true
    houseNumber?: true
    complement?: true
    district?: true
    city?: true
    state?: true
  }

  export type AddressMaxAggregateInputType = {
    id?: true
    street?: true
    houseNumber?: true
    complement?: true
    district?: true
    city?: true
    state?: true
  }

  export type AddressCountAggregateInputType = {
    id?: true
    street?: true
    houseNumber?: true
    complement?: true
    district?: true
    city?: true
    state?: true
    _all?: true
  }

  export type AddressAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Address to aggregate.
     */
    where?: AddressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Addresses to fetch.
     */
    orderBy?: Enumerable<AddressOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AddressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Addresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Addresses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Addresses
    **/
    _count?: true | AddressCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AddressAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AddressSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AddressMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AddressMaxAggregateInputType
  }

  export type GetAddressAggregateType<T extends AddressAggregateArgs> = {
        [P in keyof T & keyof AggregateAddress]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAddress[P]>
      : GetScalarType<T[P], AggregateAddress[P]>
  }




  export type AddressGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: AddressWhereInput
    orderBy?: Enumerable<AddressOrderByWithAggregationInput>
    by: AddressScalarFieldEnum[]
    having?: AddressScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AddressCountAggregateInputType | true
    _avg?: AddressAvgAggregateInputType
    _sum?: AddressSumAggregateInputType
    _min?: AddressMinAggregateInputType
    _max?: AddressMaxAggregateInputType
  }


  export type AddressGroupByOutputType = {
    id: number
    street: string
    houseNumber: string
    complement: string
    district: string
    city: string
    state: string
    _count: AddressCountAggregateOutputType | null
    _avg: AddressAvgAggregateOutputType | null
    _sum: AddressSumAggregateOutputType | null
    _min: AddressMinAggregateOutputType | null
    _max: AddressMaxAggregateOutputType | null
  }

  type GetAddressGroupByPayload<T extends AddressGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<AddressGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AddressGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AddressGroupByOutputType[P]>
            : GetScalarType<T[P], AddressGroupByOutputType[P]>
        }
      >
    >


  export type AddressSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    street?: boolean
    houseNumber?: boolean
    complement?: boolean
    district?: boolean
    city?: boolean
    state?: boolean
    Patient?: boolean | Address$PatientArgs<ExtArgs>
    _count?: boolean | AddressCountOutputTypeArgs<ExtArgs>
  }, ExtArgs["result"]["address"]>

  export type AddressSelectScalar = {
    id?: boolean
    street?: boolean
    houseNumber?: boolean
    complement?: boolean
    district?: boolean
    city?: boolean
    state?: boolean
  }

  export type AddressInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    Patient?: boolean | Address$PatientArgs<ExtArgs>
    _count?: boolean | AddressCountOutputTypeArgs<ExtArgs>
  }


  type AddressGetPayload<S extends boolean | null | undefined | AddressArgs> = $Types.GetResult<AddressPayload, S>

  type AddressCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<AddressFindManyArgs, 'select' | 'include'> & {
      select?: AddressCountAggregateInputType | true
    }

  export interface AddressDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Address'], meta: { name: 'Address' } }
    /**
     * Find zero or one Address that matches the filter.
     * @param {AddressFindUniqueArgs} args - Arguments to find a Address
     * @example
     * // Get one Address
     * const address = await prisma.address.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends AddressFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, AddressFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Address'> extends True ? Prisma__AddressClient<$Types.GetResult<AddressPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__AddressClient<$Types.GetResult<AddressPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one Address that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {AddressFindUniqueOrThrowArgs} args - Arguments to find a Address
     * @example
     * // Get one Address
     * const address = await prisma.address.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends AddressFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AddressFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__AddressClient<$Types.GetResult<AddressPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first Address that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AddressFindFirstArgs} args - Arguments to find a Address
     * @example
     * // Get one Address
     * const address = await prisma.address.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends AddressFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, AddressFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Address'> extends True ? Prisma__AddressClient<$Types.GetResult<AddressPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__AddressClient<$Types.GetResult<AddressPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first Address that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AddressFindFirstOrThrowArgs} args - Arguments to find a Address
     * @example
     * // Get one Address
     * const address = await prisma.address.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends AddressFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AddressFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__AddressClient<$Types.GetResult<AddressPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more Addresses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AddressFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Addresses
     * const addresses = await prisma.address.findMany()
     * 
     * // Get first 10 Addresses
     * const addresses = await prisma.address.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const addressWithIdOnly = await prisma.address.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends AddressFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AddressFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<AddressPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a Address.
     * @param {AddressCreateArgs} args - Arguments to create a Address.
     * @example
     * // Create one Address
     * const Address = await prisma.address.create({
     *   data: {
     *     // ... data to create a Address
     *   }
     * })
     * 
    **/
    create<T extends AddressCreateArgs<ExtArgs>>(
      args: SelectSubset<T, AddressCreateArgs<ExtArgs>>
    ): Prisma__AddressClient<$Types.GetResult<AddressPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many Addresses.
     *     @param {AddressCreateManyArgs} args - Arguments to create many Addresses.
     *     @example
     *     // Create many Addresses
     *     const address = await prisma.address.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends AddressCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AddressCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Address.
     * @param {AddressDeleteArgs} args - Arguments to delete one Address.
     * @example
     * // Delete one Address
     * const Address = await prisma.address.delete({
     *   where: {
     *     // ... filter to delete one Address
     *   }
     * })
     * 
    **/
    delete<T extends AddressDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, AddressDeleteArgs<ExtArgs>>
    ): Prisma__AddressClient<$Types.GetResult<AddressPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one Address.
     * @param {AddressUpdateArgs} args - Arguments to update one Address.
     * @example
     * // Update one Address
     * const address = await prisma.address.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends AddressUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, AddressUpdateArgs<ExtArgs>>
    ): Prisma__AddressClient<$Types.GetResult<AddressPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more Addresses.
     * @param {AddressDeleteManyArgs} args - Arguments to filter Addresses to delete.
     * @example
     * // Delete a few Addresses
     * const { count } = await prisma.address.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends AddressDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AddressDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Addresses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AddressUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Addresses
     * const address = await prisma.address.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends AddressUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, AddressUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Address.
     * @param {AddressUpsertArgs} args - Arguments to update or create a Address.
     * @example
     * // Update or create a Address
     * const address = await prisma.address.upsert({
     *   create: {
     *     // ... data to create a Address
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Address we want to update
     *   }
     * })
    **/
    upsert<T extends AddressUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, AddressUpsertArgs<ExtArgs>>
    ): Prisma__AddressClient<$Types.GetResult<AddressPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of Addresses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AddressCountArgs} args - Arguments to filter Addresses to count.
     * @example
     * // Count the number of Addresses
     * const count = await prisma.address.count({
     *   where: {
     *     // ... the filter for the Addresses we want to count
     *   }
     * })
    **/
    count<T extends AddressCountArgs>(
      args?: Subset<T, AddressCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AddressCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Address.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AddressAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AddressAggregateArgs>(args: Subset<T, AddressAggregateArgs>): Prisma.PrismaPromise<GetAddressAggregateType<T>>

    /**
     * Group by Address.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AddressGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AddressGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AddressGroupByArgs['orderBy'] }
        : { orderBy?: AddressGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AddressGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAddressGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Address.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__AddressClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    Patient<T extends Address$PatientArgs<ExtArgs> = {}>(args?: Subset<T, Address$PatientArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<PatientPayload<ExtArgs>, T, 'findMany', never>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Address base type for findUnique actions
   */
  export type AddressFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AddressInclude<ExtArgs> | null
    /**
     * Filter, which Address to fetch.
     */
    where: AddressWhereUniqueInput
  }

  /**
   * Address findUnique
   */
  export interface AddressFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends AddressFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Address findUniqueOrThrow
   */
  export type AddressFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AddressInclude<ExtArgs> | null
    /**
     * Filter, which Address to fetch.
     */
    where: AddressWhereUniqueInput
  }


  /**
   * Address base type for findFirst actions
   */
  export type AddressFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AddressInclude<ExtArgs> | null
    /**
     * Filter, which Address to fetch.
     */
    where?: AddressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Addresses to fetch.
     */
    orderBy?: Enumerable<AddressOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Addresses.
     */
    cursor?: AddressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Addresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Addresses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Addresses.
     */
    distinct?: Enumerable<AddressScalarFieldEnum>
  }

  /**
   * Address findFirst
   */
  export interface AddressFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends AddressFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Address findFirstOrThrow
   */
  export type AddressFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AddressInclude<ExtArgs> | null
    /**
     * Filter, which Address to fetch.
     */
    where?: AddressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Addresses to fetch.
     */
    orderBy?: Enumerable<AddressOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Addresses.
     */
    cursor?: AddressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Addresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Addresses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Addresses.
     */
    distinct?: Enumerable<AddressScalarFieldEnum>
  }


  /**
   * Address findMany
   */
  export type AddressFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AddressInclude<ExtArgs> | null
    /**
     * Filter, which Addresses to fetch.
     */
    where?: AddressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Addresses to fetch.
     */
    orderBy?: Enumerable<AddressOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Addresses.
     */
    cursor?: AddressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Addresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Addresses.
     */
    skip?: number
    distinct?: Enumerable<AddressScalarFieldEnum>
  }


  /**
   * Address create
   */
  export type AddressCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AddressInclude<ExtArgs> | null
    /**
     * The data needed to create a Address.
     */
    data: XOR<AddressCreateInput, AddressUncheckedCreateInput>
  }


  /**
   * Address createMany
   */
  export type AddressCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Addresses.
     */
    data: Enumerable<AddressCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Address update
   */
  export type AddressUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AddressInclude<ExtArgs> | null
    /**
     * The data needed to update a Address.
     */
    data: XOR<AddressUpdateInput, AddressUncheckedUpdateInput>
    /**
     * Choose, which Address to update.
     */
    where: AddressWhereUniqueInput
  }


  /**
   * Address updateMany
   */
  export type AddressUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Addresses.
     */
    data: XOR<AddressUpdateManyMutationInput, AddressUncheckedUpdateManyInput>
    /**
     * Filter which Addresses to update
     */
    where?: AddressWhereInput
  }


  /**
   * Address upsert
   */
  export type AddressUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AddressInclude<ExtArgs> | null
    /**
     * The filter to search for the Address to update in case it exists.
     */
    where: AddressWhereUniqueInput
    /**
     * In case the Address found by the `where` argument doesn't exist, create a new Address with this data.
     */
    create: XOR<AddressCreateInput, AddressUncheckedCreateInput>
    /**
     * In case the Address was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AddressUpdateInput, AddressUncheckedUpdateInput>
  }


  /**
   * Address delete
   */
  export type AddressDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AddressInclude<ExtArgs> | null
    /**
     * Filter which Address to delete.
     */
    where: AddressWhereUniqueInput
  }


  /**
   * Address deleteMany
   */
  export type AddressDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Addresses to delete
     */
    where?: AddressWhereInput
  }


  /**
   * Address.Patient
   */
  export type Address$PatientArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PatientInclude<ExtArgs> | null
    where?: PatientWhereInput
    orderBy?: Enumerable<PatientOrderByWithRelationInput>
    cursor?: PatientWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<PatientScalarFieldEnum>
  }


  /**
   * Address without action
   */
  export type AddressArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AddressInclude<ExtArgs> | null
  }



  /**
   * Model Administrator
   */


  export type AggregateAdministrator = {
    _count: AdministratorCountAggregateOutputType | null
    _avg: AdministratorAvgAggregateOutputType | null
    _sum: AdministratorSumAggregateOutputType | null
    _min: AdministratorMinAggregateOutputType | null
    _max: AdministratorMaxAggregateOutputType | null
  }

  export type AdministratorAvgAggregateOutputType = {
    id: number | null
    patientId: number | null
    roleId: number | null
  }

  export type AdministratorSumAggregateOutputType = {
    id: number | null
    patientId: number | null
    roleId: number | null
  }

  export type AdministratorMinAggregateOutputType = {
    id: number | null
    patientId: number | null
    password: string | null
    roleId: number | null
  }

  export type AdministratorMaxAggregateOutputType = {
    id: number | null
    patientId: number | null
    password: string | null
    roleId: number | null
  }

  export type AdministratorCountAggregateOutputType = {
    id: number
    patientId: number
    password: number
    roleId: number
    _all: number
  }


  export type AdministratorAvgAggregateInputType = {
    id?: true
    patientId?: true
    roleId?: true
  }

  export type AdministratorSumAggregateInputType = {
    id?: true
    patientId?: true
    roleId?: true
  }

  export type AdministratorMinAggregateInputType = {
    id?: true
    patientId?: true
    password?: true
    roleId?: true
  }

  export type AdministratorMaxAggregateInputType = {
    id?: true
    patientId?: true
    password?: true
    roleId?: true
  }

  export type AdministratorCountAggregateInputType = {
    id?: true
    patientId?: true
    password?: true
    roleId?: true
    _all?: true
  }

  export type AdministratorAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Administrator to aggregate.
     */
    where?: AdministratorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Administrators to fetch.
     */
    orderBy?: Enumerable<AdministratorOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AdministratorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Administrators from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Administrators.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Administrators
    **/
    _count?: true | AdministratorCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AdministratorAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AdministratorSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AdministratorMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AdministratorMaxAggregateInputType
  }

  export type GetAdministratorAggregateType<T extends AdministratorAggregateArgs> = {
        [P in keyof T & keyof AggregateAdministrator]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAdministrator[P]>
      : GetScalarType<T[P], AggregateAdministrator[P]>
  }




  export type AdministratorGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: AdministratorWhereInput
    orderBy?: Enumerable<AdministratorOrderByWithAggregationInput>
    by: AdministratorScalarFieldEnum[]
    having?: AdministratorScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AdministratorCountAggregateInputType | true
    _avg?: AdministratorAvgAggregateInputType
    _sum?: AdministratorSumAggregateInputType
    _min?: AdministratorMinAggregateInputType
    _max?: AdministratorMaxAggregateInputType
  }


  export type AdministratorGroupByOutputType = {
    id: number
    patientId: number
    password: string
    roleId: number
    _count: AdministratorCountAggregateOutputType | null
    _avg: AdministratorAvgAggregateOutputType | null
    _sum: AdministratorSumAggregateOutputType | null
    _min: AdministratorMinAggregateOutputType | null
    _max: AdministratorMaxAggregateOutputType | null
  }

  type GetAdministratorGroupByPayload<T extends AdministratorGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<AdministratorGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AdministratorGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AdministratorGroupByOutputType[P]>
            : GetScalarType<T[P], AdministratorGroupByOutputType[P]>
        }
      >
    >


  export type AdministratorSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    patientId?: boolean
    password?: boolean
    roleId?: boolean
    Patient?: boolean | PatientArgs<ExtArgs>
    Role?: boolean | RoleArgs<ExtArgs>
  }, ExtArgs["result"]["administrator"]>

  export type AdministratorSelectScalar = {
    id?: boolean
    patientId?: boolean
    password?: boolean
    roleId?: boolean
  }

  export type AdministratorInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    Patient?: boolean | PatientArgs<ExtArgs>
    Role?: boolean | RoleArgs<ExtArgs>
  }


  type AdministratorGetPayload<S extends boolean | null | undefined | AdministratorArgs> = $Types.GetResult<AdministratorPayload, S>

  type AdministratorCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<AdministratorFindManyArgs, 'select' | 'include'> & {
      select?: AdministratorCountAggregateInputType | true
    }

  export interface AdministratorDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Administrator'], meta: { name: 'Administrator' } }
    /**
     * Find zero or one Administrator that matches the filter.
     * @param {AdministratorFindUniqueArgs} args - Arguments to find a Administrator
     * @example
     * // Get one Administrator
     * const administrator = await prisma.administrator.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends AdministratorFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, AdministratorFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Administrator'> extends True ? Prisma__AdministratorClient<$Types.GetResult<AdministratorPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__AdministratorClient<$Types.GetResult<AdministratorPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one Administrator that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {AdministratorFindUniqueOrThrowArgs} args - Arguments to find a Administrator
     * @example
     * // Get one Administrator
     * const administrator = await prisma.administrator.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends AdministratorFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AdministratorFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__AdministratorClient<$Types.GetResult<AdministratorPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first Administrator that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdministratorFindFirstArgs} args - Arguments to find a Administrator
     * @example
     * // Get one Administrator
     * const administrator = await prisma.administrator.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends AdministratorFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, AdministratorFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Administrator'> extends True ? Prisma__AdministratorClient<$Types.GetResult<AdministratorPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__AdministratorClient<$Types.GetResult<AdministratorPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first Administrator that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdministratorFindFirstOrThrowArgs} args - Arguments to find a Administrator
     * @example
     * // Get one Administrator
     * const administrator = await prisma.administrator.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends AdministratorFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AdministratorFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__AdministratorClient<$Types.GetResult<AdministratorPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more Administrators that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdministratorFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Administrators
     * const administrators = await prisma.administrator.findMany()
     * 
     * // Get first 10 Administrators
     * const administrators = await prisma.administrator.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const administratorWithIdOnly = await prisma.administrator.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends AdministratorFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AdministratorFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<AdministratorPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a Administrator.
     * @param {AdministratorCreateArgs} args - Arguments to create a Administrator.
     * @example
     * // Create one Administrator
     * const Administrator = await prisma.administrator.create({
     *   data: {
     *     // ... data to create a Administrator
     *   }
     * })
     * 
    **/
    create<T extends AdministratorCreateArgs<ExtArgs>>(
      args: SelectSubset<T, AdministratorCreateArgs<ExtArgs>>
    ): Prisma__AdministratorClient<$Types.GetResult<AdministratorPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many Administrators.
     *     @param {AdministratorCreateManyArgs} args - Arguments to create many Administrators.
     *     @example
     *     // Create many Administrators
     *     const administrator = await prisma.administrator.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends AdministratorCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AdministratorCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Administrator.
     * @param {AdministratorDeleteArgs} args - Arguments to delete one Administrator.
     * @example
     * // Delete one Administrator
     * const Administrator = await prisma.administrator.delete({
     *   where: {
     *     // ... filter to delete one Administrator
     *   }
     * })
     * 
    **/
    delete<T extends AdministratorDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, AdministratorDeleteArgs<ExtArgs>>
    ): Prisma__AdministratorClient<$Types.GetResult<AdministratorPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one Administrator.
     * @param {AdministratorUpdateArgs} args - Arguments to update one Administrator.
     * @example
     * // Update one Administrator
     * const administrator = await prisma.administrator.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends AdministratorUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, AdministratorUpdateArgs<ExtArgs>>
    ): Prisma__AdministratorClient<$Types.GetResult<AdministratorPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more Administrators.
     * @param {AdministratorDeleteManyArgs} args - Arguments to filter Administrators to delete.
     * @example
     * // Delete a few Administrators
     * const { count } = await prisma.administrator.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends AdministratorDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AdministratorDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Administrators.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdministratorUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Administrators
     * const administrator = await prisma.administrator.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends AdministratorUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, AdministratorUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Administrator.
     * @param {AdministratorUpsertArgs} args - Arguments to update or create a Administrator.
     * @example
     * // Update or create a Administrator
     * const administrator = await prisma.administrator.upsert({
     *   create: {
     *     // ... data to create a Administrator
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Administrator we want to update
     *   }
     * })
    **/
    upsert<T extends AdministratorUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, AdministratorUpsertArgs<ExtArgs>>
    ): Prisma__AdministratorClient<$Types.GetResult<AdministratorPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of Administrators.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdministratorCountArgs} args - Arguments to filter Administrators to count.
     * @example
     * // Count the number of Administrators
     * const count = await prisma.administrator.count({
     *   where: {
     *     // ... the filter for the Administrators we want to count
     *   }
     * })
    **/
    count<T extends AdministratorCountArgs>(
      args?: Subset<T, AdministratorCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AdministratorCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Administrator.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdministratorAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AdministratorAggregateArgs>(args: Subset<T, AdministratorAggregateArgs>): Prisma.PrismaPromise<GetAdministratorAggregateType<T>>

    /**
     * Group by Administrator.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdministratorGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AdministratorGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AdministratorGroupByArgs['orderBy'] }
        : { orderBy?: AdministratorGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AdministratorGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAdministratorGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Administrator.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__AdministratorClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    Patient<T extends PatientArgs<ExtArgs> = {}>(args?: Subset<T, PatientArgs<ExtArgs>>): Prisma__PatientClient<$Types.GetResult<PatientPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    Role<T extends RoleArgs<ExtArgs> = {}>(args?: Subset<T, RoleArgs<ExtArgs>>): Prisma__RoleClient<$Types.GetResult<RolePayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Administrator base type for findUnique actions
   */
  export type AdministratorFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Administrator
     */
    select?: AdministratorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AdministratorInclude<ExtArgs> | null
    /**
     * Filter, which Administrator to fetch.
     */
    where: AdministratorWhereUniqueInput
  }

  /**
   * Administrator findUnique
   */
  export interface AdministratorFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends AdministratorFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Administrator findUniqueOrThrow
   */
  export type AdministratorFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Administrator
     */
    select?: AdministratorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AdministratorInclude<ExtArgs> | null
    /**
     * Filter, which Administrator to fetch.
     */
    where: AdministratorWhereUniqueInput
  }


  /**
   * Administrator base type for findFirst actions
   */
  export type AdministratorFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Administrator
     */
    select?: AdministratorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AdministratorInclude<ExtArgs> | null
    /**
     * Filter, which Administrator to fetch.
     */
    where?: AdministratorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Administrators to fetch.
     */
    orderBy?: Enumerable<AdministratorOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Administrators.
     */
    cursor?: AdministratorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Administrators from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Administrators.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Administrators.
     */
    distinct?: Enumerable<AdministratorScalarFieldEnum>
  }

  /**
   * Administrator findFirst
   */
  export interface AdministratorFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends AdministratorFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Administrator findFirstOrThrow
   */
  export type AdministratorFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Administrator
     */
    select?: AdministratorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AdministratorInclude<ExtArgs> | null
    /**
     * Filter, which Administrator to fetch.
     */
    where?: AdministratorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Administrators to fetch.
     */
    orderBy?: Enumerable<AdministratorOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Administrators.
     */
    cursor?: AdministratorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Administrators from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Administrators.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Administrators.
     */
    distinct?: Enumerable<AdministratorScalarFieldEnum>
  }


  /**
   * Administrator findMany
   */
  export type AdministratorFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Administrator
     */
    select?: AdministratorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AdministratorInclude<ExtArgs> | null
    /**
     * Filter, which Administrators to fetch.
     */
    where?: AdministratorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Administrators to fetch.
     */
    orderBy?: Enumerable<AdministratorOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Administrators.
     */
    cursor?: AdministratorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Administrators from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Administrators.
     */
    skip?: number
    distinct?: Enumerable<AdministratorScalarFieldEnum>
  }


  /**
   * Administrator create
   */
  export type AdministratorCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Administrator
     */
    select?: AdministratorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AdministratorInclude<ExtArgs> | null
    /**
     * The data needed to create a Administrator.
     */
    data: XOR<AdministratorCreateInput, AdministratorUncheckedCreateInput>
  }


  /**
   * Administrator createMany
   */
  export type AdministratorCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Administrators.
     */
    data: Enumerable<AdministratorCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Administrator update
   */
  export type AdministratorUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Administrator
     */
    select?: AdministratorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AdministratorInclude<ExtArgs> | null
    /**
     * The data needed to update a Administrator.
     */
    data: XOR<AdministratorUpdateInput, AdministratorUncheckedUpdateInput>
    /**
     * Choose, which Administrator to update.
     */
    where: AdministratorWhereUniqueInput
  }


  /**
   * Administrator updateMany
   */
  export type AdministratorUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Administrators.
     */
    data: XOR<AdministratorUpdateManyMutationInput, AdministratorUncheckedUpdateManyInput>
    /**
     * Filter which Administrators to update
     */
    where?: AdministratorWhereInput
  }


  /**
   * Administrator upsert
   */
  export type AdministratorUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Administrator
     */
    select?: AdministratorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AdministratorInclude<ExtArgs> | null
    /**
     * The filter to search for the Administrator to update in case it exists.
     */
    where: AdministratorWhereUniqueInput
    /**
     * In case the Administrator found by the `where` argument doesn't exist, create a new Administrator with this data.
     */
    create: XOR<AdministratorCreateInput, AdministratorUncheckedCreateInput>
    /**
     * In case the Administrator was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AdministratorUpdateInput, AdministratorUncheckedUpdateInput>
  }


  /**
   * Administrator delete
   */
  export type AdministratorDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Administrator
     */
    select?: AdministratorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AdministratorInclude<ExtArgs> | null
    /**
     * Filter which Administrator to delete.
     */
    where: AdministratorWhereUniqueInput
  }


  /**
   * Administrator deleteMany
   */
  export type AdministratorDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Administrators to delete
     */
    where?: AdministratorWhereInput
  }


  /**
   * Administrator without action
   */
  export type AdministratorArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Administrator
     */
    select?: AdministratorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AdministratorInclude<ExtArgs> | null
  }



  /**
   * Model Appointment
   */


  export type AggregateAppointment = {
    _count: AppointmentCountAggregateOutputType | null
    _avg: AppointmentAvgAggregateOutputType | null
    _sum: AppointmentSumAggregateOutputType | null
    _min: AppointmentMinAggregateOutputType | null
    _max: AppointmentMaxAggregateOutputType | null
  }

  export type AppointmentAvgAggregateOutputType = {
    id: number | null
    patientId: number | null
    doctorId: number | null
    recepcionistId: number | null
  }

  export type AppointmentSumAggregateOutputType = {
    id: number | null
    patientId: number | null
    doctorId: number | null
    recepcionistId: number | null
  }

  export type AppointmentMinAggregateOutputType = {
    id: number | null
    scheduleTo: Date | null
    patientId: number | null
    doctorId: number | null
    recepcionistId: number | null
    diagnosis: string | null
    createdAt: Date | null
  }

  export type AppointmentMaxAggregateOutputType = {
    id: number | null
    scheduleTo: Date | null
    patientId: number | null
    doctorId: number | null
    recepcionistId: number | null
    diagnosis: string | null
    createdAt: Date | null
  }

  export type AppointmentCountAggregateOutputType = {
    id: number
    scheduleTo: number
    patientId: number
    doctorId: number
    recepcionistId: number
    diagnosis: number
    createdAt: number
    _all: number
  }


  export type AppointmentAvgAggregateInputType = {
    id?: true
    patientId?: true
    doctorId?: true
    recepcionistId?: true
  }

  export type AppointmentSumAggregateInputType = {
    id?: true
    patientId?: true
    doctorId?: true
    recepcionistId?: true
  }

  export type AppointmentMinAggregateInputType = {
    id?: true
    scheduleTo?: true
    patientId?: true
    doctorId?: true
    recepcionistId?: true
    diagnosis?: true
    createdAt?: true
  }

  export type AppointmentMaxAggregateInputType = {
    id?: true
    scheduleTo?: true
    patientId?: true
    doctorId?: true
    recepcionistId?: true
    diagnosis?: true
    createdAt?: true
  }

  export type AppointmentCountAggregateInputType = {
    id?: true
    scheduleTo?: true
    patientId?: true
    doctorId?: true
    recepcionistId?: true
    diagnosis?: true
    createdAt?: true
    _all?: true
  }

  export type AppointmentAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Appointment to aggregate.
     */
    where?: AppointmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Appointments to fetch.
     */
    orderBy?: Enumerable<AppointmentOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AppointmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Appointments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Appointments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Appointments
    **/
    _count?: true | AppointmentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AppointmentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AppointmentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AppointmentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AppointmentMaxAggregateInputType
  }

  export type GetAppointmentAggregateType<T extends AppointmentAggregateArgs> = {
        [P in keyof T & keyof AggregateAppointment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAppointment[P]>
      : GetScalarType<T[P], AggregateAppointment[P]>
  }




  export type AppointmentGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: AppointmentWhereInput
    orderBy?: Enumerable<AppointmentOrderByWithAggregationInput>
    by: AppointmentScalarFieldEnum[]
    having?: AppointmentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AppointmentCountAggregateInputType | true
    _avg?: AppointmentAvgAggregateInputType
    _sum?: AppointmentSumAggregateInputType
    _min?: AppointmentMinAggregateInputType
    _max?: AppointmentMaxAggregateInputType
  }


  export type AppointmentGroupByOutputType = {
    id: number
    scheduleTo: Date
    patientId: number
    doctorId: number
    recepcionistId: number
    diagnosis: string
    createdAt: Date
    _count: AppointmentCountAggregateOutputType | null
    _avg: AppointmentAvgAggregateOutputType | null
    _sum: AppointmentSumAggregateOutputType | null
    _min: AppointmentMinAggregateOutputType | null
    _max: AppointmentMaxAggregateOutputType | null
  }

  type GetAppointmentGroupByPayload<T extends AppointmentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<AppointmentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AppointmentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AppointmentGroupByOutputType[P]>
            : GetScalarType<T[P], AppointmentGroupByOutputType[P]>
        }
      >
    >


  export type AppointmentSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    scheduleTo?: boolean
    patientId?: boolean
    doctorId?: boolean
    recepcionistId?: boolean
    diagnosis?: boolean
    createdAt?: boolean
    Patient?: boolean | PatientArgs<ExtArgs>
    Doctor?: boolean | DoctorArgs<ExtArgs>
    Recepcionist?: boolean | RecepcionistArgs<ExtArgs>
    MedicalRecord?: boolean | Appointment$MedicalRecordArgs<ExtArgs>
    _count?: boolean | AppointmentCountOutputTypeArgs<ExtArgs>
  }, ExtArgs["result"]["appointment"]>

  export type AppointmentSelectScalar = {
    id?: boolean
    scheduleTo?: boolean
    patientId?: boolean
    doctorId?: boolean
    recepcionistId?: boolean
    diagnosis?: boolean
    createdAt?: boolean
  }

  export type AppointmentInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    Patient?: boolean | PatientArgs<ExtArgs>
    Doctor?: boolean | DoctorArgs<ExtArgs>
    Recepcionist?: boolean | RecepcionistArgs<ExtArgs>
    MedicalRecord?: boolean | Appointment$MedicalRecordArgs<ExtArgs>
    _count?: boolean | AppointmentCountOutputTypeArgs<ExtArgs>
  }


  type AppointmentGetPayload<S extends boolean | null | undefined | AppointmentArgs> = $Types.GetResult<AppointmentPayload, S>

  type AppointmentCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<AppointmentFindManyArgs, 'select' | 'include'> & {
      select?: AppointmentCountAggregateInputType | true
    }

  export interface AppointmentDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Appointment'], meta: { name: 'Appointment' } }
    /**
     * Find zero or one Appointment that matches the filter.
     * @param {AppointmentFindUniqueArgs} args - Arguments to find a Appointment
     * @example
     * // Get one Appointment
     * const appointment = await prisma.appointment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends AppointmentFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, AppointmentFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Appointment'> extends True ? Prisma__AppointmentClient<$Types.GetResult<AppointmentPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__AppointmentClient<$Types.GetResult<AppointmentPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one Appointment that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {AppointmentFindUniqueOrThrowArgs} args - Arguments to find a Appointment
     * @example
     * // Get one Appointment
     * const appointment = await prisma.appointment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends AppointmentFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AppointmentFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__AppointmentClient<$Types.GetResult<AppointmentPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first Appointment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppointmentFindFirstArgs} args - Arguments to find a Appointment
     * @example
     * // Get one Appointment
     * const appointment = await prisma.appointment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends AppointmentFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, AppointmentFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Appointment'> extends True ? Prisma__AppointmentClient<$Types.GetResult<AppointmentPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__AppointmentClient<$Types.GetResult<AppointmentPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first Appointment that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppointmentFindFirstOrThrowArgs} args - Arguments to find a Appointment
     * @example
     * // Get one Appointment
     * const appointment = await prisma.appointment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends AppointmentFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AppointmentFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__AppointmentClient<$Types.GetResult<AppointmentPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more Appointments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppointmentFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Appointments
     * const appointments = await prisma.appointment.findMany()
     * 
     * // Get first 10 Appointments
     * const appointments = await prisma.appointment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const appointmentWithIdOnly = await prisma.appointment.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends AppointmentFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AppointmentFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<AppointmentPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a Appointment.
     * @param {AppointmentCreateArgs} args - Arguments to create a Appointment.
     * @example
     * // Create one Appointment
     * const Appointment = await prisma.appointment.create({
     *   data: {
     *     // ... data to create a Appointment
     *   }
     * })
     * 
    **/
    create<T extends AppointmentCreateArgs<ExtArgs>>(
      args: SelectSubset<T, AppointmentCreateArgs<ExtArgs>>
    ): Prisma__AppointmentClient<$Types.GetResult<AppointmentPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many Appointments.
     *     @param {AppointmentCreateManyArgs} args - Arguments to create many Appointments.
     *     @example
     *     // Create many Appointments
     *     const appointment = await prisma.appointment.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends AppointmentCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AppointmentCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Appointment.
     * @param {AppointmentDeleteArgs} args - Arguments to delete one Appointment.
     * @example
     * // Delete one Appointment
     * const Appointment = await prisma.appointment.delete({
     *   where: {
     *     // ... filter to delete one Appointment
     *   }
     * })
     * 
    **/
    delete<T extends AppointmentDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, AppointmentDeleteArgs<ExtArgs>>
    ): Prisma__AppointmentClient<$Types.GetResult<AppointmentPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one Appointment.
     * @param {AppointmentUpdateArgs} args - Arguments to update one Appointment.
     * @example
     * // Update one Appointment
     * const appointment = await prisma.appointment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends AppointmentUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, AppointmentUpdateArgs<ExtArgs>>
    ): Prisma__AppointmentClient<$Types.GetResult<AppointmentPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more Appointments.
     * @param {AppointmentDeleteManyArgs} args - Arguments to filter Appointments to delete.
     * @example
     * // Delete a few Appointments
     * const { count } = await prisma.appointment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends AppointmentDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AppointmentDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Appointments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppointmentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Appointments
     * const appointment = await prisma.appointment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends AppointmentUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, AppointmentUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Appointment.
     * @param {AppointmentUpsertArgs} args - Arguments to update or create a Appointment.
     * @example
     * // Update or create a Appointment
     * const appointment = await prisma.appointment.upsert({
     *   create: {
     *     // ... data to create a Appointment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Appointment we want to update
     *   }
     * })
    **/
    upsert<T extends AppointmentUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, AppointmentUpsertArgs<ExtArgs>>
    ): Prisma__AppointmentClient<$Types.GetResult<AppointmentPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of Appointments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppointmentCountArgs} args - Arguments to filter Appointments to count.
     * @example
     * // Count the number of Appointments
     * const count = await prisma.appointment.count({
     *   where: {
     *     // ... the filter for the Appointments we want to count
     *   }
     * })
    **/
    count<T extends AppointmentCountArgs>(
      args?: Subset<T, AppointmentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AppointmentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Appointment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppointmentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AppointmentAggregateArgs>(args: Subset<T, AppointmentAggregateArgs>): Prisma.PrismaPromise<GetAppointmentAggregateType<T>>

    /**
     * Group by Appointment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppointmentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AppointmentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AppointmentGroupByArgs['orderBy'] }
        : { orderBy?: AppointmentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AppointmentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAppointmentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Appointment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__AppointmentClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    Patient<T extends PatientArgs<ExtArgs> = {}>(args?: Subset<T, PatientArgs<ExtArgs>>): Prisma__PatientClient<$Types.GetResult<PatientPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    Doctor<T extends DoctorArgs<ExtArgs> = {}>(args?: Subset<T, DoctorArgs<ExtArgs>>): Prisma__DoctorClient<$Types.GetResult<DoctorPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    Recepcionist<T extends RecepcionistArgs<ExtArgs> = {}>(args?: Subset<T, RecepcionistArgs<ExtArgs>>): Prisma__RecepcionistClient<$Types.GetResult<RecepcionistPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    MedicalRecord<T extends Appointment$MedicalRecordArgs<ExtArgs> = {}>(args?: Subset<T, Appointment$MedicalRecordArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<MedicalRecordPayload<ExtArgs>, T, 'findMany', never>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Appointment base type for findUnique actions
   */
  export type AppointmentFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AppointmentInclude<ExtArgs> | null
    /**
     * Filter, which Appointment to fetch.
     */
    where: AppointmentWhereUniqueInput
  }

  /**
   * Appointment findUnique
   */
  export interface AppointmentFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends AppointmentFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Appointment findUniqueOrThrow
   */
  export type AppointmentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AppointmentInclude<ExtArgs> | null
    /**
     * Filter, which Appointment to fetch.
     */
    where: AppointmentWhereUniqueInput
  }


  /**
   * Appointment base type for findFirst actions
   */
  export type AppointmentFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AppointmentInclude<ExtArgs> | null
    /**
     * Filter, which Appointment to fetch.
     */
    where?: AppointmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Appointments to fetch.
     */
    orderBy?: Enumerable<AppointmentOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Appointments.
     */
    cursor?: AppointmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Appointments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Appointments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Appointments.
     */
    distinct?: Enumerable<AppointmentScalarFieldEnum>
  }

  /**
   * Appointment findFirst
   */
  export interface AppointmentFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends AppointmentFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Appointment findFirstOrThrow
   */
  export type AppointmentFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AppointmentInclude<ExtArgs> | null
    /**
     * Filter, which Appointment to fetch.
     */
    where?: AppointmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Appointments to fetch.
     */
    orderBy?: Enumerable<AppointmentOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Appointments.
     */
    cursor?: AppointmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Appointments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Appointments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Appointments.
     */
    distinct?: Enumerable<AppointmentScalarFieldEnum>
  }


  /**
   * Appointment findMany
   */
  export type AppointmentFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AppointmentInclude<ExtArgs> | null
    /**
     * Filter, which Appointments to fetch.
     */
    where?: AppointmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Appointments to fetch.
     */
    orderBy?: Enumerable<AppointmentOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Appointments.
     */
    cursor?: AppointmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Appointments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Appointments.
     */
    skip?: number
    distinct?: Enumerable<AppointmentScalarFieldEnum>
  }


  /**
   * Appointment create
   */
  export type AppointmentCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AppointmentInclude<ExtArgs> | null
    /**
     * The data needed to create a Appointment.
     */
    data: XOR<AppointmentCreateInput, AppointmentUncheckedCreateInput>
  }


  /**
   * Appointment createMany
   */
  export type AppointmentCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Appointments.
     */
    data: Enumerable<AppointmentCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Appointment update
   */
  export type AppointmentUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AppointmentInclude<ExtArgs> | null
    /**
     * The data needed to update a Appointment.
     */
    data: XOR<AppointmentUpdateInput, AppointmentUncheckedUpdateInput>
    /**
     * Choose, which Appointment to update.
     */
    where: AppointmentWhereUniqueInput
  }


  /**
   * Appointment updateMany
   */
  export type AppointmentUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Appointments.
     */
    data: XOR<AppointmentUpdateManyMutationInput, AppointmentUncheckedUpdateManyInput>
    /**
     * Filter which Appointments to update
     */
    where?: AppointmentWhereInput
  }


  /**
   * Appointment upsert
   */
  export type AppointmentUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AppointmentInclude<ExtArgs> | null
    /**
     * The filter to search for the Appointment to update in case it exists.
     */
    where: AppointmentWhereUniqueInput
    /**
     * In case the Appointment found by the `where` argument doesn't exist, create a new Appointment with this data.
     */
    create: XOR<AppointmentCreateInput, AppointmentUncheckedCreateInput>
    /**
     * In case the Appointment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AppointmentUpdateInput, AppointmentUncheckedUpdateInput>
  }


  /**
   * Appointment delete
   */
  export type AppointmentDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AppointmentInclude<ExtArgs> | null
    /**
     * Filter which Appointment to delete.
     */
    where: AppointmentWhereUniqueInput
  }


  /**
   * Appointment deleteMany
   */
  export type AppointmentDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Appointments to delete
     */
    where?: AppointmentWhereInput
  }


  /**
   * Appointment.MedicalRecord
   */
  export type Appointment$MedicalRecordArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicalRecord
     */
    select?: MedicalRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MedicalRecordInclude<ExtArgs> | null
    where?: MedicalRecordWhereInput
    orderBy?: Enumerable<MedicalRecordOrderByWithRelationInput>
    cursor?: MedicalRecordWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<MedicalRecordScalarFieldEnum>
  }


  /**
   * Appointment without action
   */
  export type AppointmentArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AppointmentInclude<ExtArgs> | null
  }



  /**
   * Model Doctor
   */


  export type AggregateDoctor = {
    _count: DoctorCountAggregateOutputType | null
    _avg: DoctorAvgAggregateOutputType | null
    _sum: DoctorSumAggregateOutputType | null
    _min: DoctorMinAggregateOutputType | null
    _max: DoctorMaxAggregateOutputType | null
  }

  export type DoctorAvgAggregateOutputType = {
    id: number | null
    patientId: number | null
    roleId: number | null
  }

  export type DoctorSumAggregateOutputType = {
    id: number | null
    patientId: number | null
    roleId: number | null
  }

  export type DoctorMinAggregateOutputType = {
    id: number | null
    patientId: number | null
    crm: string | null
    speciality: string | null
    password: string | null
    roleId: number | null
  }

  export type DoctorMaxAggregateOutputType = {
    id: number | null
    patientId: number | null
    crm: string | null
    speciality: string | null
    password: string | null
    roleId: number | null
  }

  export type DoctorCountAggregateOutputType = {
    id: number
    patientId: number
    crm: number
    speciality: number
    password: number
    roleId: number
    _all: number
  }


  export type DoctorAvgAggregateInputType = {
    id?: true
    patientId?: true
    roleId?: true
  }

  export type DoctorSumAggregateInputType = {
    id?: true
    patientId?: true
    roleId?: true
  }

  export type DoctorMinAggregateInputType = {
    id?: true
    patientId?: true
    crm?: true
    speciality?: true
    password?: true
    roleId?: true
  }

  export type DoctorMaxAggregateInputType = {
    id?: true
    patientId?: true
    crm?: true
    speciality?: true
    password?: true
    roleId?: true
  }

  export type DoctorCountAggregateInputType = {
    id?: true
    patientId?: true
    crm?: true
    speciality?: true
    password?: true
    roleId?: true
    _all?: true
  }

  export type DoctorAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Doctor to aggregate.
     */
    where?: DoctorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Doctors to fetch.
     */
    orderBy?: Enumerable<DoctorOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DoctorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Doctors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Doctors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Doctors
    **/
    _count?: true | DoctorCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DoctorAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DoctorSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DoctorMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DoctorMaxAggregateInputType
  }

  export type GetDoctorAggregateType<T extends DoctorAggregateArgs> = {
        [P in keyof T & keyof AggregateDoctor]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDoctor[P]>
      : GetScalarType<T[P], AggregateDoctor[P]>
  }




  export type DoctorGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: DoctorWhereInput
    orderBy?: Enumerable<DoctorOrderByWithAggregationInput>
    by: DoctorScalarFieldEnum[]
    having?: DoctorScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DoctorCountAggregateInputType | true
    _avg?: DoctorAvgAggregateInputType
    _sum?: DoctorSumAggregateInputType
    _min?: DoctorMinAggregateInputType
    _max?: DoctorMaxAggregateInputType
  }


  export type DoctorGroupByOutputType = {
    id: number
    patientId: number
    crm: string
    speciality: string
    password: string
    roleId: number
    _count: DoctorCountAggregateOutputType | null
    _avg: DoctorAvgAggregateOutputType | null
    _sum: DoctorSumAggregateOutputType | null
    _min: DoctorMinAggregateOutputType | null
    _max: DoctorMaxAggregateOutputType | null
  }

  type GetDoctorGroupByPayload<T extends DoctorGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<DoctorGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DoctorGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DoctorGroupByOutputType[P]>
            : GetScalarType<T[P], DoctorGroupByOutputType[P]>
        }
      >
    >


  export type DoctorSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    patientId?: boolean
    crm?: boolean
    speciality?: boolean
    password?: boolean
    roleId?: boolean
    Appointment?: boolean | Doctor$AppointmentArgs<ExtArgs>
    Patient?: boolean | PatientArgs<ExtArgs>
    Role?: boolean | RoleArgs<ExtArgs>
    _count?: boolean | DoctorCountOutputTypeArgs<ExtArgs>
  }, ExtArgs["result"]["doctor"]>

  export type DoctorSelectScalar = {
    id?: boolean
    patientId?: boolean
    crm?: boolean
    speciality?: boolean
    password?: boolean
    roleId?: boolean
  }

  export type DoctorInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    Appointment?: boolean | Doctor$AppointmentArgs<ExtArgs>
    Patient?: boolean | PatientArgs<ExtArgs>
    Role?: boolean | RoleArgs<ExtArgs>
    _count?: boolean | DoctorCountOutputTypeArgs<ExtArgs>
  }


  type DoctorGetPayload<S extends boolean | null | undefined | DoctorArgs> = $Types.GetResult<DoctorPayload, S>

  type DoctorCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<DoctorFindManyArgs, 'select' | 'include'> & {
      select?: DoctorCountAggregateInputType | true
    }

  export interface DoctorDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Doctor'], meta: { name: 'Doctor' } }
    /**
     * Find zero or one Doctor that matches the filter.
     * @param {DoctorFindUniqueArgs} args - Arguments to find a Doctor
     * @example
     * // Get one Doctor
     * const doctor = await prisma.doctor.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends DoctorFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, DoctorFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Doctor'> extends True ? Prisma__DoctorClient<$Types.GetResult<DoctorPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__DoctorClient<$Types.GetResult<DoctorPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one Doctor that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {DoctorFindUniqueOrThrowArgs} args - Arguments to find a Doctor
     * @example
     * // Get one Doctor
     * const doctor = await prisma.doctor.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends DoctorFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, DoctorFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__DoctorClient<$Types.GetResult<DoctorPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first Doctor that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoctorFindFirstArgs} args - Arguments to find a Doctor
     * @example
     * // Get one Doctor
     * const doctor = await prisma.doctor.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends DoctorFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, DoctorFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Doctor'> extends True ? Prisma__DoctorClient<$Types.GetResult<DoctorPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__DoctorClient<$Types.GetResult<DoctorPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first Doctor that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoctorFindFirstOrThrowArgs} args - Arguments to find a Doctor
     * @example
     * // Get one Doctor
     * const doctor = await prisma.doctor.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends DoctorFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, DoctorFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__DoctorClient<$Types.GetResult<DoctorPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more Doctors that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoctorFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Doctors
     * const doctors = await prisma.doctor.findMany()
     * 
     * // Get first 10 Doctors
     * const doctors = await prisma.doctor.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const doctorWithIdOnly = await prisma.doctor.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends DoctorFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, DoctorFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<DoctorPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a Doctor.
     * @param {DoctorCreateArgs} args - Arguments to create a Doctor.
     * @example
     * // Create one Doctor
     * const Doctor = await prisma.doctor.create({
     *   data: {
     *     // ... data to create a Doctor
     *   }
     * })
     * 
    **/
    create<T extends DoctorCreateArgs<ExtArgs>>(
      args: SelectSubset<T, DoctorCreateArgs<ExtArgs>>
    ): Prisma__DoctorClient<$Types.GetResult<DoctorPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many Doctors.
     *     @param {DoctorCreateManyArgs} args - Arguments to create many Doctors.
     *     @example
     *     // Create many Doctors
     *     const doctor = await prisma.doctor.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends DoctorCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, DoctorCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Doctor.
     * @param {DoctorDeleteArgs} args - Arguments to delete one Doctor.
     * @example
     * // Delete one Doctor
     * const Doctor = await prisma.doctor.delete({
     *   where: {
     *     // ... filter to delete one Doctor
     *   }
     * })
     * 
    **/
    delete<T extends DoctorDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, DoctorDeleteArgs<ExtArgs>>
    ): Prisma__DoctorClient<$Types.GetResult<DoctorPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one Doctor.
     * @param {DoctorUpdateArgs} args - Arguments to update one Doctor.
     * @example
     * // Update one Doctor
     * const doctor = await prisma.doctor.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends DoctorUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, DoctorUpdateArgs<ExtArgs>>
    ): Prisma__DoctorClient<$Types.GetResult<DoctorPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more Doctors.
     * @param {DoctorDeleteManyArgs} args - Arguments to filter Doctors to delete.
     * @example
     * // Delete a few Doctors
     * const { count } = await prisma.doctor.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends DoctorDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, DoctorDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Doctors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoctorUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Doctors
     * const doctor = await prisma.doctor.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends DoctorUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, DoctorUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Doctor.
     * @param {DoctorUpsertArgs} args - Arguments to update or create a Doctor.
     * @example
     * // Update or create a Doctor
     * const doctor = await prisma.doctor.upsert({
     *   create: {
     *     // ... data to create a Doctor
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Doctor we want to update
     *   }
     * })
    **/
    upsert<T extends DoctorUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, DoctorUpsertArgs<ExtArgs>>
    ): Prisma__DoctorClient<$Types.GetResult<DoctorPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of Doctors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoctorCountArgs} args - Arguments to filter Doctors to count.
     * @example
     * // Count the number of Doctors
     * const count = await prisma.doctor.count({
     *   where: {
     *     // ... the filter for the Doctors we want to count
     *   }
     * })
    **/
    count<T extends DoctorCountArgs>(
      args?: Subset<T, DoctorCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DoctorCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Doctor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoctorAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DoctorAggregateArgs>(args: Subset<T, DoctorAggregateArgs>): Prisma.PrismaPromise<GetDoctorAggregateType<T>>

    /**
     * Group by Doctor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoctorGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DoctorGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DoctorGroupByArgs['orderBy'] }
        : { orderBy?: DoctorGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DoctorGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDoctorGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Doctor.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__DoctorClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    Appointment<T extends Doctor$AppointmentArgs<ExtArgs> = {}>(args?: Subset<T, Doctor$AppointmentArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<AppointmentPayload<ExtArgs>, T, 'findMany', never>| Null>;

    Patient<T extends PatientArgs<ExtArgs> = {}>(args?: Subset<T, PatientArgs<ExtArgs>>): Prisma__PatientClient<$Types.GetResult<PatientPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    Role<T extends RoleArgs<ExtArgs> = {}>(args?: Subset<T, RoleArgs<ExtArgs>>): Prisma__RoleClient<$Types.GetResult<RolePayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Doctor base type for findUnique actions
   */
  export type DoctorFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Doctor
     */
    select?: DoctorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DoctorInclude<ExtArgs> | null
    /**
     * Filter, which Doctor to fetch.
     */
    where: DoctorWhereUniqueInput
  }

  /**
   * Doctor findUnique
   */
  export interface DoctorFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends DoctorFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Doctor findUniqueOrThrow
   */
  export type DoctorFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Doctor
     */
    select?: DoctorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DoctorInclude<ExtArgs> | null
    /**
     * Filter, which Doctor to fetch.
     */
    where: DoctorWhereUniqueInput
  }


  /**
   * Doctor base type for findFirst actions
   */
  export type DoctorFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Doctor
     */
    select?: DoctorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DoctorInclude<ExtArgs> | null
    /**
     * Filter, which Doctor to fetch.
     */
    where?: DoctorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Doctors to fetch.
     */
    orderBy?: Enumerable<DoctorOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Doctors.
     */
    cursor?: DoctorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Doctors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Doctors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Doctors.
     */
    distinct?: Enumerable<DoctorScalarFieldEnum>
  }

  /**
   * Doctor findFirst
   */
  export interface DoctorFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends DoctorFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Doctor findFirstOrThrow
   */
  export type DoctorFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Doctor
     */
    select?: DoctorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DoctorInclude<ExtArgs> | null
    /**
     * Filter, which Doctor to fetch.
     */
    where?: DoctorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Doctors to fetch.
     */
    orderBy?: Enumerable<DoctorOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Doctors.
     */
    cursor?: DoctorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Doctors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Doctors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Doctors.
     */
    distinct?: Enumerable<DoctorScalarFieldEnum>
  }


  /**
   * Doctor findMany
   */
  export type DoctorFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Doctor
     */
    select?: DoctorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DoctorInclude<ExtArgs> | null
    /**
     * Filter, which Doctors to fetch.
     */
    where?: DoctorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Doctors to fetch.
     */
    orderBy?: Enumerable<DoctorOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Doctors.
     */
    cursor?: DoctorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Doctors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Doctors.
     */
    skip?: number
    distinct?: Enumerable<DoctorScalarFieldEnum>
  }


  /**
   * Doctor create
   */
  export type DoctorCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Doctor
     */
    select?: DoctorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DoctorInclude<ExtArgs> | null
    /**
     * The data needed to create a Doctor.
     */
    data: XOR<DoctorCreateInput, DoctorUncheckedCreateInput>
  }


  /**
   * Doctor createMany
   */
  export type DoctorCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Doctors.
     */
    data: Enumerable<DoctorCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Doctor update
   */
  export type DoctorUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Doctor
     */
    select?: DoctorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DoctorInclude<ExtArgs> | null
    /**
     * The data needed to update a Doctor.
     */
    data: XOR<DoctorUpdateInput, DoctorUncheckedUpdateInput>
    /**
     * Choose, which Doctor to update.
     */
    where: DoctorWhereUniqueInput
  }


  /**
   * Doctor updateMany
   */
  export type DoctorUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Doctors.
     */
    data: XOR<DoctorUpdateManyMutationInput, DoctorUncheckedUpdateManyInput>
    /**
     * Filter which Doctors to update
     */
    where?: DoctorWhereInput
  }


  /**
   * Doctor upsert
   */
  export type DoctorUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Doctor
     */
    select?: DoctorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DoctorInclude<ExtArgs> | null
    /**
     * The filter to search for the Doctor to update in case it exists.
     */
    where: DoctorWhereUniqueInput
    /**
     * In case the Doctor found by the `where` argument doesn't exist, create a new Doctor with this data.
     */
    create: XOR<DoctorCreateInput, DoctorUncheckedCreateInput>
    /**
     * In case the Doctor was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DoctorUpdateInput, DoctorUncheckedUpdateInput>
  }


  /**
   * Doctor delete
   */
  export type DoctorDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Doctor
     */
    select?: DoctorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DoctorInclude<ExtArgs> | null
    /**
     * Filter which Doctor to delete.
     */
    where: DoctorWhereUniqueInput
  }


  /**
   * Doctor deleteMany
   */
  export type DoctorDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Doctors to delete
     */
    where?: DoctorWhereInput
  }


  /**
   * Doctor.Appointment
   */
  export type Doctor$AppointmentArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AppointmentInclude<ExtArgs> | null
    where?: AppointmentWhereInput
    orderBy?: Enumerable<AppointmentOrderByWithRelationInput>
    cursor?: AppointmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<AppointmentScalarFieldEnum>
  }


  /**
   * Doctor without action
   */
  export type DoctorArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Doctor
     */
    select?: DoctorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DoctorInclude<ExtArgs> | null
  }



  /**
   * Model MedicalRecord
   */


  export type AggregateMedicalRecord = {
    _count: MedicalRecordCountAggregateOutputType | null
    _avg: MedicalRecordAvgAggregateOutputType | null
    _sum: MedicalRecordSumAggregateOutputType | null
    _min: MedicalRecordMinAggregateOutputType | null
    _max: MedicalRecordMaxAggregateOutputType | null
  }

  export type MedicalRecordAvgAggregateOutputType = {
    id: number | null
    patientId: number | null
    appointmentId: number | null
  }

  export type MedicalRecordSumAggregateOutputType = {
    id: number | null
    patientId: number | null
    appointmentId: number | null
  }

  export type MedicalRecordMinAggregateOutputType = {
    id: number | null
    patientId: number | null
    appointmentId: number | null
  }

  export type MedicalRecordMaxAggregateOutputType = {
    id: number | null
    patientId: number | null
    appointmentId: number | null
  }

  export type MedicalRecordCountAggregateOutputType = {
    id: number
    patientId: number
    appointmentId: number
    _all: number
  }


  export type MedicalRecordAvgAggregateInputType = {
    id?: true
    patientId?: true
    appointmentId?: true
  }

  export type MedicalRecordSumAggregateInputType = {
    id?: true
    patientId?: true
    appointmentId?: true
  }

  export type MedicalRecordMinAggregateInputType = {
    id?: true
    patientId?: true
    appointmentId?: true
  }

  export type MedicalRecordMaxAggregateInputType = {
    id?: true
    patientId?: true
    appointmentId?: true
  }

  export type MedicalRecordCountAggregateInputType = {
    id?: true
    patientId?: true
    appointmentId?: true
    _all?: true
  }

  export type MedicalRecordAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which MedicalRecord to aggregate.
     */
    where?: MedicalRecordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MedicalRecords to fetch.
     */
    orderBy?: Enumerable<MedicalRecordOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MedicalRecordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MedicalRecords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MedicalRecords.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MedicalRecords
    **/
    _count?: true | MedicalRecordCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MedicalRecordAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MedicalRecordSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MedicalRecordMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MedicalRecordMaxAggregateInputType
  }

  export type GetMedicalRecordAggregateType<T extends MedicalRecordAggregateArgs> = {
        [P in keyof T & keyof AggregateMedicalRecord]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMedicalRecord[P]>
      : GetScalarType<T[P], AggregateMedicalRecord[P]>
  }




  export type MedicalRecordGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: MedicalRecordWhereInput
    orderBy?: Enumerable<MedicalRecordOrderByWithAggregationInput>
    by: MedicalRecordScalarFieldEnum[]
    having?: MedicalRecordScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MedicalRecordCountAggregateInputType | true
    _avg?: MedicalRecordAvgAggregateInputType
    _sum?: MedicalRecordSumAggregateInputType
    _min?: MedicalRecordMinAggregateInputType
    _max?: MedicalRecordMaxAggregateInputType
  }


  export type MedicalRecordGroupByOutputType = {
    id: number
    patientId: number
    appointmentId: number
    _count: MedicalRecordCountAggregateOutputType | null
    _avg: MedicalRecordAvgAggregateOutputType | null
    _sum: MedicalRecordSumAggregateOutputType | null
    _min: MedicalRecordMinAggregateOutputType | null
    _max: MedicalRecordMaxAggregateOutputType | null
  }

  type GetMedicalRecordGroupByPayload<T extends MedicalRecordGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<MedicalRecordGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MedicalRecordGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MedicalRecordGroupByOutputType[P]>
            : GetScalarType<T[P], MedicalRecordGroupByOutputType[P]>
        }
      >
    >


  export type MedicalRecordSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    patientId?: boolean
    appointmentId?: boolean
    Patient?: boolean | PatientArgs<ExtArgs>
    Appointment?: boolean | AppointmentArgs<ExtArgs>
  }, ExtArgs["result"]["medicalRecord"]>

  export type MedicalRecordSelectScalar = {
    id?: boolean
    patientId?: boolean
    appointmentId?: boolean
  }

  export type MedicalRecordInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    Patient?: boolean | PatientArgs<ExtArgs>
    Appointment?: boolean | AppointmentArgs<ExtArgs>
  }


  type MedicalRecordGetPayload<S extends boolean | null | undefined | MedicalRecordArgs> = $Types.GetResult<MedicalRecordPayload, S>

  type MedicalRecordCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<MedicalRecordFindManyArgs, 'select' | 'include'> & {
      select?: MedicalRecordCountAggregateInputType | true
    }

  export interface MedicalRecordDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MedicalRecord'], meta: { name: 'MedicalRecord' } }
    /**
     * Find zero or one MedicalRecord that matches the filter.
     * @param {MedicalRecordFindUniqueArgs} args - Arguments to find a MedicalRecord
     * @example
     * // Get one MedicalRecord
     * const medicalRecord = await prisma.medicalRecord.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends MedicalRecordFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, MedicalRecordFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'MedicalRecord'> extends True ? Prisma__MedicalRecordClient<$Types.GetResult<MedicalRecordPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__MedicalRecordClient<$Types.GetResult<MedicalRecordPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one MedicalRecord that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {MedicalRecordFindUniqueOrThrowArgs} args - Arguments to find a MedicalRecord
     * @example
     * // Get one MedicalRecord
     * const medicalRecord = await prisma.medicalRecord.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends MedicalRecordFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, MedicalRecordFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__MedicalRecordClient<$Types.GetResult<MedicalRecordPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first MedicalRecord that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MedicalRecordFindFirstArgs} args - Arguments to find a MedicalRecord
     * @example
     * // Get one MedicalRecord
     * const medicalRecord = await prisma.medicalRecord.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends MedicalRecordFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, MedicalRecordFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'MedicalRecord'> extends True ? Prisma__MedicalRecordClient<$Types.GetResult<MedicalRecordPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__MedicalRecordClient<$Types.GetResult<MedicalRecordPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first MedicalRecord that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MedicalRecordFindFirstOrThrowArgs} args - Arguments to find a MedicalRecord
     * @example
     * // Get one MedicalRecord
     * const medicalRecord = await prisma.medicalRecord.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends MedicalRecordFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, MedicalRecordFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__MedicalRecordClient<$Types.GetResult<MedicalRecordPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more MedicalRecords that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MedicalRecordFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MedicalRecords
     * const medicalRecords = await prisma.medicalRecord.findMany()
     * 
     * // Get first 10 MedicalRecords
     * const medicalRecords = await prisma.medicalRecord.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const medicalRecordWithIdOnly = await prisma.medicalRecord.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends MedicalRecordFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, MedicalRecordFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<MedicalRecordPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a MedicalRecord.
     * @param {MedicalRecordCreateArgs} args - Arguments to create a MedicalRecord.
     * @example
     * // Create one MedicalRecord
     * const MedicalRecord = await prisma.medicalRecord.create({
     *   data: {
     *     // ... data to create a MedicalRecord
     *   }
     * })
     * 
    **/
    create<T extends MedicalRecordCreateArgs<ExtArgs>>(
      args: SelectSubset<T, MedicalRecordCreateArgs<ExtArgs>>
    ): Prisma__MedicalRecordClient<$Types.GetResult<MedicalRecordPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many MedicalRecords.
     *     @param {MedicalRecordCreateManyArgs} args - Arguments to create many MedicalRecords.
     *     @example
     *     // Create many MedicalRecords
     *     const medicalRecord = await prisma.medicalRecord.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends MedicalRecordCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, MedicalRecordCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a MedicalRecord.
     * @param {MedicalRecordDeleteArgs} args - Arguments to delete one MedicalRecord.
     * @example
     * // Delete one MedicalRecord
     * const MedicalRecord = await prisma.medicalRecord.delete({
     *   where: {
     *     // ... filter to delete one MedicalRecord
     *   }
     * })
     * 
    **/
    delete<T extends MedicalRecordDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, MedicalRecordDeleteArgs<ExtArgs>>
    ): Prisma__MedicalRecordClient<$Types.GetResult<MedicalRecordPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one MedicalRecord.
     * @param {MedicalRecordUpdateArgs} args - Arguments to update one MedicalRecord.
     * @example
     * // Update one MedicalRecord
     * const medicalRecord = await prisma.medicalRecord.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends MedicalRecordUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, MedicalRecordUpdateArgs<ExtArgs>>
    ): Prisma__MedicalRecordClient<$Types.GetResult<MedicalRecordPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more MedicalRecords.
     * @param {MedicalRecordDeleteManyArgs} args - Arguments to filter MedicalRecords to delete.
     * @example
     * // Delete a few MedicalRecords
     * const { count } = await prisma.medicalRecord.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends MedicalRecordDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, MedicalRecordDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MedicalRecords.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MedicalRecordUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MedicalRecords
     * const medicalRecord = await prisma.medicalRecord.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends MedicalRecordUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, MedicalRecordUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one MedicalRecord.
     * @param {MedicalRecordUpsertArgs} args - Arguments to update or create a MedicalRecord.
     * @example
     * // Update or create a MedicalRecord
     * const medicalRecord = await prisma.medicalRecord.upsert({
     *   create: {
     *     // ... data to create a MedicalRecord
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MedicalRecord we want to update
     *   }
     * })
    **/
    upsert<T extends MedicalRecordUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, MedicalRecordUpsertArgs<ExtArgs>>
    ): Prisma__MedicalRecordClient<$Types.GetResult<MedicalRecordPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of MedicalRecords.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MedicalRecordCountArgs} args - Arguments to filter MedicalRecords to count.
     * @example
     * // Count the number of MedicalRecords
     * const count = await prisma.medicalRecord.count({
     *   where: {
     *     // ... the filter for the MedicalRecords we want to count
     *   }
     * })
    **/
    count<T extends MedicalRecordCountArgs>(
      args?: Subset<T, MedicalRecordCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MedicalRecordCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MedicalRecord.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MedicalRecordAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MedicalRecordAggregateArgs>(args: Subset<T, MedicalRecordAggregateArgs>): Prisma.PrismaPromise<GetMedicalRecordAggregateType<T>>

    /**
     * Group by MedicalRecord.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MedicalRecordGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MedicalRecordGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MedicalRecordGroupByArgs['orderBy'] }
        : { orderBy?: MedicalRecordGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MedicalRecordGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMedicalRecordGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for MedicalRecord.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__MedicalRecordClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    Patient<T extends PatientArgs<ExtArgs> = {}>(args?: Subset<T, PatientArgs<ExtArgs>>): Prisma__PatientClient<$Types.GetResult<PatientPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    Appointment<T extends AppointmentArgs<ExtArgs> = {}>(args?: Subset<T, AppointmentArgs<ExtArgs>>): Prisma__AppointmentClient<$Types.GetResult<AppointmentPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * MedicalRecord base type for findUnique actions
   */
  export type MedicalRecordFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicalRecord
     */
    select?: MedicalRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MedicalRecordInclude<ExtArgs> | null
    /**
     * Filter, which MedicalRecord to fetch.
     */
    where: MedicalRecordWhereUniqueInput
  }

  /**
   * MedicalRecord findUnique
   */
  export interface MedicalRecordFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends MedicalRecordFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * MedicalRecord findUniqueOrThrow
   */
  export type MedicalRecordFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicalRecord
     */
    select?: MedicalRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MedicalRecordInclude<ExtArgs> | null
    /**
     * Filter, which MedicalRecord to fetch.
     */
    where: MedicalRecordWhereUniqueInput
  }


  /**
   * MedicalRecord base type for findFirst actions
   */
  export type MedicalRecordFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicalRecord
     */
    select?: MedicalRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MedicalRecordInclude<ExtArgs> | null
    /**
     * Filter, which MedicalRecord to fetch.
     */
    where?: MedicalRecordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MedicalRecords to fetch.
     */
    orderBy?: Enumerable<MedicalRecordOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MedicalRecords.
     */
    cursor?: MedicalRecordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MedicalRecords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MedicalRecords.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MedicalRecords.
     */
    distinct?: Enumerable<MedicalRecordScalarFieldEnum>
  }

  /**
   * MedicalRecord findFirst
   */
  export interface MedicalRecordFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends MedicalRecordFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * MedicalRecord findFirstOrThrow
   */
  export type MedicalRecordFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicalRecord
     */
    select?: MedicalRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MedicalRecordInclude<ExtArgs> | null
    /**
     * Filter, which MedicalRecord to fetch.
     */
    where?: MedicalRecordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MedicalRecords to fetch.
     */
    orderBy?: Enumerable<MedicalRecordOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MedicalRecords.
     */
    cursor?: MedicalRecordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MedicalRecords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MedicalRecords.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MedicalRecords.
     */
    distinct?: Enumerable<MedicalRecordScalarFieldEnum>
  }


  /**
   * MedicalRecord findMany
   */
  export type MedicalRecordFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicalRecord
     */
    select?: MedicalRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MedicalRecordInclude<ExtArgs> | null
    /**
     * Filter, which MedicalRecords to fetch.
     */
    where?: MedicalRecordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MedicalRecords to fetch.
     */
    orderBy?: Enumerable<MedicalRecordOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MedicalRecords.
     */
    cursor?: MedicalRecordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MedicalRecords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MedicalRecords.
     */
    skip?: number
    distinct?: Enumerable<MedicalRecordScalarFieldEnum>
  }


  /**
   * MedicalRecord create
   */
  export type MedicalRecordCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicalRecord
     */
    select?: MedicalRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MedicalRecordInclude<ExtArgs> | null
    /**
     * The data needed to create a MedicalRecord.
     */
    data: XOR<MedicalRecordCreateInput, MedicalRecordUncheckedCreateInput>
  }


  /**
   * MedicalRecord createMany
   */
  export type MedicalRecordCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many MedicalRecords.
     */
    data: Enumerable<MedicalRecordCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * MedicalRecord update
   */
  export type MedicalRecordUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicalRecord
     */
    select?: MedicalRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MedicalRecordInclude<ExtArgs> | null
    /**
     * The data needed to update a MedicalRecord.
     */
    data: XOR<MedicalRecordUpdateInput, MedicalRecordUncheckedUpdateInput>
    /**
     * Choose, which MedicalRecord to update.
     */
    where: MedicalRecordWhereUniqueInput
  }


  /**
   * MedicalRecord updateMany
   */
  export type MedicalRecordUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update MedicalRecords.
     */
    data: XOR<MedicalRecordUpdateManyMutationInput, MedicalRecordUncheckedUpdateManyInput>
    /**
     * Filter which MedicalRecords to update
     */
    where?: MedicalRecordWhereInput
  }


  /**
   * MedicalRecord upsert
   */
  export type MedicalRecordUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicalRecord
     */
    select?: MedicalRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MedicalRecordInclude<ExtArgs> | null
    /**
     * The filter to search for the MedicalRecord to update in case it exists.
     */
    where: MedicalRecordWhereUniqueInput
    /**
     * In case the MedicalRecord found by the `where` argument doesn't exist, create a new MedicalRecord with this data.
     */
    create: XOR<MedicalRecordCreateInput, MedicalRecordUncheckedCreateInput>
    /**
     * In case the MedicalRecord was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MedicalRecordUpdateInput, MedicalRecordUncheckedUpdateInput>
  }


  /**
   * MedicalRecord delete
   */
  export type MedicalRecordDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicalRecord
     */
    select?: MedicalRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MedicalRecordInclude<ExtArgs> | null
    /**
     * Filter which MedicalRecord to delete.
     */
    where: MedicalRecordWhereUniqueInput
  }


  /**
   * MedicalRecord deleteMany
   */
  export type MedicalRecordDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which MedicalRecords to delete
     */
    where?: MedicalRecordWhereInput
  }


  /**
   * MedicalRecord without action
   */
  export type MedicalRecordArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicalRecord
     */
    select?: MedicalRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MedicalRecordInclude<ExtArgs> | null
  }



  /**
   * Model Patient
   */


  export type AggregatePatient = {
    _count: PatientCountAggregateOutputType | null
    _avg: PatientAvgAggregateOutputType | null
    _sum: PatientSumAggregateOutputType | null
    _min: PatientMinAggregateOutputType | null
    _max: PatientMaxAggregateOutputType | null
  }

  export type PatientAvgAggregateOutputType = {
    id: number | null
    addressId: number | null
  }

  export type PatientSumAggregateOutputType = {
    id: number | null
    addressId: number | null
  }

  export type PatientMinAggregateOutputType = {
    id: number | null
    name: string | null
    birthdate: Date | null
    gender: string | null
    cpf: string | null
    rg: string | null
    mother: string | null
    father: string | null
    email: string | null
    phone: string | null
    createdAt: Date | null
    addressId: number | null
  }

  export type PatientMaxAggregateOutputType = {
    id: number | null
    name: string | null
    birthdate: Date | null
    gender: string | null
    cpf: string | null
    rg: string | null
    mother: string | null
    father: string | null
    email: string | null
    phone: string | null
    createdAt: Date | null
    addressId: number | null
  }

  export type PatientCountAggregateOutputType = {
    id: number
    name: number
    birthdate: number
    gender: number
    cpf: number
    rg: number
    mother: number
    father: number
    email: number
    phone: number
    createdAt: number
    addressId: number
    _all: number
  }


  export type PatientAvgAggregateInputType = {
    id?: true
    addressId?: true
  }

  export type PatientSumAggregateInputType = {
    id?: true
    addressId?: true
  }

  export type PatientMinAggregateInputType = {
    id?: true
    name?: true
    birthdate?: true
    gender?: true
    cpf?: true
    rg?: true
    mother?: true
    father?: true
    email?: true
    phone?: true
    createdAt?: true
    addressId?: true
  }

  export type PatientMaxAggregateInputType = {
    id?: true
    name?: true
    birthdate?: true
    gender?: true
    cpf?: true
    rg?: true
    mother?: true
    father?: true
    email?: true
    phone?: true
    createdAt?: true
    addressId?: true
  }

  export type PatientCountAggregateInputType = {
    id?: true
    name?: true
    birthdate?: true
    gender?: true
    cpf?: true
    rg?: true
    mother?: true
    father?: true
    email?: true
    phone?: true
    createdAt?: true
    addressId?: true
    _all?: true
  }

  export type PatientAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Patient to aggregate.
     */
    where?: PatientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Patients to fetch.
     */
    orderBy?: Enumerable<PatientOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PatientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Patients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Patients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Patients
    **/
    _count?: true | PatientCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PatientAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PatientSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PatientMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PatientMaxAggregateInputType
  }

  export type GetPatientAggregateType<T extends PatientAggregateArgs> = {
        [P in keyof T & keyof AggregatePatient]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePatient[P]>
      : GetScalarType<T[P], AggregatePatient[P]>
  }




  export type PatientGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: PatientWhereInput
    orderBy?: Enumerable<PatientOrderByWithAggregationInput>
    by: PatientScalarFieldEnum[]
    having?: PatientScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PatientCountAggregateInputType | true
    _avg?: PatientAvgAggregateInputType
    _sum?: PatientSumAggregateInputType
    _min?: PatientMinAggregateInputType
    _max?: PatientMaxAggregateInputType
  }


  export type PatientGroupByOutputType = {
    id: number
    name: string
    birthdate: Date
    gender: string
    cpf: string
    rg: string | null
    mother: string
    father: string
    email: string
    phone: string
    createdAt: Date
    addressId: number
    _count: PatientCountAggregateOutputType | null
    _avg: PatientAvgAggregateOutputType | null
    _sum: PatientSumAggregateOutputType | null
    _min: PatientMinAggregateOutputType | null
    _max: PatientMaxAggregateOutputType | null
  }

  type GetPatientGroupByPayload<T extends PatientGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<PatientGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PatientGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PatientGroupByOutputType[P]>
            : GetScalarType<T[P], PatientGroupByOutputType[P]>
        }
      >
    >


  export type PatientSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    birthdate?: boolean
    gender?: boolean
    cpf?: boolean
    rg?: boolean
    mother?: boolean
    father?: boolean
    email?: boolean
    phone?: boolean
    createdAt?: boolean
    addressId?: boolean
    Administrator?: boolean | Patient$AdministratorArgs<ExtArgs>
    Appointment?: boolean | Patient$AppointmentArgs<ExtArgs>
    Doctor?: boolean | Patient$DoctorArgs<ExtArgs>
    MedicalRecord?: boolean | Patient$MedicalRecordArgs<ExtArgs>
    Address?: boolean | AddressArgs<ExtArgs>
    Recepcionist?: boolean | Patient$RecepcionistArgs<ExtArgs>
    _count?: boolean | PatientCountOutputTypeArgs<ExtArgs>
  }, ExtArgs["result"]["patient"]>

  export type PatientSelectScalar = {
    id?: boolean
    name?: boolean
    birthdate?: boolean
    gender?: boolean
    cpf?: boolean
    rg?: boolean
    mother?: boolean
    father?: boolean
    email?: boolean
    phone?: boolean
    createdAt?: boolean
    addressId?: boolean
  }

  export type PatientInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    Administrator?: boolean | Patient$AdministratorArgs<ExtArgs>
    Appointment?: boolean | Patient$AppointmentArgs<ExtArgs>
    Doctor?: boolean | Patient$DoctorArgs<ExtArgs>
    MedicalRecord?: boolean | Patient$MedicalRecordArgs<ExtArgs>
    Address?: boolean | AddressArgs<ExtArgs>
    Recepcionist?: boolean | Patient$RecepcionistArgs<ExtArgs>
    _count?: boolean | PatientCountOutputTypeArgs<ExtArgs>
  }


  type PatientGetPayload<S extends boolean | null | undefined | PatientArgs> = $Types.GetResult<PatientPayload, S>

  type PatientCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<PatientFindManyArgs, 'select' | 'include'> & {
      select?: PatientCountAggregateInputType | true
    }

  export interface PatientDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Patient'], meta: { name: 'Patient' } }
    /**
     * Find zero or one Patient that matches the filter.
     * @param {PatientFindUniqueArgs} args - Arguments to find a Patient
     * @example
     * // Get one Patient
     * const patient = await prisma.patient.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PatientFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, PatientFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Patient'> extends True ? Prisma__PatientClient<$Types.GetResult<PatientPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__PatientClient<$Types.GetResult<PatientPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one Patient that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {PatientFindUniqueOrThrowArgs} args - Arguments to find a Patient
     * @example
     * // Get one Patient
     * const patient = await prisma.patient.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends PatientFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PatientFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__PatientClient<$Types.GetResult<PatientPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first Patient that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientFindFirstArgs} args - Arguments to find a Patient
     * @example
     * // Get one Patient
     * const patient = await prisma.patient.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PatientFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, PatientFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Patient'> extends True ? Prisma__PatientClient<$Types.GetResult<PatientPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__PatientClient<$Types.GetResult<PatientPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first Patient that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientFindFirstOrThrowArgs} args - Arguments to find a Patient
     * @example
     * // Get one Patient
     * const patient = await prisma.patient.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends PatientFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PatientFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__PatientClient<$Types.GetResult<PatientPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more Patients that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Patients
     * const patients = await prisma.patient.findMany()
     * 
     * // Get first 10 Patients
     * const patients = await prisma.patient.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const patientWithIdOnly = await prisma.patient.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends PatientFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PatientFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<PatientPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a Patient.
     * @param {PatientCreateArgs} args - Arguments to create a Patient.
     * @example
     * // Create one Patient
     * const Patient = await prisma.patient.create({
     *   data: {
     *     // ... data to create a Patient
     *   }
     * })
     * 
    **/
    create<T extends PatientCreateArgs<ExtArgs>>(
      args: SelectSubset<T, PatientCreateArgs<ExtArgs>>
    ): Prisma__PatientClient<$Types.GetResult<PatientPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many Patients.
     *     @param {PatientCreateManyArgs} args - Arguments to create many Patients.
     *     @example
     *     // Create many Patients
     *     const patient = await prisma.patient.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends PatientCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PatientCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Patient.
     * @param {PatientDeleteArgs} args - Arguments to delete one Patient.
     * @example
     * // Delete one Patient
     * const Patient = await prisma.patient.delete({
     *   where: {
     *     // ... filter to delete one Patient
     *   }
     * })
     * 
    **/
    delete<T extends PatientDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, PatientDeleteArgs<ExtArgs>>
    ): Prisma__PatientClient<$Types.GetResult<PatientPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one Patient.
     * @param {PatientUpdateArgs} args - Arguments to update one Patient.
     * @example
     * // Update one Patient
     * const patient = await prisma.patient.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PatientUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, PatientUpdateArgs<ExtArgs>>
    ): Prisma__PatientClient<$Types.GetResult<PatientPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more Patients.
     * @param {PatientDeleteManyArgs} args - Arguments to filter Patients to delete.
     * @example
     * // Delete a few Patients
     * const { count } = await prisma.patient.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PatientDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PatientDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Patients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Patients
     * const patient = await prisma.patient.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PatientUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, PatientUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Patient.
     * @param {PatientUpsertArgs} args - Arguments to update or create a Patient.
     * @example
     * // Update or create a Patient
     * const patient = await prisma.patient.upsert({
     *   create: {
     *     // ... data to create a Patient
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Patient we want to update
     *   }
     * })
    **/
    upsert<T extends PatientUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, PatientUpsertArgs<ExtArgs>>
    ): Prisma__PatientClient<$Types.GetResult<PatientPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of Patients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientCountArgs} args - Arguments to filter Patients to count.
     * @example
     * // Count the number of Patients
     * const count = await prisma.patient.count({
     *   where: {
     *     // ... the filter for the Patients we want to count
     *   }
     * })
    **/
    count<T extends PatientCountArgs>(
      args?: Subset<T, PatientCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PatientCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Patient.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PatientAggregateArgs>(args: Subset<T, PatientAggregateArgs>): Prisma.PrismaPromise<GetPatientAggregateType<T>>

    /**
     * Group by Patient.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PatientGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PatientGroupByArgs['orderBy'] }
        : { orderBy?: PatientGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PatientGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPatientGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Patient.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__PatientClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    Administrator<T extends Patient$AdministratorArgs<ExtArgs> = {}>(args?: Subset<T, Patient$AdministratorArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<AdministratorPayload<ExtArgs>, T, 'findMany', never>| Null>;

    Appointment<T extends Patient$AppointmentArgs<ExtArgs> = {}>(args?: Subset<T, Patient$AppointmentArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<AppointmentPayload<ExtArgs>, T, 'findMany', never>| Null>;

    Doctor<T extends Patient$DoctorArgs<ExtArgs> = {}>(args?: Subset<T, Patient$DoctorArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<DoctorPayload<ExtArgs>, T, 'findMany', never>| Null>;

    MedicalRecord<T extends Patient$MedicalRecordArgs<ExtArgs> = {}>(args?: Subset<T, Patient$MedicalRecordArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<MedicalRecordPayload<ExtArgs>, T, 'findMany', never>| Null>;

    Address<T extends AddressArgs<ExtArgs> = {}>(args?: Subset<T, AddressArgs<ExtArgs>>): Prisma__AddressClient<$Types.GetResult<AddressPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    Recepcionist<T extends Patient$RecepcionistArgs<ExtArgs> = {}>(args?: Subset<T, Patient$RecepcionistArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<RecepcionistPayload<ExtArgs>, T, 'findMany', never>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Patient base type for findUnique actions
   */
  export type PatientFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PatientInclude<ExtArgs> | null
    /**
     * Filter, which Patient to fetch.
     */
    where: PatientWhereUniqueInput
  }

  /**
   * Patient findUnique
   */
  export interface PatientFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends PatientFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Patient findUniqueOrThrow
   */
  export type PatientFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PatientInclude<ExtArgs> | null
    /**
     * Filter, which Patient to fetch.
     */
    where: PatientWhereUniqueInput
  }


  /**
   * Patient base type for findFirst actions
   */
  export type PatientFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PatientInclude<ExtArgs> | null
    /**
     * Filter, which Patient to fetch.
     */
    where?: PatientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Patients to fetch.
     */
    orderBy?: Enumerable<PatientOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Patients.
     */
    cursor?: PatientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Patients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Patients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Patients.
     */
    distinct?: Enumerable<PatientScalarFieldEnum>
  }

  /**
   * Patient findFirst
   */
  export interface PatientFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends PatientFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Patient findFirstOrThrow
   */
  export type PatientFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PatientInclude<ExtArgs> | null
    /**
     * Filter, which Patient to fetch.
     */
    where?: PatientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Patients to fetch.
     */
    orderBy?: Enumerable<PatientOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Patients.
     */
    cursor?: PatientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Patients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Patients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Patients.
     */
    distinct?: Enumerable<PatientScalarFieldEnum>
  }


  /**
   * Patient findMany
   */
  export type PatientFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PatientInclude<ExtArgs> | null
    /**
     * Filter, which Patients to fetch.
     */
    where?: PatientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Patients to fetch.
     */
    orderBy?: Enumerable<PatientOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Patients.
     */
    cursor?: PatientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Patients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Patients.
     */
    skip?: number
    distinct?: Enumerable<PatientScalarFieldEnum>
  }


  /**
   * Patient create
   */
  export type PatientCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PatientInclude<ExtArgs> | null
    /**
     * The data needed to create a Patient.
     */
    data: XOR<PatientCreateInput, PatientUncheckedCreateInput>
  }


  /**
   * Patient createMany
   */
  export type PatientCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Patients.
     */
    data: Enumerable<PatientCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Patient update
   */
  export type PatientUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PatientInclude<ExtArgs> | null
    /**
     * The data needed to update a Patient.
     */
    data: XOR<PatientUpdateInput, PatientUncheckedUpdateInput>
    /**
     * Choose, which Patient to update.
     */
    where: PatientWhereUniqueInput
  }


  /**
   * Patient updateMany
   */
  export type PatientUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Patients.
     */
    data: XOR<PatientUpdateManyMutationInput, PatientUncheckedUpdateManyInput>
    /**
     * Filter which Patients to update
     */
    where?: PatientWhereInput
  }


  /**
   * Patient upsert
   */
  export type PatientUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PatientInclude<ExtArgs> | null
    /**
     * The filter to search for the Patient to update in case it exists.
     */
    where: PatientWhereUniqueInput
    /**
     * In case the Patient found by the `where` argument doesn't exist, create a new Patient with this data.
     */
    create: XOR<PatientCreateInput, PatientUncheckedCreateInput>
    /**
     * In case the Patient was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PatientUpdateInput, PatientUncheckedUpdateInput>
  }


  /**
   * Patient delete
   */
  export type PatientDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PatientInclude<ExtArgs> | null
    /**
     * Filter which Patient to delete.
     */
    where: PatientWhereUniqueInput
  }


  /**
   * Patient deleteMany
   */
  export type PatientDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Patients to delete
     */
    where?: PatientWhereInput
  }


  /**
   * Patient.Administrator
   */
  export type Patient$AdministratorArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Administrator
     */
    select?: AdministratorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AdministratorInclude<ExtArgs> | null
    where?: AdministratorWhereInput
    orderBy?: Enumerable<AdministratorOrderByWithRelationInput>
    cursor?: AdministratorWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<AdministratorScalarFieldEnum>
  }


  /**
   * Patient.Appointment
   */
  export type Patient$AppointmentArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AppointmentInclude<ExtArgs> | null
    where?: AppointmentWhereInput
    orderBy?: Enumerable<AppointmentOrderByWithRelationInput>
    cursor?: AppointmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<AppointmentScalarFieldEnum>
  }


  /**
   * Patient.Doctor
   */
  export type Patient$DoctorArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Doctor
     */
    select?: DoctorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DoctorInclude<ExtArgs> | null
    where?: DoctorWhereInput
    orderBy?: Enumerable<DoctorOrderByWithRelationInput>
    cursor?: DoctorWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<DoctorScalarFieldEnum>
  }


  /**
   * Patient.MedicalRecord
   */
  export type Patient$MedicalRecordArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicalRecord
     */
    select?: MedicalRecordSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: MedicalRecordInclude<ExtArgs> | null
    where?: MedicalRecordWhereInput
    orderBy?: Enumerable<MedicalRecordOrderByWithRelationInput>
    cursor?: MedicalRecordWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<MedicalRecordScalarFieldEnum>
  }


  /**
   * Patient.Recepcionist
   */
  export type Patient$RecepcionistArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recepcionist
     */
    select?: RecepcionistSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RecepcionistInclude<ExtArgs> | null
    where?: RecepcionistWhereInput
    orderBy?: Enumerable<RecepcionistOrderByWithRelationInput>
    cursor?: RecepcionistWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<RecepcionistScalarFieldEnum>
  }


  /**
   * Patient without action
   */
  export type PatientArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PatientInclude<ExtArgs> | null
  }



  /**
   * Model Recepcionist
   */


  export type AggregateRecepcionist = {
    _count: RecepcionistCountAggregateOutputType | null
    _avg: RecepcionistAvgAggregateOutputType | null
    _sum: RecepcionistSumAggregateOutputType | null
    _min: RecepcionistMinAggregateOutputType | null
    _max: RecepcionistMaxAggregateOutputType | null
  }

  export type RecepcionistAvgAggregateOutputType = {
    id: number | null
    patientId: number | null
    roleId: number | null
  }

  export type RecepcionistSumAggregateOutputType = {
    id: number | null
    patientId: number | null
    roleId: number | null
  }

  export type RecepcionistMinAggregateOutputType = {
    id: number | null
    patientId: number | null
    password: string | null
    roleId: number | null
  }

  export type RecepcionistMaxAggregateOutputType = {
    id: number | null
    patientId: number | null
    password: string | null
    roleId: number | null
  }

  export type RecepcionistCountAggregateOutputType = {
    id: number
    patientId: number
    password: number
    roleId: number
    _all: number
  }


  export type RecepcionistAvgAggregateInputType = {
    id?: true
    patientId?: true
    roleId?: true
  }

  export type RecepcionistSumAggregateInputType = {
    id?: true
    patientId?: true
    roleId?: true
  }

  export type RecepcionistMinAggregateInputType = {
    id?: true
    patientId?: true
    password?: true
    roleId?: true
  }

  export type RecepcionistMaxAggregateInputType = {
    id?: true
    patientId?: true
    password?: true
    roleId?: true
  }

  export type RecepcionistCountAggregateInputType = {
    id?: true
    patientId?: true
    password?: true
    roleId?: true
    _all?: true
  }

  export type RecepcionistAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Recepcionist to aggregate.
     */
    where?: RecepcionistWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Recepcionists to fetch.
     */
    orderBy?: Enumerable<RecepcionistOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RecepcionistWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Recepcionists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Recepcionists.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Recepcionists
    **/
    _count?: true | RecepcionistCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RecepcionistAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RecepcionistSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RecepcionistMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RecepcionistMaxAggregateInputType
  }

  export type GetRecepcionistAggregateType<T extends RecepcionistAggregateArgs> = {
        [P in keyof T & keyof AggregateRecepcionist]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRecepcionist[P]>
      : GetScalarType<T[P], AggregateRecepcionist[P]>
  }




  export type RecepcionistGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: RecepcionistWhereInput
    orderBy?: Enumerable<RecepcionistOrderByWithAggregationInput>
    by: RecepcionistScalarFieldEnum[]
    having?: RecepcionistScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RecepcionistCountAggregateInputType | true
    _avg?: RecepcionistAvgAggregateInputType
    _sum?: RecepcionistSumAggregateInputType
    _min?: RecepcionistMinAggregateInputType
    _max?: RecepcionistMaxAggregateInputType
  }


  export type RecepcionistGroupByOutputType = {
    id: number
    patientId: number
    password: string
    roleId: number
    _count: RecepcionistCountAggregateOutputType | null
    _avg: RecepcionistAvgAggregateOutputType | null
    _sum: RecepcionistSumAggregateOutputType | null
    _min: RecepcionistMinAggregateOutputType | null
    _max: RecepcionistMaxAggregateOutputType | null
  }

  type GetRecepcionistGroupByPayload<T extends RecepcionistGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<RecepcionistGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RecepcionistGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RecepcionistGroupByOutputType[P]>
            : GetScalarType<T[P], RecepcionistGroupByOutputType[P]>
        }
      >
    >


  export type RecepcionistSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    patientId?: boolean
    password?: boolean
    roleId?: boolean
    Appointment?: boolean | Recepcionist$AppointmentArgs<ExtArgs>
    Patient?: boolean | PatientArgs<ExtArgs>
    Role?: boolean | RoleArgs<ExtArgs>
    _count?: boolean | RecepcionistCountOutputTypeArgs<ExtArgs>
  }, ExtArgs["result"]["recepcionist"]>

  export type RecepcionistSelectScalar = {
    id?: boolean
    patientId?: boolean
    password?: boolean
    roleId?: boolean
  }

  export type RecepcionistInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    Appointment?: boolean | Recepcionist$AppointmentArgs<ExtArgs>
    Patient?: boolean | PatientArgs<ExtArgs>
    Role?: boolean | RoleArgs<ExtArgs>
    _count?: boolean | RecepcionistCountOutputTypeArgs<ExtArgs>
  }


  type RecepcionistGetPayload<S extends boolean | null | undefined | RecepcionistArgs> = $Types.GetResult<RecepcionistPayload, S>

  type RecepcionistCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<RecepcionistFindManyArgs, 'select' | 'include'> & {
      select?: RecepcionistCountAggregateInputType | true
    }

  export interface RecepcionistDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Recepcionist'], meta: { name: 'Recepcionist' } }
    /**
     * Find zero or one Recepcionist that matches the filter.
     * @param {RecepcionistFindUniqueArgs} args - Arguments to find a Recepcionist
     * @example
     * // Get one Recepcionist
     * const recepcionist = await prisma.recepcionist.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends RecepcionistFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, RecepcionistFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Recepcionist'> extends True ? Prisma__RecepcionistClient<$Types.GetResult<RecepcionistPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__RecepcionistClient<$Types.GetResult<RecepcionistPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one Recepcionist that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {RecepcionistFindUniqueOrThrowArgs} args - Arguments to find a Recepcionist
     * @example
     * // Get one Recepcionist
     * const recepcionist = await prisma.recepcionist.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends RecepcionistFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, RecepcionistFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__RecepcionistClient<$Types.GetResult<RecepcionistPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first Recepcionist that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecepcionistFindFirstArgs} args - Arguments to find a Recepcionist
     * @example
     * // Get one Recepcionist
     * const recepcionist = await prisma.recepcionist.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends RecepcionistFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, RecepcionistFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Recepcionist'> extends True ? Prisma__RecepcionistClient<$Types.GetResult<RecepcionistPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__RecepcionistClient<$Types.GetResult<RecepcionistPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first Recepcionist that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecepcionistFindFirstOrThrowArgs} args - Arguments to find a Recepcionist
     * @example
     * // Get one Recepcionist
     * const recepcionist = await prisma.recepcionist.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends RecepcionistFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, RecepcionistFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__RecepcionistClient<$Types.GetResult<RecepcionistPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more Recepcionists that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecepcionistFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Recepcionists
     * const recepcionists = await prisma.recepcionist.findMany()
     * 
     * // Get first 10 Recepcionists
     * const recepcionists = await prisma.recepcionist.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const recepcionistWithIdOnly = await prisma.recepcionist.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends RecepcionistFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, RecepcionistFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<RecepcionistPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a Recepcionist.
     * @param {RecepcionistCreateArgs} args - Arguments to create a Recepcionist.
     * @example
     * // Create one Recepcionist
     * const Recepcionist = await prisma.recepcionist.create({
     *   data: {
     *     // ... data to create a Recepcionist
     *   }
     * })
     * 
    **/
    create<T extends RecepcionistCreateArgs<ExtArgs>>(
      args: SelectSubset<T, RecepcionistCreateArgs<ExtArgs>>
    ): Prisma__RecepcionistClient<$Types.GetResult<RecepcionistPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many Recepcionists.
     *     @param {RecepcionistCreateManyArgs} args - Arguments to create many Recepcionists.
     *     @example
     *     // Create many Recepcionists
     *     const recepcionist = await prisma.recepcionist.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends RecepcionistCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, RecepcionistCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Recepcionist.
     * @param {RecepcionistDeleteArgs} args - Arguments to delete one Recepcionist.
     * @example
     * // Delete one Recepcionist
     * const Recepcionist = await prisma.recepcionist.delete({
     *   where: {
     *     // ... filter to delete one Recepcionist
     *   }
     * })
     * 
    **/
    delete<T extends RecepcionistDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, RecepcionistDeleteArgs<ExtArgs>>
    ): Prisma__RecepcionistClient<$Types.GetResult<RecepcionistPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one Recepcionist.
     * @param {RecepcionistUpdateArgs} args - Arguments to update one Recepcionist.
     * @example
     * // Update one Recepcionist
     * const recepcionist = await prisma.recepcionist.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends RecepcionistUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, RecepcionistUpdateArgs<ExtArgs>>
    ): Prisma__RecepcionistClient<$Types.GetResult<RecepcionistPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more Recepcionists.
     * @param {RecepcionistDeleteManyArgs} args - Arguments to filter Recepcionists to delete.
     * @example
     * // Delete a few Recepcionists
     * const { count } = await prisma.recepcionist.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends RecepcionistDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, RecepcionistDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Recepcionists.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecepcionistUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Recepcionists
     * const recepcionist = await prisma.recepcionist.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends RecepcionistUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, RecepcionistUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Recepcionist.
     * @param {RecepcionistUpsertArgs} args - Arguments to update or create a Recepcionist.
     * @example
     * // Update or create a Recepcionist
     * const recepcionist = await prisma.recepcionist.upsert({
     *   create: {
     *     // ... data to create a Recepcionist
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Recepcionist we want to update
     *   }
     * })
    **/
    upsert<T extends RecepcionistUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, RecepcionistUpsertArgs<ExtArgs>>
    ): Prisma__RecepcionistClient<$Types.GetResult<RecepcionistPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of Recepcionists.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecepcionistCountArgs} args - Arguments to filter Recepcionists to count.
     * @example
     * // Count the number of Recepcionists
     * const count = await prisma.recepcionist.count({
     *   where: {
     *     // ... the filter for the Recepcionists we want to count
     *   }
     * })
    **/
    count<T extends RecepcionistCountArgs>(
      args?: Subset<T, RecepcionistCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RecepcionistCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Recepcionist.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecepcionistAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RecepcionistAggregateArgs>(args: Subset<T, RecepcionistAggregateArgs>): Prisma.PrismaPromise<GetRecepcionistAggregateType<T>>

    /**
     * Group by Recepcionist.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecepcionistGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RecepcionistGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RecepcionistGroupByArgs['orderBy'] }
        : { orderBy?: RecepcionistGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RecepcionistGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRecepcionistGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Recepcionist.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__RecepcionistClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    Appointment<T extends Recepcionist$AppointmentArgs<ExtArgs> = {}>(args?: Subset<T, Recepcionist$AppointmentArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<AppointmentPayload<ExtArgs>, T, 'findMany', never>| Null>;

    Patient<T extends PatientArgs<ExtArgs> = {}>(args?: Subset<T, PatientArgs<ExtArgs>>): Prisma__PatientClient<$Types.GetResult<PatientPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    Role<T extends RoleArgs<ExtArgs> = {}>(args?: Subset<T, RoleArgs<ExtArgs>>): Prisma__RoleClient<$Types.GetResult<RolePayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Recepcionist base type for findUnique actions
   */
  export type RecepcionistFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recepcionist
     */
    select?: RecepcionistSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RecepcionistInclude<ExtArgs> | null
    /**
     * Filter, which Recepcionist to fetch.
     */
    where: RecepcionistWhereUniqueInput
  }

  /**
   * Recepcionist findUnique
   */
  export interface RecepcionistFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends RecepcionistFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Recepcionist findUniqueOrThrow
   */
  export type RecepcionistFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recepcionist
     */
    select?: RecepcionistSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RecepcionistInclude<ExtArgs> | null
    /**
     * Filter, which Recepcionist to fetch.
     */
    where: RecepcionistWhereUniqueInput
  }


  /**
   * Recepcionist base type for findFirst actions
   */
  export type RecepcionistFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recepcionist
     */
    select?: RecepcionistSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RecepcionistInclude<ExtArgs> | null
    /**
     * Filter, which Recepcionist to fetch.
     */
    where?: RecepcionistWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Recepcionists to fetch.
     */
    orderBy?: Enumerable<RecepcionistOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Recepcionists.
     */
    cursor?: RecepcionistWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Recepcionists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Recepcionists.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Recepcionists.
     */
    distinct?: Enumerable<RecepcionistScalarFieldEnum>
  }

  /**
   * Recepcionist findFirst
   */
  export interface RecepcionistFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends RecepcionistFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Recepcionist findFirstOrThrow
   */
  export type RecepcionistFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recepcionist
     */
    select?: RecepcionistSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RecepcionistInclude<ExtArgs> | null
    /**
     * Filter, which Recepcionist to fetch.
     */
    where?: RecepcionistWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Recepcionists to fetch.
     */
    orderBy?: Enumerable<RecepcionistOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Recepcionists.
     */
    cursor?: RecepcionistWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Recepcionists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Recepcionists.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Recepcionists.
     */
    distinct?: Enumerable<RecepcionistScalarFieldEnum>
  }


  /**
   * Recepcionist findMany
   */
  export type RecepcionistFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recepcionist
     */
    select?: RecepcionistSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RecepcionistInclude<ExtArgs> | null
    /**
     * Filter, which Recepcionists to fetch.
     */
    where?: RecepcionistWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Recepcionists to fetch.
     */
    orderBy?: Enumerable<RecepcionistOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Recepcionists.
     */
    cursor?: RecepcionistWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Recepcionists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Recepcionists.
     */
    skip?: number
    distinct?: Enumerable<RecepcionistScalarFieldEnum>
  }


  /**
   * Recepcionist create
   */
  export type RecepcionistCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recepcionist
     */
    select?: RecepcionistSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RecepcionistInclude<ExtArgs> | null
    /**
     * The data needed to create a Recepcionist.
     */
    data: XOR<RecepcionistCreateInput, RecepcionistUncheckedCreateInput>
  }


  /**
   * Recepcionist createMany
   */
  export type RecepcionistCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Recepcionists.
     */
    data: Enumerable<RecepcionistCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Recepcionist update
   */
  export type RecepcionistUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recepcionist
     */
    select?: RecepcionistSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RecepcionistInclude<ExtArgs> | null
    /**
     * The data needed to update a Recepcionist.
     */
    data: XOR<RecepcionistUpdateInput, RecepcionistUncheckedUpdateInput>
    /**
     * Choose, which Recepcionist to update.
     */
    where: RecepcionistWhereUniqueInput
  }


  /**
   * Recepcionist updateMany
   */
  export type RecepcionistUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Recepcionists.
     */
    data: XOR<RecepcionistUpdateManyMutationInput, RecepcionistUncheckedUpdateManyInput>
    /**
     * Filter which Recepcionists to update
     */
    where?: RecepcionistWhereInput
  }


  /**
   * Recepcionist upsert
   */
  export type RecepcionistUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recepcionist
     */
    select?: RecepcionistSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RecepcionistInclude<ExtArgs> | null
    /**
     * The filter to search for the Recepcionist to update in case it exists.
     */
    where: RecepcionistWhereUniqueInput
    /**
     * In case the Recepcionist found by the `where` argument doesn't exist, create a new Recepcionist with this data.
     */
    create: XOR<RecepcionistCreateInput, RecepcionistUncheckedCreateInput>
    /**
     * In case the Recepcionist was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RecepcionistUpdateInput, RecepcionistUncheckedUpdateInput>
  }


  /**
   * Recepcionist delete
   */
  export type RecepcionistDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recepcionist
     */
    select?: RecepcionistSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RecepcionistInclude<ExtArgs> | null
    /**
     * Filter which Recepcionist to delete.
     */
    where: RecepcionistWhereUniqueInput
  }


  /**
   * Recepcionist deleteMany
   */
  export type RecepcionistDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Recepcionists to delete
     */
    where?: RecepcionistWhereInput
  }


  /**
   * Recepcionist.Appointment
   */
  export type Recepcionist$AppointmentArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Appointment
     */
    select?: AppointmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AppointmentInclude<ExtArgs> | null
    where?: AppointmentWhereInput
    orderBy?: Enumerable<AppointmentOrderByWithRelationInput>
    cursor?: AppointmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<AppointmentScalarFieldEnum>
  }


  /**
   * Recepcionist without action
   */
  export type RecepcionistArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recepcionist
     */
    select?: RecepcionistSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RecepcionistInclude<ExtArgs> | null
  }



  /**
   * Model Role
   */


  export type AggregateRole = {
    _count: RoleCountAggregateOutputType | null
    _avg: RoleAvgAggregateOutputType | null
    _sum: RoleSumAggregateOutputType | null
    _min: RoleMinAggregateOutputType | null
    _max: RoleMaxAggregateOutputType | null
  }

  export type RoleAvgAggregateOutputType = {
    id: number | null
    accessLevel: number | null
  }

  export type RoleSumAggregateOutputType = {
    id: number | null
    accessLevel: number | null
  }

  export type RoleMinAggregateOutputType = {
    id: number | null
    name: string | null
    accessLevel: number | null
  }

  export type RoleMaxAggregateOutputType = {
    id: number | null
    name: string | null
    accessLevel: number | null
  }

  export type RoleCountAggregateOutputType = {
    id: number
    name: number
    accessLevel: number
    _all: number
  }


  export type RoleAvgAggregateInputType = {
    id?: true
    accessLevel?: true
  }

  export type RoleSumAggregateInputType = {
    id?: true
    accessLevel?: true
  }

  export type RoleMinAggregateInputType = {
    id?: true
    name?: true
    accessLevel?: true
  }

  export type RoleMaxAggregateInputType = {
    id?: true
    name?: true
    accessLevel?: true
  }

  export type RoleCountAggregateInputType = {
    id?: true
    name?: true
    accessLevel?: true
    _all?: true
  }

  export type RoleAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Role to aggregate.
     */
    where?: RoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Roles to fetch.
     */
    orderBy?: Enumerable<RoleOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Roles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Roles
    **/
    _count?: true | RoleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RoleAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RoleSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RoleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RoleMaxAggregateInputType
  }

  export type GetRoleAggregateType<T extends RoleAggregateArgs> = {
        [P in keyof T & keyof AggregateRole]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRole[P]>
      : GetScalarType<T[P], AggregateRole[P]>
  }




  export type RoleGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: RoleWhereInput
    orderBy?: Enumerable<RoleOrderByWithAggregationInput>
    by: RoleScalarFieldEnum[]
    having?: RoleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RoleCountAggregateInputType | true
    _avg?: RoleAvgAggregateInputType
    _sum?: RoleSumAggregateInputType
    _min?: RoleMinAggregateInputType
    _max?: RoleMaxAggregateInputType
  }


  export type RoleGroupByOutputType = {
    id: number
    name: string
    accessLevel: number
    _count: RoleCountAggregateOutputType | null
    _avg: RoleAvgAggregateOutputType | null
    _sum: RoleSumAggregateOutputType | null
    _min: RoleMinAggregateOutputType | null
    _max: RoleMaxAggregateOutputType | null
  }

  type GetRoleGroupByPayload<T extends RoleGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<RoleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RoleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RoleGroupByOutputType[P]>
            : GetScalarType<T[P], RoleGroupByOutputType[P]>
        }
      >
    >


  export type RoleSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    accessLevel?: boolean
    Administrator?: boolean | Role$AdministratorArgs<ExtArgs>
    Doctor?: boolean | Role$DoctorArgs<ExtArgs>
    Recepcionist?: boolean | Role$RecepcionistArgs<ExtArgs>
    _count?: boolean | RoleCountOutputTypeArgs<ExtArgs>
  }, ExtArgs["result"]["role"]>

  export type RoleSelectScalar = {
    id?: boolean
    name?: boolean
    accessLevel?: boolean
  }

  export type RoleInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    Administrator?: boolean | Role$AdministratorArgs<ExtArgs>
    Doctor?: boolean | Role$DoctorArgs<ExtArgs>
    Recepcionist?: boolean | Role$RecepcionistArgs<ExtArgs>
    _count?: boolean | RoleCountOutputTypeArgs<ExtArgs>
  }


  type RoleGetPayload<S extends boolean | null | undefined | RoleArgs> = $Types.GetResult<RolePayload, S>

  type RoleCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<RoleFindManyArgs, 'select' | 'include'> & {
      select?: RoleCountAggregateInputType | true
    }

  export interface RoleDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Role'], meta: { name: 'Role' } }
    /**
     * Find zero or one Role that matches the filter.
     * @param {RoleFindUniqueArgs} args - Arguments to find a Role
     * @example
     * // Get one Role
     * const role = await prisma.role.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends RoleFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, RoleFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Role'> extends True ? Prisma__RoleClient<$Types.GetResult<RolePayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__RoleClient<$Types.GetResult<RolePayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one Role that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {RoleFindUniqueOrThrowArgs} args - Arguments to find a Role
     * @example
     * // Get one Role
     * const role = await prisma.role.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends RoleFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, RoleFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__RoleClient<$Types.GetResult<RolePayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first Role that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleFindFirstArgs} args - Arguments to find a Role
     * @example
     * // Get one Role
     * const role = await prisma.role.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends RoleFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, RoleFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Role'> extends True ? Prisma__RoleClient<$Types.GetResult<RolePayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__RoleClient<$Types.GetResult<RolePayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first Role that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleFindFirstOrThrowArgs} args - Arguments to find a Role
     * @example
     * // Get one Role
     * const role = await prisma.role.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends RoleFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, RoleFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__RoleClient<$Types.GetResult<RolePayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more Roles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Roles
     * const roles = await prisma.role.findMany()
     * 
     * // Get first 10 Roles
     * const roles = await prisma.role.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const roleWithIdOnly = await prisma.role.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends RoleFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, RoleFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<RolePayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a Role.
     * @param {RoleCreateArgs} args - Arguments to create a Role.
     * @example
     * // Create one Role
     * const Role = await prisma.role.create({
     *   data: {
     *     // ... data to create a Role
     *   }
     * })
     * 
    **/
    create<T extends RoleCreateArgs<ExtArgs>>(
      args: SelectSubset<T, RoleCreateArgs<ExtArgs>>
    ): Prisma__RoleClient<$Types.GetResult<RolePayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many Roles.
     *     @param {RoleCreateManyArgs} args - Arguments to create many Roles.
     *     @example
     *     // Create many Roles
     *     const role = await prisma.role.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends RoleCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, RoleCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Role.
     * @param {RoleDeleteArgs} args - Arguments to delete one Role.
     * @example
     * // Delete one Role
     * const Role = await prisma.role.delete({
     *   where: {
     *     // ... filter to delete one Role
     *   }
     * })
     * 
    **/
    delete<T extends RoleDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, RoleDeleteArgs<ExtArgs>>
    ): Prisma__RoleClient<$Types.GetResult<RolePayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one Role.
     * @param {RoleUpdateArgs} args - Arguments to update one Role.
     * @example
     * // Update one Role
     * const role = await prisma.role.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends RoleUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, RoleUpdateArgs<ExtArgs>>
    ): Prisma__RoleClient<$Types.GetResult<RolePayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more Roles.
     * @param {RoleDeleteManyArgs} args - Arguments to filter Roles to delete.
     * @example
     * // Delete a few Roles
     * const { count } = await prisma.role.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends RoleDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, RoleDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Roles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Roles
     * const role = await prisma.role.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends RoleUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, RoleUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Role.
     * @param {RoleUpsertArgs} args - Arguments to update or create a Role.
     * @example
     * // Update or create a Role
     * const role = await prisma.role.upsert({
     *   create: {
     *     // ... data to create a Role
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Role we want to update
     *   }
     * })
    **/
    upsert<T extends RoleUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, RoleUpsertArgs<ExtArgs>>
    ): Prisma__RoleClient<$Types.GetResult<RolePayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of Roles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleCountArgs} args - Arguments to filter Roles to count.
     * @example
     * // Count the number of Roles
     * const count = await prisma.role.count({
     *   where: {
     *     // ... the filter for the Roles we want to count
     *   }
     * })
    **/
    count<T extends RoleCountArgs>(
      args?: Subset<T, RoleCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RoleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Role.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RoleAggregateArgs>(args: Subset<T, RoleAggregateArgs>): Prisma.PrismaPromise<GetRoleAggregateType<T>>

    /**
     * Group by Role.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RoleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RoleGroupByArgs['orderBy'] }
        : { orderBy?: RoleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RoleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRoleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Role.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__RoleClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    Administrator<T extends Role$AdministratorArgs<ExtArgs> = {}>(args?: Subset<T, Role$AdministratorArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<AdministratorPayload<ExtArgs>, T, 'findMany', never>| Null>;

    Doctor<T extends Role$DoctorArgs<ExtArgs> = {}>(args?: Subset<T, Role$DoctorArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<DoctorPayload<ExtArgs>, T, 'findMany', never>| Null>;

    Recepcionist<T extends Role$RecepcionistArgs<ExtArgs> = {}>(args?: Subset<T, Role$RecepcionistArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<RecepcionistPayload<ExtArgs>, T, 'findMany', never>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Role base type for findUnique actions
   */
  export type RoleFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * Filter, which Role to fetch.
     */
    where: RoleWhereUniqueInput
  }

  /**
   * Role findUnique
   */
  export interface RoleFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends RoleFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Role findUniqueOrThrow
   */
  export type RoleFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * Filter, which Role to fetch.
     */
    where: RoleWhereUniqueInput
  }


  /**
   * Role base type for findFirst actions
   */
  export type RoleFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * Filter, which Role to fetch.
     */
    where?: RoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Roles to fetch.
     */
    orderBy?: Enumerable<RoleOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Roles.
     */
    cursor?: RoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Roles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Roles.
     */
    distinct?: Enumerable<RoleScalarFieldEnum>
  }

  /**
   * Role findFirst
   */
  export interface RoleFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends RoleFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Role findFirstOrThrow
   */
  export type RoleFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * Filter, which Role to fetch.
     */
    where?: RoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Roles to fetch.
     */
    orderBy?: Enumerable<RoleOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Roles.
     */
    cursor?: RoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Roles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Roles.
     */
    distinct?: Enumerable<RoleScalarFieldEnum>
  }


  /**
   * Role findMany
   */
  export type RoleFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * Filter, which Roles to fetch.
     */
    where?: RoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Roles to fetch.
     */
    orderBy?: Enumerable<RoleOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Roles.
     */
    cursor?: RoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Roles.
     */
    skip?: number
    distinct?: Enumerable<RoleScalarFieldEnum>
  }


  /**
   * Role create
   */
  export type RoleCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * The data needed to create a Role.
     */
    data: XOR<RoleCreateInput, RoleUncheckedCreateInput>
  }


  /**
   * Role createMany
   */
  export type RoleCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Roles.
     */
    data: Enumerable<RoleCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Role update
   */
  export type RoleUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * The data needed to update a Role.
     */
    data: XOR<RoleUpdateInput, RoleUncheckedUpdateInput>
    /**
     * Choose, which Role to update.
     */
    where: RoleWhereUniqueInput
  }


  /**
   * Role updateMany
   */
  export type RoleUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Roles.
     */
    data: XOR<RoleUpdateManyMutationInput, RoleUncheckedUpdateManyInput>
    /**
     * Filter which Roles to update
     */
    where?: RoleWhereInput
  }


  /**
   * Role upsert
   */
  export type RoleUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * The filter to search for the Role to update in case it exists.
     */
    where: RoleWhereUniqueInput
    /**
     * In case the Role found by the `where` argument doesn't exist, create a new Role with this data.
     */
    create: XOR<RoleCreateInput, RoleUncheckedCreateInput>
    /**
     * In case the Role was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RoleUpdateInput, RoleUncheckedUpdateInput>
  }


  /**
   * Role delete
   */
  export type RoleDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * Filter which Role to delete.
     */
    where: RoleWhereUniqueInput
  }


  /**
   * Role deleteMany
   */
  export type RoleDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Roles to delete
     */
    where?: RoleWhereInput
  }


  /**
   * Role.Administrator
   */
  export type Role$AdministratorArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Administrator
     */
    select?: AdministratorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AdministratorInclude<ExtArgs> | null
    where?: AdministratorWhereInput
    orderBy?: Enumerable<AdministratorOrderByWithRelationInput>
    cursor?: AdministratorWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<AdministratorScalarFieldEnum>
  }


  /**
   * Role.Doctor
   */
  export type Role$DoctorArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Doctor
     */
    select?: DoctorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: DoctorInclude<ExtArgs> | null
    where?: DoctorWhereInput
    orderBy?: Enumerable<DoctorOrderByWithRelationInput>
    cursor?: DoctorWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<DoctorScalarFieldEnum>
  }


  /**
   * Role.Recepcionist
   */
  export type Role$RecepcionistArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recepcionist
     */
    select?: RecepcionistSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RecepcionistInclude<ExtArgs> | null
    where?: RecepcionistWhereInput
    orderBy?: Enumerable<RecepcionistOrderByWithRelationInput>
    cursor?: RecepcionistWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<RecepcionistScalarFieldEnum>
  }


  /**
   * Role without action
   */
  export type RoleArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: RoleInclude<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const AddressScalarFieldEnum: {
    id: 'id',
    street: 'street',
    houseNumber: 'houseNumber',
    complement: 'complement',
    district: 'district',
    city: 'city',
    state: 'state'
  };

  export type AddressScalarFieldEnum = (typeof AddressScalarFieldEnum)[keyof typeof AddressScalarFieldEnum]


  export const AdministratorScalarFieldEnum: {
    id: 'id',
    patientId: 'patientId',
    password: 'password',
    roleId: 'roleId'
  };

  export type AdministratorScalarFieldEnum = (typeof AdministratorScalarFieldEnum)[keyof typeof AdministratorScalarFieldEnum]


  export const AppointmentScalarFieldEnum: {
    id: 'id',
    scheduleTo: 'scheduleTo',
    patientId: 'patientId',
    doctorId: 'doctorId',
    recepcionistId: 'recepcionistId',
    diagnosis: 'diagnosis',
    createdAt: 'createdAt'
  };

  export type AppointmentScalarFieldEnum = (typeof AppointmentScalarFieldEnum)[keyof typeof AppointmentScalarFieldEnum]


  export const DoctorScalarFieldEnum: {
    id: 'id',
    patientId: 'patientId',
    crm: 'crm',
    speciality: 'speciality',
    password: 'password',
    roleId: 'roleId'
  };

  export type DoctorScalarFieldEnum = (typeof DoctorScalarFieldEnum)[keyof typeof DoctorScalarFieldEnum]


  export const MedicalRecordScalarFieldEnum: {
    id: 'id',
    patientId: 'patientId',
    appointmentId: 'appointmentId'
  };

  export type MedicalRecordScalarFieldEnum = (typeof MedicalRecordScalarFieldEnum)[keyof typeof MedicalRecordScalarFieldEnum]


  export const PatientScalarFieldEnum: {
    id: 'id',
    name: 'name',
    birthdate: 'birthdate',
    gender: 'gender',
    cpf: 'cpf',
    rg: 'rg',
    mother: 'mother',
    father: 'father',
    email: 'email',
    phone: 'phone',
    createdAt: 'createdAt',
    addressId: 'addressId'
  };

  export type PatientScalarFieldEnum = (typeof PatientScalarFieldEnum)[keyof typeof PatientScalarFieldEnum]


  export const RecepcionistScalarFieldEnum: {
    id: 'id',
    patientId: 'patientId',
    password: 'password',
    roleId: 'roleId'
  };

  export type RecepcionistScalarFieldEnum = (typeof RecepcionistScalarFieldEnum)[keyof typeof RecepcionistScalarFieldEnum]


  export const RoleScalarFieldEnum: {
    id: 'id',
    name: 'name',
    accessLevel: 'accessLevel'
  };

  export type RoleScalarFieldEnum = (typeof RoleScalarFieldEnum)[keyof typeof RoleScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Deep Input Types
   */


  export type AddressWhereInput = {
    AND?: Enumerable<AddressWhereInput>
    OR?: Enumerable<AddressWhereInput>
    NOT?: Enumerable<AddressWhereInput>
    id?: IntFilter | number
    street?: StringFilter | string
    houseNumber?: StringFilter | string
    complement?: StringFilter | string
    district?: StringFilter | string
    city?: StringFilter | string
    state?: StringFilter | string
    Patient?: PatientListRelationFilter
  }

  export type AddressOrderByWithRelationInput = {
    id?: SortOrder
    street?: SortOrder
    houseNumber?: SortOrder
    complement?: SortOrder
    district?: SortOrder
    city?: SortOrder
    state?: SortOrder
    Patient?: PatientOrderByRelationAggregateInput
  }

  export type AddressWhereUniqueInput = {
    id?: number
  }

  export type AddressOrderByWithAggregationInput = {
    id?: SortOrder
    street?: SortOrder
    houseNumber?: SortOrder
    complement?: SortOrder
    district?: SortOrder
    city?: SortOrder
    state?: SortOrder
    _count?: AddressCountOrderByAggregateInput
    _avg?: AddressAvgOrderByAggregateInput
    _max?: AddressMaxOrderByAggregateInput
    _min?: AddressMinOrderByAggregateInput
    _sum?: AddressSumOrderByAggregateInput
  }

  export type AddressScalarWhereWithAggregatesInput = {
    AND?: Enumerable<AddressScalarWhereWithAggregatesInput>
    OR?: Enumerable<AddressScalarWhereWithAggregatesInput>
    NOT?: Enumerable<AddressScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    street?: StringWithAggregatesFilter | string
    houseNumber?: StringWithAggregatesFilter | string
    complement?: StringWithAggregatesFilter | string
    district?: StringWithAggregatesFilter | string
    city?: StringWithAggregatesFilter | string
    state?: StringWithAggregatesFilter | string
  }

  export type AdministratorWhereInput = {
    AND?: Enumerable<AdministratorWhereInput>
    OR?: Enumerable<AdministratorWhereInput>
    NOT?: Enumerable<AdministratorWhereInput>
    id?: IntFilter | number
    patientId?: IntFilter | number
    password?: StringFilter | string
    roleId?: IntFilter | number
    Patient?: XOR<PatientRelationFilter, PatientWhereInput>
    Role?: XOR<RoleRelationFilter, RoleWhereInput>
  }

  export type AdministratorOrderByWithRelationInput = {
    id?: SortOrder
    patientId?: SortOrder
    password?: SortOrder
    roleId?: SortOrder
    Patient?: PatientOrderByWithRelationInput
    Role?: RoleOrderByWithRelationInput
  }

  export type AdministratorWhereUniqueInput = {
    id?: number
  }

  export type AdministratorOrderByWithAggregationInput = {
    id?: SortOrder
    patientId?: SortOrder
    password?: SortOrder
    roleId?: SortOrder
    _count?: AdministratorCountOrderByAggregateInput
    _avg?: AdministratorAvgOrderByAggregateInput
    _max?: AdministratorMaxOrderByAggregateInput
    _min?: AdministratorMinOrderByAggregateInput
    _sum?: AdministratorSumOrderByAggregateInput
  }

  export type AdministratorScalarWhereWithAggregatesInput = {
    AND?: Enumerable<AdministratorScalarWhereWithAggregatesInput>
    OR?: Enumerable<AdministratorScalarWhereWithAggregatesInput>
    NOT?: Enumerable<AdministratorScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    patientId?: IntWithAggregatesFilter | number
    password?: StringWithAggregatesFilter | string
    roleId?: IntWithAggregatesFilter | number
  }

  export type AppointmentWhereInput = {
    AND?: Enumerable<AppointmentWhereInput>
    OR?: Enumerable<AppointmentWhereInput>
    NOT?: Enumerable<AppointmentWhereInput>
    id?: IntFilter | number
    scheduleTo?: DateTimeFilter | Date | string
    patientId?: IntFilter | number
    doctorId?: IntFilter | number
    recepcionistId?: IntFilter | number
    diagnosis?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    Patient?: XOR<PatientRelationFilter, PatientWhereInput>
    Doctor?: XOR<DoctorRelationFilter, DoctorWhereInput>
    Recepcionist?: XOR<RecepcionistRelationFilter, RecepcionistWhereInput>
    MedicalRecord?: MedicalRecordListRelationFilter
  }

  export type AppointmentOrderByWithRelationInput = {
    id?: SortOrder
    scheduleTo?: SortOrder
    patientId?: SortOrder
    doctorId?: SortOrder
    recepcionistId?: SortOrder
    diagnosis?: SortOrder
    createdAt?: SortOrder
    Patient?: PatientOrderByWithRelationInput
    Doctor?: DoctorOrderByWithRelationInput
    Recepcionist?: RecepcionistOrderByWithRelationInput
    MedicalRecord?: MedicalRecordOrderByRelationAggregateInput
  }

  export type AppointmentWhereUniqueInput = {
    id?: number
  }

  export type AppointmentOrderByWithAggregationInput = {
    id?: SortOrder
    scheduleTo?: SortOrder
    patientId?: SortOrder
    doctorId?: SortOrder
    recepcionistId?: SortOrder
    diagnosis?: SortOrder
    createdAt?: SortOrder
    _count?: AppointmentCountOrderByAggregateInput
    _avg?: AppointmentAvgOrderByAggregateInput
    _max?: AppointmentMaxOrderByAggregateInput
    _min?: AppointmentMinOrderByAggregateInput
    _sum?: AppointmentSumOrderByAggregateInput
  }

  export type AppointmentScalarWhereWithAggregatesInput = {
    AND?: Enumerable<AppointmentScalarWhereWithAggregatesInput>
    OR?: Enumerable<AppointmentScalarWhereWithAggregatesInput>
    NOT?: Enumerable<AppointmentScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    scheduleTo?: DateTimeWithAggregatesFilter | Date | string
    patientId?: IntWithAggregatesFilter | number
    doctorId?: IntWithAggregatesFilter | number
    recepcionistId?: IntWithAggregatesFilter | number
    diagnosis?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type DoctorWhereInput = {
    AND?: Enumerable<DoctorWhereInput>
    OR?: Enumerable<DoctorWhereInput>
    NOT?: Enumerable<DoctorWhereInput>
    id?: IntFilter | number
    patientId?: IntFilter | number
    crm?: StringFilter | string
    speciality?: StringFilter | string
    password?: StringFilter | string
    roleId?: IntFilter | number
    Appointment?: AppointmentListRelationFilter
    Patient?: XOR<PatientRelationFilter, PatientWhereInput>
    Role?: XOR<RoleRelationFilter, RoleWhereInput>
  }

  export type DoctorOrderByWithRelationInput = {
    id?: SortOrder
    patientId?: SortOrder
    crm?: SortOrder
    speciality?: SortOrder
    password?: SortOrder
    roleId?: SortOrder
    Appointment?: AppointmentOrderByRelationAggregateInput
    Patient?: PatientOrderByWithRelationInput
    Role?: RoleOrderByWithRelationInput
  }

  export type DoctorWhereUniqueInput = {
    id?: number
    crm?: string
  }

  export type DoctorOrderByWithAggregationInput = {
    id?: SortOrder
    patientId?: SortOrder
    crm?: SortOrder
    speciality?: SortOrder
    password?: SortOrder
    roleId?: SortOrder
    _count?: DoctorCountOrderByAggregateInput
    _avg?: DoctorAvgOrderByAggregateInput
    _max?: DoctorMaxOrderByAggregateInput
    _min?: DoctorMinOrderByAggregateInput
    _sum?: DoctorSumOrderByAggregateInput
  }

  export type DoctorScalarWhereWithAggregatesInput = {
    AND?: Enumerable<DoctorScalarWhereWithAggregatesInput>
    OR?: Enumerable<DoctorScalarWhereWithAggregatesInput>
    NOT?: Enumerable<DoctorScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    patientId?: IntWithAggregatesFilter | number
    crm?: StringWithAggregatesFilter | string
    speciality?: StringWithAggregatesFilter | string
    password?: StringWithAggregatesFilter | string
    roleId?: IntWithAggregatesFilter | number
  }

  export type MedicalRecordWhereInput = {
    AND?: Enumerable<MedicalRecordWhereInput>
    OR?: Enumerable<MedicalRecordWhereInput>
    NOT?: Enumerable<MedicalRecordWhereInput>
    id?: IntFilter | number
    patientId?: IntFilter | number
    appointmentId?: IntFilter | number
    Patient?: XOR<PatientRelationFilter, PatientWhereInput>
    Appointment?: XOR<AppointmentRelationFilter, AppointmentWhereInput>
  }

  export type MedicalRecordOrderByWithRelationInput = {
    id?: SortOrder
    patientId?: SortOrder
    appointmentId?: SortOrder
    Patient?: PatientOrderByWithRelationInput
    Appointment?: AppointmentOrderByWithRelationInput
  }

  export type MedicalRecordWhereUniqueInput = {
    id?: number
  }

  export type MedicalRecordOrderByWithAggregationInput = {
    id?: SortOrder
    patientId?: SortOrder
    appointmentId?: SortOrder
    _count?: MedicalRecordCountOrderByAggregateInput
    _avg?: MedicalRecordAvgOrderByAggregateInput
    _max?: MedicalRecordMaxOrderByAggregateInput
    _min?: MedicalRecordMinOrderByAggregateInput
    _sum?: MedicalRecordSumOrderByAggregateInput
  }

  export type MedicalRecordScalarWhereWithAggregatesInput = {
    AND?: Enumerable<MedicalRecordScalarWhereWithAggregatesInput>
    OR?: Enumerable<MedicalRecordScalarWhereWithAggregatesInput>
    NOT?: Enumerable<MedicalRecordScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    patientId?: IntWithAggregatesFilter | number
    appointmentId?: IntWithAggregatesFilter | number
  }

  export type PatientWhereInput = {
    AND?: Enumerable<PatientWhereInput>
    OR?: Enumerable<PatientWhereInput>
    NOT?: Enumerable<PatientWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    birthdate?: DateTimeFilter | Date | string
    gender?: StringFilter | string
    cpf?: StringFilter | string
    rg?: StringNullableFilter | string | null
    mother?: StringFilter | string
    father?: StringFilter | string
    email?: StringFilter | string
    phone?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    addressId?: IntFilter | number
    Administrator?: AdministratorListRelationFilter
    Appointment?: AppointmentListRelationFilter
    Doctor?: DoctorListRelationFilter
    MedicalRecord?: MedicalRecordListRelationFilter
    Address?: XOR<AddressRelationFilter, AddressWhereInput>
    Recepcionist?: RecepcionistListRelationFilter
  }

  export type PatientOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    birthdate?: SortOrder
    gender?: SortOrder
    cpf?: SortOrder
    rg?: SortOrderInput | SortOrder
    mother?: SortOrder
    father?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    createdAt?: SortOrder
    addressId?: SortOrder
    Administrator?: AdministratorOrderByRelationAggregateInput
    Appointment?: AppointmentOrderByRelationAggregateInput
    Doctor?: DoctorOrderByRelationAggregateInput
    MedicalRecord?: MedicalRecordOrderByRelationAggregateInput
    Address?: AddressOrderByWithRelationInput
    Recepcionist?: RecepcionistOrderByRelationAggregateInput
  }

  export type PatientWhereUniqueInput = {
    id?: number
    cpf?: string
    email?: string
  }

  export type PatientOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    birthdate?: SortOrder
    gender?: SortOrder
    cpf?: SortOrder
    rg?: SortOrderInput | SortOrder
    mother?: SortOrder
    father?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    createdAt?: SortOrder
    addressId?: SortOrder
    _count?: PatientCountOrderByAggregateInput
    _avg?: PatientAvgOrderByAggregateInput
    _max?: PatientMaxOrderByAggregateInput
    _min?: PatientMinOrderByAggregateInput
    _sum?: PatientSumOrderByAggregateInput
  }

  export type PatientScalarWhereWithAggregatesInput = {
    AND?: Enumerable<PatientScalarWhereWithAggregatesInput>
    OR?: Enumerable<PatientScalarWhereWithAggregatesInput>
    NOT?: Enumerable<PatientScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
    birthdate?: DateTimeWithAggregatesFilter | Date | string
    gender?: StringWithAggregatesFilter | string
    cpf?: StringWithAggregatesFilter | string
    rg?: StringNullableWithAggregatesFilter | string | null
    mother?: StringWithAggregatesFilter | string
    father?: StringWithAggregatesFilter | string
    email?: StringWithAggregatesFilter | string
    phone?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    addressId?: IntWithAggregatesFilter | number
  }

  export type RecepcionistWhereInput = {
    AND?: Enumerable<RecepcionistWhereInput>
    OR?: Enumerable<RecepcionistWhereInput>
    NOT?: Enumerable<RecepcionistWhereInput>
    id?: IntFilter | number
    patientId?: IntFilter | number
    password?: StringFilter | string
    roleId?: IntFilter | number
    Appointment?: AppointmentListRelationFilter
    Patient?: XOR<PatientRelationFilter, PatientWhereInput>
    Role?: XOR<RoleRelationFilter, RoleWhereInput>
  }

  export type RecepcionistOrderByWithRelationInput = {
    id?: SortOrder
    patientId?: SortOrder
    password?: SortOrder
    roleId?: SortOrder
    Appointment?: AppointmentOrderByRelationAggregateInput
    Patient?: PatientOrderByWithRelationInput
    Role?: RoleOrderByWithRelationInput
  }

  export type RecepcionistWhereUniqueInput = {
    id?: number
  }

  export type RecepcionistOrderByWithAggregationInput = {
    id?: SortOrder
    patientId?: SortOrder
    password?: SortOrder
    roleId?: SortOrder
    _count?: RecepcionistCountOrderByAggregateInput
    _avg?: RecepcionistAvgOrderByAggregateInput
    _max?: RecepcionistMaxOrderByAggregateInput
    _min?: RecepcionistMinOrderByAggregateInput
    _sum?: RecepcionistSumOrderByAggregateInput
  }

  export type RecepcionistScalarWhereWithAggregatesInput = {
    AND?: Enumerable<RecepcionistScalarWhereWithAggregatesInput>
    OR?: Enumerable<RecepcionistScalarWhereWithAggregatesInput>
    NOT?: Enumerable<RecepcionistScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    patientId?: IntWithAggregatesFilter | number
    password?: StringWithAggregatesFilter | string
    roleId?: IntWithAggregatesFilter | number
  }

  export type RoleWhereInput = {
    AND?: Enumerable<RoleWhereInput>
    OR?: Enumerable<RoleWhereInput>
    NOT?: Enumerable<RoleWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    accessLevel?: IntFilter | number
    Administrator?: AdministratorListRelationFilter
    Doctor?: DoctorListRelationFilter
    Recepcionist?: RecepcionistListRelationFilter
  }

  export type RoleOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    accessLevel?: SortOrder
    Administrator?: AdministratorOrderByRelationAggregateInput
    Doctor?: DoctorOrderByRelationAggregateInput
    Recepcionist?: RecepcionistOrderByRelationAggregateInput
  }

  export type RoleWhereUniqueInput = {
    id?: number
    name?: string
    accessLevel?: number
  }

  export type RoleOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    accessLevel?: SortOrder
    _count?: RoleCountOrderByAggregateInput
    _avg?: RoleAvgOrderByAggregateInput
    _max?: RoleMaxOrderByAggregateInput
    _min?: RoleMinOrderByAggregateInput
    _sum?: RoleSumOrderByAggregateInput
  }

  export type RoleScalarWhereWithAggregatesInput = {
    AND?: Enumerable<RoleScalarWhereWithAggregatesInput>
    OR?: Enumerable<RoleScalarWhereWithAggregatesInput>
    NOT?: Enumerable<RoleScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
    accessLevel?: IntWithAggregatesFilter | number
  }

  export type AddressCreateInput = {
    street: string
    houseNumber: string
    complement: string
    district: string
    city: string
    state: string
    Patient?: PatientCreateNestedManyWithoutAddressInput
  }

  export type AddressUncheckedCreateInput = {
    id?: number
    street: string
    houseNumber: string
    complement: string
    district: string
    city: string
    state: string
    Patient?: PatientUncheckedCreateNestedManyWithoutAddressInput
  }

  export type AddressUpdateInput = {
    street?: StringFieldUpdateOperationsInput | string
    houseNumber?: StringFieldUpdateOperationsInput | string
    complement?: StringFieldUpdateOperationsInput | string
    district?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    Patient?: PatientUpdateManyWithoutAddressNestedInput
  }

  export type AddressUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    street?: StringFieldUpdateOperationsInput | string
    houseNumber?: StringFieldUpdateOperationsInput | string
    complement?: StringFieldUpdateOperationsInput | string
    district?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    Patient?: PatientUncheckedUpdateManyWithoutAddressNestedInput
  }

  export type AddressCreateManyInput = {
    id?: number
    street: string
    houseNumber: string
    complement: string
    district: string
    city: string
    state: string
  }

  export type AddressUpdateManyMutationInput = {
    street?: StringFieldUpdateOperationsInput | string
    houseNumber?: StringFieldUpdateOperationsInput | string
    complement?: StringFieldUpdateOperationsInput | string
    district?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
  }

  export type AddressUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    street?: StringFieldUpdateOperationsInput | string
    houseNumber?: StringFieldUpdateOperationsInput | string
    complement?: StringFieldUpdateOperationsInput | string
    district?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
  }

  export type AdministratorCreateInput = {
    password: string
    Patient: PatientCreateNestedOneWithoutAdministratorInput
    Role: RoleCreateNestedOneWithoutAdministratorInput
  }

  export type AdministratorUncheckedCreateInput = {
    id?: number
    patientId: number
    password: string
    roleId: number
  }

  export type AdministratorUpdateInput = {
    password?: StringFieldUpdateOperationsInput | string
    Patient?: PatientUpdateOneRequiredWithoutAdministratorNestedInput
    Role?: RoleUpdateOneRequiredWithoutAdministratorNestedInput
  }

  export type AdministratorUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    patientId?: IntFieldUpdateOperationsInput | number
    password?: StringFieldUpdateOperationsInput | string
    roleId?: IntFieldUpdateOperationsInput | number
  }

  export type AdministratorCreateManyInput = {
    id?: number
    patientId: number
    password: string
    roleId: number
  }

  export type AdministratorUpdateManyMutationInput = {
    password?: StringFieldUpdateOperationsInput | string
  }

  export type AdministratorUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    patientId?: IntFieldUpdateOperationsInput | number
    password?: StringFieldUpdateOperationsInput | string
    roleId?: IntFieldUpdateOperationsInput | number
  }

  export type AppointmentCreateInput = {
    scheduleTo: Date | string
    diagnosis: string
    createdAt?: Date | string
    Patient: PatientCreateNestedOneWithoutAppointmentInput
    Doctor: DoctorCreateNestedOneWithoutAppointmentInput
    Recepcionist: RecepcionistCreateNestedOneWithoutAppointmentInput
    MedicalRecord?: MedicalRecordCreateNestedManyWithoutAppointmentInput
  }

  export type AppointmentUncheckedCreateInput = {
    id?: number
    scheduleTo: Date | string
    patientId: number
    doctorId: number
    recepcionistId: number
    diagnosis: string
    createdAt?: Date | string
    MedicalRecord?: MedicalRecordUncheckedCreateNestedManyWithoutAppointmentInput
  }

  export type AppointmentUpdateInput = {
    scheduleTo?: DateTimeFieldUpdateOperationsInput | Date | string
    diagnosis?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Patient?: PatientUpdateOneRequiredWithoutAppointmentNestedInput
    Doctor?: DoctorUpdateOneRequiredWithoutAppointmentNestedInput
    Recepcionist?: RecepcionistUpdateOneRequiredWithoutAppointmentNestedInput
    MedicalRecord?: MedicalRecordUpdateManyWithoutAppointmentNestedInput
  }

  export type AppointmentUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    scheduleTo?: DateTimeFieldUpdateOperationsInput | Date | string
    patientId?: IntFieldUpdateOperationsInput | number
    doctorId?: IntFieldUpdateOperationsInput | number
    recepcionistId?: IntFieldUpdateOperationsInput | number
    diagnosis?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    MedicalRecord?: MedicalRecordUncheckedUpdateManyWithoutAppointmentNestedInput
  }

  export type AppointmentCreateManyInput = {
    id?: number
    scheduleTo: Date | string
    patientId: number
    doctorId: number
    recepcionistId: number
    diagnosis: string
    createdAt?: Date | string
  }

  export type AppointmentUpdateManyMutationInput = {
    scheduleTo?: DateTimeFieldUpdateOperationsInput | Date | string
    diagnosis?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AppointmentUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    scheduleTo?: DateTimeFieldUpdateOperationsInput | Date | string
    patientId?: IntFieldUpdateOperationsInput | number
    doctorId?: IntFieldUpdateOperationsInput | number
    recepcionistId?: IntFieldUpdateOperationsInput | number
    diagnosis?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DoctorCreateInput = {
    crm: string
    speciality: string
    password: string
    Appointment?: AppointmentCreateNestedManyWithoutDoctorInput
    Patient: PatientCreateNestedOneWithoutDoctorInput
    Role: RoleCreateNestedOneWithoutDoctorInput
  }

  export type DoctorUncheckedCreateInput = {
    id?: number
    patientId: number
    crm: string
    speciality: string
    password: string
    roleId: number
    Appointment?: AppointmentUncheckedCreateNestedManyWithoutDoctorInput
  }

  export type DoctorUpdateInput = {
    crm?: StringFieldUpdateOperationsInput | string
    speciality?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    Appointment?: AppointmentUpdateManyWithoutDoctorNestedInput
    Patient?: PatientUpdateOneRequiredWithoutDoctorNestedInput
    Role?: RoleUpdateOneRequiredWithoutDoctorNestedInput
  }

  export type DoctorUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    patientId?: IntFieldUpdateOperationsInput | number
    crm?: StringFieldUpdateOperationsInput | string
    speciality?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    roleId?: IntFieldUpdateOperationsInput | number
    Appointment?: AppointmentUncheckedUpdateManyWithoutDoctorNestedInput
  }

  export type DoctorCreateManyInput = {
    id?: number
    patientId: number
    crm: string
    speciality: string
    password: string
    roleId: number
  }

  export type DoctorUpdateManyMutationInput = {
    crm?: StringFieldUpdateOperationsInput | string
    speciality?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type DoctorUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    patientId?: IntFieldUpdateOperationsInput | number
    crm?: StringFieldUpdateOperationsInput | string
    speciality?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    roleId?: IntFieldUpdateOperationsInput | number
  }

  export type MedicalRecordCreateInput = {
    Patient: PatientCreateNestedOneWithoutMedicalRecordInput
    Appointment: AppointmentCreateNestedOneWithoutMedicalRecordInput
  }

  export type MedicalRecordUncheckedCreateInput = {
    id?: number
    patientId: number
    appointmentId: number
  }

  export type MedicalRecordUpdateInput = {
    Patient?: PatientUpdateOneRequiredWithoutMedicalRecordNestedInput
    Appointment?: AppointmentUpdateOneRequiredWithoutMedicalRecordNestedInput
  }

  export type MedicalRecordUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    patientId?: IntFieldUpdateOperationsInput | number
    appointmentId?: IntFieldUpdateOperationsInput | number
  }

  export type MedicalRecordCreateManyInput = {
    id?: number
    patientId: number
    appointmentId: number
  }

  export type MedicalRecordUpdateManyMutationInput = {

  }

  export type MedicalRecordUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    patientId?: IntFieldUpdateOperationsInput | number
    appointmentId?: IntFieldUpdateOperationsInput | number
  }

  export type PatientCreateInput = {
    name: string
    birthdate: Date | string
    gender: string
    cpf: string
    rg?: string | null
    mother: string
    father: string
    email: string
    phone: string
    createdAt?: Date | string
    Administrator?: AdministratorCreateNestedManyWithoutPatientInput
    Appointment?: AppointmentCreateNestedManyWithoutPatientInput
    Doctor?: DoctorCreateNestedManyWithoutPatientInput
    MedicalRecord?: MedicalRecordCreateNestedManyWithoutPatientInput
    Address: AddressCreateNestedOneWithoutPatientInput
    Recepcionist?: RecepcionistCreateNestedManyWithoutPatientInput
  }

  export type PatientUncheckedCreateInput = {
    id?: number
    name: string
    birthdate: Date | string
    gender: string
    cpf: string
    rg?: string | null
    mother: string
    father: string
    email: string
    phone: string
    createdAt?: Date | string
    addressId: number
    Administrator?: AdministratorUncheckedCreateNestedManyWithoutPatientInput
    Appointment?: AppointmentUncheckedCreateNestedManyWithoutPatientInput
    Doctor?: DoctorUncheckedCreateNestedManyWithoutPatientInput
    MedicalRecord?: MedicalRecordUncheckedCreateNestedManyWithoutPatientInput
    Recepcionist?: RecepcionistUncheckedCreateNestedManyWithoutPatientInput
  }

  export type PatientUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    birthdate?: DateTimeFieldUpdateOperationsInput | Date | string
    gender?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    rg?: NullableStringFieldUpdateOperationsInput | string | null
    mother?: StringFieldUpdateOperationsInput | string
    father?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Administrator?: AdministratorUpdateManyWithoutPatientNestedInput
    Appointment?: AppointmentUpdateManyWithoutPatientNestedInput
    Doctor?: DoctorUpdateManyWithoutPatientNestedInput
    MedicalRecord?: MedicalRecordUpdateManyWithoutPatientNestedInput
    Address?: AddressUpdateOneRequiredWithoutPatientNestedInput
    Recepcionist?: RecepcionistUpdateManyWithoutPatientNestedInput
  }

  export type PatientUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    birthdate?: DateTimeFieldUpdateOperationsInput | Date | string
    gender?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    rg?: NullableStringFieldUpdateOperationsInput | string | null
    mother?: StringFieldUpdateOperationsInput | string
    father?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    addressId?: IntFieldUpdateOperationsInput | number
    Administrator?: AdministratorUncheckedUpdateManyWithoutPatientNestedInput
    Appointment?: AppointmentUncheckedUpdateManyWithoutPatientNestedInput
    Doctor?: DoctorUncheckedUpdateManyWithoutPatientNestedInput
    MedicalRecord?: MedicalRecordUncheckedUpdateManyWithoutPatientNestedInput
    Recepcionist?: RecepcionistUncheckedUpdateManyWithoutPatientNestedInput
  }

  export type PatientCreateManyInput = {
    id?: number
    name: string
    birthdate: Date | string
    gender: string
    cpf: string
    rg?: string | null
    mother: string
    father: string
    email: string
    phone: string
    createdAt?: Date | string
    addressId: number
  }

  export type PatientUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    birthdate?: DateTimeFieldUpdateOperationsInput | Date | string
    gender?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    rg?: NullableStringFieldUpdateOperationsInput | string | null
    mother?: StringFieldUpdateOperationsInput | string
    father?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PatientUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    birthdate?: DateTimeFieldUpdateOperationsInput | Date | string
    gender?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    rg?: NullableStringFieldUpdateOperationsInput | string | null
    mother?: StringFieldUpdateOperationsInput | string
    father?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    addressId?: IntFieldUpdateOperationsInput | number
  }

  export type RecepcionistCreateInput = {
    password: string
    Appointment?: AppointmentCreateNestedManyWithoutRecepcionistInput
    Patient: PatientCreateNestedOneWithoutRecepcionistInput
    Role: RoleCreateNestedOneWithoutRecepcionistInput
  }

  export type RecepcionistUncheckedCreateInput = {
    id?: number
    patientId: number
    password: string
    roleId: number
    Appointment?: AppointmentUncheckedCreateNestedManyWithoutRecepcionistInput
  }

  export type RecepcionistUpdateInput = {
    password?: StringFieldUpdateOperationsInput | string
    Appointment?: AppointmentUpdateManyWithoutRecepcionistNestedInput
    Patient?: PatientUpdateOneRequiredWithoutRecepcionistNestedInput
    Role?: RoleUpdateOneRequiredWithoutRecepcionistNestedInput
  }

  export type RecepcionistUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    patientId?: IntFieldUpdateOperationsInput | number
    password?: StringFieldUpdateOperationsInput | string
    roleId?: IntFieldUpdateOperationsInput | number
    Appointment?: AppointmentUncheckedUpdateManyWithoutRecepcionistNestedInput
  }

  export type RecepcionistCreateManyInput = {
    id?: number
    patientId: number
    password: string
    roleId: number
  }

  export type RecepcionistUpdateManyMutationInput = {
    password?: StringFieldUpdateOperationsInput | string
  }

  export type RecepcionistUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    patientId?: IntFieldUpdateOperationsInput | number
    password?: StringFieldUpdateOperationsInput | string
    roleId?: IntFieldUpdateOperationsInput | number
  }

  export type RoleCreateInput = {
    name: string
    accessLevel: number
    Administrator?: AdministratorCreateNestedManyWithoutRoleInput
    Doctor?: DoctorCreateNestedManyWithoutRoleInput
    Recepcionist?: RecepcionistCreateNestedManyWithoutRoleInput
  }

  export type RoleUncheckedCreateInput = {
    id?: number
    name: string
    accessLevel: number
    Administrator?: AdministratorUncheckedCreateNestedManyWithoutRoleInput
    Doctor?: DoctorUncheckedCreateNestedManyWithoutRoleInput
    Recepcionist?: RecepcionistUncheckedCreateNestedManyWithoutRoleInput
  }

  export type RoleUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    accessLevel?: IntFieldUpdateOperationsInput | number
    Administrator?: AdministratorUpdateManyWithoutRoleNestedInput
    Doctor?: DoctorUpdateManyWithoutRoleNestedInput
    Recepcionist?: RecepcionistUpdateManyWithoutRoleNestedInput
  }

  export type RoleUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    accessLevel?: IntFieldUpdateOperationsInput | number
    Administrator?: AdministratorUncheckedUpdateManyWithoutRoleNestedInput
    Doctor?: DoctorUncheckedUpdateManyWithoutRoleNestedInput
    Recepcionist?: RecepcionistUncheckedUpdateManyWithoutRoleNestedInput
  }

  export type RoleCreateManyInput = {
    id?: number
    name: string
    accessLevel: number
  }

  export type RoleUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    accessLevel?: IntFieldUpdateOperationsInput | number
  }

  export type RoleUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    accessLevel?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringFilter | string
  }

  export type PatientListRelationFilter = {
    every?: PatientWhereInput
    some?: PatientWhereInput
    none?: PatientWhereInput
  }

  export type PatientOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AddressCountOrderByAggregateInput = {
    id?: SortOrder
    street?: SortOrder
    houseNumber?: SortOrder
    complement?: SortOrder
    district?: SortOrder
    city?: SortOrder
    state?: SortOrder
  }

  export type AddressAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type AddressMaxOrderByAggregateInput = {
    id?: SortOrder
    street?: SortOrder
    houseNumber?: SortOrder
    complement?: SortOrder
    district?: SortOrder
    city?: SortOrder
    state?: SortOrder
  }

  export type AddressMinOrderByAggregateInput = {
    id?: SortOrder
    street?: SortOrder
    houseNumber?: SortOrder
    complement?: SortOrder
    district?: SortOrder
    city?: SortOrder
    state?: SortOrder
  }

  export type AddressSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type PatientRelationFilter = {
    is?: PatientWhereInput | null
    isNot?: PatientWhereInput | null
  }

  export type RoleRelationFilter = {
    is?: RoleWhereInput | null
    isNot?: RoleWhereInput | null
  }

  export type AdministratorCountOrderByAggregateInput = {
    id?: SortOrder
    patientId?: SortOrder
    password?: SortOrder
    roleId?: SortOrder
  }

  export type AdministratorAvgOrderByAggregateInput = {
    id?: SortOrder
    patientId?: SortOrder
    roleId?: SortOrder
  }

  export type AdministratorMaxOrderByAggregateInput = {
    id?: SortOrder
    patientId?: SortOrder
    password?: SortOrder
    roleId?: SortOrder
  }

  export type AdministratorMinOrderByAggregateInput = {
    id?: SortOrder
    patientId?: SortOrder
    password?: SortOrder
    roleId?: SortOrder
  }

  export type AdministratorSumOrderByAggregateInput = {
    id?: SortOrder
    patientId?: SortOrder
    roleId?: SortOrder
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string> | Date | string
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type DoctorRelationFilter = {
    is?: DoctorWhereInput | null
    isNot?: DoctorWhereInput | null
  }

  export type RecepcionistRelationFilter = {
    is?: RecepcionistWhereInput | null
    isNot?: RecepcionistWhereInput | null
  }

  export type MedicalRecordListRelationFilter = {
    every?: MedicalRecordWhereInput
    some?: MedicalRecordWhereInput
    none?: MedicalRecordWhereInput
  }

  export type MedicalRecordOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AppointmentCountOrderByAggregateInput = {
    id?: SortOrder
    scheduleTo?: SortOrder
    patientId?: SortOrder
    doctorId?: SortOrder
    recepcionistId?: SortOrder
    diagnosis?: SortOrder
    createdAt?: SortOrder
  }

  export type AppointmentAvgOrderByAggregateInput = {
    id?: SortOrder
    patientId?: SortOrder
    doctorId?: SortOrder
    recepcionistId?: SortOrder
  }

  export type AppointmentMaxOrderByAggregateInput = {
    id?: SortOrder
    scheduleTo?: SortOrder
    patientId?: SortOrder
    doctorId?: SortOrder
    recepcionistId?: SortOrder
    diagnosis?: SortOrder
    createdAt?: SortOrder
  }

  export type AppointmentMinOrderByAggregateInput = {
    id?: SortOrder
    scheduleTo?: SortOrder
    patientId?: SortOrder
    doctorId?: SortOrder
    recepcionistId?: SortOrder
    diagnosis?: SortOrder
    createdAt?: SortOrder
  }

  export type AppointmentSumOrderByAggregateInput = {
    id?: SortOrder
    patientId?: SortOrder
    doctorId?: SortOrder
    recepcionistId?: SortOrder
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string> | Date | string
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type AppointmentListRelationFilter = {
    every?: AppointmentWhereInput
    some?: AppointmentWhereInput
    none?: AppointmentWhereInput
  }

  export type AppointmentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DoctorCountOrderByAggregateInput = {
    id?: SortOrder
    patientId?: SortOrder
    crm?: SortOrder
    speciality?: SortOrder
    password?: SortOrder
    roleId?: SortOrder
  }

  export type DoctorAvgOrderByAggregateInput = {
    id?: SortOrder
    patientId?: SortOrder
    roleId?: SortOrder
  }

  export type DoctorMaxOrderByAggregateInput = {
    id?: SortOrder
    patientId?: SortOrder
    crm?: SortOrder
    speciality?: SortOrder
    password?: SortOrder
    roleId?: SortOrder
  }

  export type DoctorMinOrderByAggregateInput = {
    id?: SortOrder
    patientId?: SortOrder
    crm?: SortOrder
    speciality?: SortOrder
    password?: SortOrder
    roleId?: SortOrder
  }

  export type DoctorSumOrderByAggregateInput = {
    id?: SortOrder
    patientId?: SortOrder
    roleId?: SortOrder
  }

  export type AppointmentRelationFilter = {
    is?: AppointmentWhereInput | null
    isNot?: AppointmentWhereInput | null
  }

  export type MedicalRecordCountOrderByAggregateInput = {
    id?: SortOrder
    patientId?: SortOrder
    appointmentId?: SortOrder
  }

  export type MedicalRecordAvgOrderByAggregateInput = {
    id?: SortOrder
    patientId?: SortOrder
    appointmentId?: SortOrder
  }

  export type MedicalRecordMaxOrderByAggregateInput = {
    id?: SortOrder
    patientId?: SortOrder
    appointmentId?: SortOrder
  }

  export type MedicalRecordMinOrderByAggregateInput = {
    id?: SortOrder
    patientId?: SortOrder
    appointmentId?: SortOrder
  }

  export type MedicalRecordSumOrderByAggregateInput = {
    id?: SortOrder
    patientId?: SortOrder
    appointmentId?: SortOrder
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableFilter | string | null
  }

  export type AdministratorListRelationFilter = {
    every?: AdministratorWhereInput
    some?: AdministratorWhereInput
    none?: AdministratorWhereInput
  }

  export type DoctorListRelationFilter = {
    every?: DoctorWhereInput
    some?: DoctorWhereInput
    none?: DoctorWhereInput
  }

  export type AddressRelationFilter = {
    is?: AddressWhereInput | null
    isNot?: AddressWhereInput | null
  }

  export type RecepcionistListRelationFilter = {
    every?: RecepcionistWhereInput
    some?: RecepcionistWhereInput
    none?: RecepcionistWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type AdministratorOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DoctorOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RecepcionistOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PatientCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    birthdate?: SortOrder
    gender?: SortOrder
    cpf?: SortOrder
    rg?: SortOrder
    mother?: SortOrder
    father?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    createdAt?: SortOrder
    addressId?: SortOrder
  }

  export type PatientAvgOrderByAggregateInput = {
    id?: SortOrder
    addressId?: SortOrder
  }

  export type PatientMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    birthdate?: SortOrder
    gender?: SortOrder
    cpf?: SortOrder
    rg?: SortOrder
    mother?: SortOrder
    father?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    createdAt?: SortOrder
    addressId?: SortOrder
  }

  export type PatientMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    birthdate?: SortOrder
    gender?: SortOrder
    cpf?: SortOrder
    rg?: SortOrder
    mother?: SortOrder
    father?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    createdAt?: SortOrder
    addressId?: SortOrder
  }

  export type PatientSumOrderByAggregateInput = {
    id?: SortOrder
    addressId?: SortOrder
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type RecepcionistCountOrderByAggregateInput = {
    id?: SortOrder
    patientId?: SortOrder
    password?: SortOrder
    roleId?: SortOrder
  }

  export type RecepcionistAvgOrderByAggregateInput = {
    id?: SortOrder
    patientId?: SortOrder
    roleId?: SortOrder
  }

  export type RecepcionistMaxOrderByAggregateInput = {
    id?: SortOrder
    patientId?: SortOrder
    password?: SortOrder
    roleId?: SortOrder
  }

  export type RecepcionistMinOrderByAggregateInput = {
    id?: SortOrder
    patientId?: SortOrder
    password?: SortOrder
    roleId?: SortOrder
  }

  export type RecepcionistSumOrderByAggregateInput = {
    id?: SortOrder
    patientId?: SortOrder
    roleId?: SortOrder
  }

  export type RoleCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    accessLevel?: SortOrder
  }

  export type RoleAvgOrderByAggregateInput = {
    id?: SortOrder
    accessLevel?: SortOrder
  }

  export type RoleMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    accessLevel?: SortOrder
  }

  export type RoleMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    accessLevel?: SortOrder
  }

  export type RoleSumOrderByAggregateInput = {
    id?: SortOrder
    accessLevel?: SortOrder
  }

  export type PatientCreateNestedManyWithoutAddressInput = {
    create?: XOR<Enumerable<PatientCreateWithoutAddressInput>, Enumerable<PatientUncheckedCreateWithoutAddressInput>>
    connectOrCreate?: Enumerable<PatientCreateOrConnectWithoutAddressInput>
    createMany?: PatientCreateManyAddressInputEnvelope
    connect?: Enumerable<PatientWhereUniqueInput>
  }

  export type PatientUncheckedCreateNestedManyWithoutAddressInput = {
    create?: XOR<Enumerable<PatientCreateWithoutAddressInput>, Enumerable<PatientUncheckedCreateWithoutAddressInput>>
    connectOrCreate?: Enumerable<PatientCreateOrConnectWithoutAddressInput>
    createMany?: PatientCreateManyAddressInputEnvelope
    connect?: Enumerable<PatientWhereUniqueInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type PatientUpdateManyWithoutAddressNestedInput = {
    create?: XOR<Enumerable<PatientCreateWithoutAddressInput>, Enumerable<PatientUncheckedCreateWithoutAddressInput>>
    connectOrCreate?: Enumerable<PatientCreateOrConnectWithoutAddressInput>
    upsert?: Enumerable<PatientUpsertWithWhereUniqueWithoutAddressInput>
    createMany?: PatientCreateManyAddressInputEnvelope
    set?: Enumerable<PatientWhereUniqueInput>
    disconnect?: Enumerable<PatientWhereUniqueInput>
    delete?: Enumerable<PatientWhereUniqueInput>
    connect?: Enumerable<PatientWhereUniqueInput>
    update?: Enumerable<PatientUpdateWithWhereUniqueWithoutAddressInput>
    updateMany?: Enumerable<PatientUpdateManyWithWhereWithoutAddressInput>
    deleteMany?: Enumerable<PatientScalarWhereInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type PatientUncheckedUpdateManyWithoutAddressNestedInput = {
    create?: XOR<Enumerable<PatientCreateWithoutAddressInput>, Enumerable<PatientUncheckedCreateWithoutAddressInput>>
    connectOrCreate?: Enumerable<PatientCreateOrConnectWithoutAddressInput>
    upsert?: Enumerable<PatientUpsertWithWhereUniqueWithoutAddressInput>
    createMany?: PatientCreateManyAddressInputEnvelope
    set?: Enumerable<PatientWhereUniqueInput>
    disconnect?: Enumerable<PatientWhereUniqueInput>
    delete?: Enumerable<PatientWhereUniqueInput>
    connect?: Enumerable<PatientWhereUniqueInput>
    update?: Enumerable<PatientUpdateWithWhereUniqueWithoutAddressInput>
    updateMany?: Enumerable<PatientUpdateManyWithWhereWithoutAddressInput>
    deleteMany?: Enumerable<PatientScalarWhereInput>
  }

  export type PatientCreateNestedOneWithoutAdministratorInput = {
    create?: XOR<PatientCreateWithoutAdministratorInput, PatientUncheckedCreateWithoutAdministratorInput>
    connectOrCreate?: PatientCreateOrConnectWithoutAdministratorInput
    connect?: PatientWhereUniqueInput
  }

  export type RoleCreateNestedOneWithoutAdministratorInput = {
    create?: XOR<RoleCreateWithoutAdministratorInput, RoleUncheckedCreateWithoutAdministratorInput>
    connectOrCreate?: RoleCreateOrConnectWithoutAdministratorInput
    connect?: RoleWhereUniqueInput
  }

  export type PatientUpdateOneRequiredWithoutAdministratorNestedInput = {
    create?: XOR<PatientCreateWithoutAdministratorInput, PatientUncheckedCreateWithoutAdministratorInput>
    connectOrCreate?: PatientCreateOrConnectWithoutAdministratorInput
    upsert?: PatientUpsertWithoutAdministratorInput
    connect?: PatientWhereUniqueInput
    update?: XOR<PatientUpdateWithoutAdministratorInput, PatientUncheckedUpdateWithoutAdministratorInput>
  }

  export type RoleUpdateOneRequiredWithoutAdministratorNestedInput = {
    create?: XOR<RoleCreateWithoutAdministratorInput, RoleUncheckedCreateWithoutAdministratorInput>
    connectOrCreate?: RoleCreateOrConnectWithoutAdministratorInput
    upsert?: RoleUpsertWithoutAdministratorInput
    connect?: RoleWhereUniqueInput
    update?: XOR<RoleUpdateWithoutAdministratorInput, RoleUncheckedUpdateWithoutAdministratorInput>
  }

  export type PatientCreateNestedOneWithoutAppointmentInput = {
    create?: XOR<PatientCreateWithoutAppointmentInput, PatientUncheckedCreateWithoutAppointmentInput>
    connectOrCreate?: PatientCreateOrConnectWithoutAppointmentInput
    connect?: PatientWhereUniqueInput
  }

  export type DoctorCreateNestedOneWithoutAppointmentInput = {
    create?: XOR<DoctorCreateWithoutAppointmentInput, DoctorUncheckedCreateWithoutAppointmentInput>
    connectOrCreate?: DoctorCreateOrConnectWithoutAppointmentInput
    connect?: DoctorWhereUniqueInput
  }

  export type RecepcionistCreateNestedOneWithoutAppointmentInput = {
    create?: XOR<RecepcionistCreateWithoutAppointmentInput, RecepcionistUncheckedCreateWithoutAppointmentInput>
    connectOrCreate?: RecepcionistCreateOrConnectWithoutAppointmentInput
    connect?: RecepcionistWhereUniqueInput
  }

  export type MedicalRecordCreateNestedManyWithoutAppointmentInput = {
    create?: XOR<Enumerable<MedicalRecordCreateWithoutAppointmentInput>, Enumerable<MedicalRecordUncheckedCreateWithoutAppointmentInput>>
    connectOrCreate?: Enumerable<MedicalRecordCreateOrConnectWithoutAppointmentInput>
    createMany?: MedicalRecordCreateManyAppointmentInputEnvelope
    connect?: Enumerable<MedicalRecordWhereUniqueInput>
  }

  export type MedicalRecordUncheckedCreateNestedManyWithoutAppointmentInput = {
    create?: XOR<Enumerable<MedicalRecordCreateWithoutAppointmentInput>, Enumerable<MedicalRecordUncheckedCreateWithoutAppointmentInput>>
    connectOrCreate?: Enumerable<MedicalRecordCreateOrConnectWithoutAppointmentInput>
    createMany?: MedicalRecordCreateManyAppointmentInputEnvelope
    connect?: Enumerable<MedicalRecordWhereUniqueInput>
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type PatientUpdateOneRequiredWithoutAppointmentNestedInput = {
    create?: XOR<PatientCreateWithoutAppointmentInput, PatientUncheckedCreateWithoutAppointmentInput>
    connectOrCreate?: PatientCreateOrConnectWithoutAppointmentInput
    upsert?: PatientUpsertWithoutAppointmentInput
    connect?: PatientWhereUniqueInput
    update?: XOR<PatientUpdateWithoutAppointmentInput, PatientUncheckedUpdateWithoutAppointmentInput>
  }

  export type DoctorUpdateOneRequiredWithoutAppointmentNestedInput = {
    create?: XOR<DoctorCreateWithoutAppointmentInput, DoctorUncheckedCreateWithoutAppointmentInput>
    connectOrCreate?: DoctorCreateOrConnectWithoutAppointmentInput
    upsert?: DoctorUpsertWithoutAppointmentInput
    connect?: DoctorWhereUniqueInput
    update?: XOR<DoctorUpdateWithoutAppointmentInput, DoctorUncheckedUpdateWithoutAppointmentInput>
  }

  export type RecepcionistUpdateOneRequiredWithoutAppointmentNestedInput = {
    create?: XOR<RecepcionistCreateWithoutAppointmentInput, RecepcionistUncheckedCreateWithoutAppointmentInput>
    connectOrCreate?: RecepcionistCreateOrConnectWithoutAppointmentInput
    upsert?: RecepcionistUpsertWithoutAppointmentInput
    connect?: RecepcionistWhereUniqueInput
    update?: XOR<RecepcionistUpdateWithoutAppointmentInput, RecepcionistUncheckedUpdateWithoutAppointmentInput>
  }

  export type MedicalRecordUpdateManyWithoutAppointmentNestedInput = {
    create?: XOR<Enumerable<MedicalRecordCreateWithoutAppointmentInput>, Enumerable<MedicalRecordUncheckedCreateWithoutAppointmentInput>>
    connectOrCreate?: Enumerable<MedicalRecordCreateOrConnectWithoutAppointmentInput>
    upsert?: Enumerable<MedicalRecordUpsertWithWhereUniqueWithoutAppointmentInput>
    createMany?: MedicalRecordCreateManyAppointmentInputEnvelope
    set?: Enumerable<MedicalRecordWhereUniqueInput>
    disconnect?: Enumerable<MedicalRecordWhereUniqueInput>
    delete?: Enumerable<MedicalRecordWhereUniqueInput>
    connect?: Enumerable<MedicalRecordWhereUniqueInput>
    update?: Enumerable<MedicalRecordUpdateWithWhereUniqueWithoutAppointmentInput>
    updateMany?: Enumerable<MedicalRecordUpdateManyWithWhereWithoutAppointmentInput>
    deleteMany?: Enumerable<MedicalRecordScalarWhereInput>
  }

  export type MedicalRecordUncheckedUpdateManyWithoutAppointmentNestedInput = {
    create?: XOR<Enumerable<MedicalRecordCreateWithoutAppointmentInput>, Enumerable<MedicalRecordUncheckedCreateWithoutAppointmentInput>>
    connectOrCreate?: Enumerable<MedicalRecordCreateOrConnectWithoutAppointmentInput>
    upsert?: Enumerable<MedicalRecordUpsertWithWhereUniqueWithoutAppointmentInput>
    createMany?: MedicalRecordCreateManyAppointmentInputEnvelope
    set?: Enumerable<MedicalRecordWhereUniqueInput>
    disconnect?: Enumerable<MedicalRecordWhereUniqueInput>
    delete?: Enumerable<MedicalRecordWhereUniqueInput>
    connect?: Enumerable<MedicalRecordWhereUniqueInput>
    update?: Enumerable<MedicalRecordUpdateWithWhereUniqueWithoutAppointmentInput>
    updateMany?: Enumerable<MedicalRecordUpdateManyWithWhereWithoutAppointmentInput>
    deleteMany?: Enumerable<MedicalRecordScalarWhereInput>
  }

  export type AppointmentCreateNestedManyWithoutDoctorInput = {
    create?: XOR<Enumerable<AppointmentCreateWithoutDoctorInput>, Enumerable<AppointmentUncheckedCreateWithoutDoctorInput>>
    connectOrCreate?: Enumerable<AppointmentCreateOrConnectWithoutDoctorInput>
    createMany?: AppointmentCreateManyDoctorInputEnvelope
    connect?: Enumerable<AppointmentWhereUniqueInput>
  }

  export type PatientCreateNestedOneWithoutDoctorInput = {
    create?: XOR<PatientCreateWithoutDoctorInput, PatientUncheckedCreateWithoutDoctorInput>
    connectOrCreate?: PatientCreateOrConnectWithoutDoctorInput
    connect?: PatientWhereUniqueInput
  }

  export type RoleCreateNestedOneWithoutDoctorInput = {
    create?: XOR<RoleCreateWithoutDoctorInput, RoleUncheckedCreateWithoutDoctorInput>
    connectOrCreate?: RoleCreateOrConnectWithoutDoctorInput
    connect?: RoleWhereUniqueInput
  }

  export type AppointmentUncheckedCreateNestedManyWithoutDoctorInput = {
    create?: XOR<Enumerable<AppointmentCreateWithoutDoctorInput>, Enumerable<AppointmentUncheckedCreateWithoutDoctorInput>>
    connectOrCreate?: Enumerable<AppointmentCreateOrConnectWithoutDoctorInput>
    createMany?: AppointmentCreateManyDoctorInputEnvelope
    connect?: Enumerable<AppointmentWhereUniqueInput>
  }

  export type AppointmentUpdateManyWithoutDoctorNestedInput = {
    create?: XOR<Enumerable<AppointmentCreateWithoutDoctorInput>, Enumerable<AppointmentUncheckedCreateWithoutDoctorInput>>
    connectOrCreate?: Enumerable<AppointmentCreateOrConnectWithoutDoctorInput>
    upsert?: Enumerable<AppointmentUpsertWithWhereUniqueWithoutDoctorInput>
    createMany?: AppointmentCreateManyDoctorInputEnvelope
    set?: Enumerable<AppointmentWhereUniqueInput>
    disconnect?: Enumerable<AppointmentWhereUniqueInput>
    delete?: Enumerable<AppointmentWhereUniqueInput>
    connect?: Enumerable<AppointmentWhereUniqueInput>
    update?: Enumerable<AppointmentUpdateWithWhereUniqueWithoutDoctorInput>
    updateMany?: Enumerable<AppointmentUpdateManyWithWhereWithoutDoctorInput>
    deleteMany?: Enumerable<AppointmentScalarWhereInput>
  }

  export type PatientUpdateOneRequiredWithoutDoctorNestedInput = {
    create?: XOR<PatientCreateWithoutDoctorInput, PatientUncheckedCreateWithoutDoctorInput>
    connectOrCreate?: PatientCreateOrConnectWithoutDoctorInput
    upsert?: PatientUpsertWithoutDoctorInput
    connect?: PatientWhereUniqueInput
    update?: XOR<PatientUpdateWithoutDoctorInput, PatientUncheckedUpdateWithoutDoctorInput>
  }

  export type RoleUpdateOneRequiredWithoutDoctorNestedInput = {
    create?: XOR<RoleCreateWithoutDoctorInput, RoleUncheckedCreateWithoutDoctorInput>
    connectOrCreate?: RoleCreateOrConnectWithoutDoctorInput
    upsert?: RoleUpsertWithoutDoctorInput
    connect?: RoleWhereUniqueInput
    update?: XOR<RoleUpdateWithoutDoctorInput, RoleUncheckedUpdateWithoutDoctorInput>
  }

  export type AppointmentUncheckedUpdateManyWithoutDoctorNestedInput = {
    create?: XOR<Enumerable<AppointmentCreateWithoutDoctorInput>, Enumerable<AppointmentUncheckedCreateWithoutDoctorInput>>
    connectOrCreate?: Enumerable<AppointmentCreateOrConnectWithoutDoctorInput>
    upsert?: Enumerable<AppointmentUpsertWithWhereUniqueWithoutDoctorInput>
    createMany?: AppointmentCreateManyDoctorInputEnvelope
    set?: Enumerable<AppointmentWhereUniqueInput>
    disconnect?: Enumerable<AppointmentWhereUniqueInput>
    delete?: Enumerable<AppointmentWhereUniqueInput>
    connect?: Enumerable<AppointmentWhereUniqueInput>
    update?: Enumerable<AppointmentUpdateWithWhereUniqueWithoutDoctorInput>
    updateMany?: Enumerable<AppointmentUpdateManyWithWhereWithoutDoctorInput>
    deleteMany?: Enumerable<AppointmentScalarWhereInput>
  }

  export type PatientCreateNestedOneWithoutMedicalRecordInput = {
    create?: XOR<PatientCreateWithoutMedicalRecordInput, PatientUncheckedCreateWithoutMedicalRecordInput>
    connectOrCreate?: PatientCreateOrConnectWithoutMedicalRecordInput
    connect?: PatientWhereUniqueInput
  }

  export type AppointmentCreateNestedOneWithoutMedicalRecordInput = {
    create?: XOR<AppointmentCreateWithoutMedicalRecordInput, AppointmentUncheckedCreateWithoutMedicalRecordInput>
    connectOrCreate?: AppointmentCreateOrConnectWithoutMedicalRecordInput
    connect?: AppointmentWhereUniqueInput
  }

  export type PatientUpdateOneRequiredWithoutMedicalRecordNestedInput = {
    create?: XOR<PatientCreateWithoutMedicalRecordInput, PatientUncheckedCreateWithoutMedicalRecordInput>
    connectOrCreate?: PatientCreateOrConnectWithoutMedicalRecordInput
    upsert?: PatientUpsertWithoutMedicalRecordInput
    connect?: PatientWhereUniqueInput
    update?: XOR<PatientUpdateWithoutMedicalRecordInput, PatientUncheckedUpdateWithoutMedicalRecordInput>
  }

  export type AppointmentUpdateOneRequiredWithoutMedicalRecordNestedInput = {
    create?: XOR<AppointmentCreateWithoutMedicalRecordInput, AppointmentUncheckedCreateWithoutMedicalRecordInput>
    connectOrCreate?: AppointmentCreateOrConnectWithoutMedicalRecordInput
    upsert?: AppointmentUpsertWithoutMedicalRecordInput
    connect?: AppointmentWhereUniqueInput
    update?: XOR<AppointmentUpdateWithoutMedicalRecordInput, AppointmentUncheckedUpdateWithoutMedicalRecordInput>
  }

  export type AdministratorCreateNestedManyWithoutPatientInput = {
    create?: XOR<Enumerable<AdministratorCreateWithoutPatientInput>, Enumerable<AdministratorUncheckedCreateWithoutPatientInput>>
    connectOrCreate?: Enumerable<AdministratorCreateOrConnectWithoutPatientInput>
    createMany?: AdministratorCreateManyPatientInputEnvelope
    connect?: Enumerable<AdministratorWhereUniqueInput>
  }

  export type AppointmentCreateNestedManyWithoutPatientInput = {
    create?: XOR<Enumerable<AppointmentCreateWithoutPatientInput>, Enumerable<AppointmentUncheckedCreateWithoutPatientInput>>
    connectOrCreate?: Enumerable<AppointmentCreateOrConnectWithoutPatientInput>
    createMany?: AppointmentCreateManyPatientInputEnvelope
    connect?: Enumerable<AppointmentWhereUniqueInput>
  }

  export type DoctorCreateNestedManyWithoutPatientInput = {
    create?: XOR<Enumerable<DoctorCreateWithoutPatientInput>, Enumerable<DoctorUncheckedCreateWithoutPatientInput>>
    connectOrCreate?: Enumerable<DoctorCreateOrConnectWithoutPatientInput>
    createMany?: DoctorCreateManyPatientInputEnvelope
    connect?: Enumerable<DoctorWhereUniqueInput>
  }

  export type MedicalRecordCreateNestedManyWithoutPatientInput = {
    create?: XOR<Enumerable<MedicalRecordCreateWithoutPatientInput>, Enumerable<MedicalRecordUncheckedCreateWithoutPatientInput>>
    connectOrCreate?: Enumerable<MedicalRecordCreateOrConnectWithoutPatientInput>
    createMany?: MedicalRecordCreateManyPatientInputEnvelope
    connect?: Enumerable<MedicalRecordWhereUniqueInput>
  }

  export type AddressCreateNestedOneWithoutPatientInput = {
    create?: XOR<AddressCreateWithoutPatientInput, AddressUncheckedCreateWithoutPatientInput>
    connectOrCreate?: AddressCreateOrConnectWithoutPatientInput
    connect?: AddressWhereUniqueInput
  }

  export type RecepcionistCreateNestedManyWithoutPatientInput = {
    create?: XOR<Enumerable<RecepcionistCreateWithoutPatientInput>, Enumerable<RecepcionistUncheckedCreateWithoutPatientInput>>
    connectOrCreate?: Enumerable<RecepcionistCreateOrConnectWithoutPatientInput>
    createMany?: RecepcionistCreateManyPatientInputEnvelope
    connect?: Enumerable<RecepcionistWhereUniqueInput>
  }

  export type AdministratorUncheckedCreateNestedManyWithoutPatientInput = {
    create?: XOR<Enumerable<AdministratorCreateWithoutPatientInput>, Enumerable<AdministratorUncheckedCreateWithoutPatientInput>>
    connectOrCreate?: Enumerable<AdministratorCreateOrConnectWithoutPatientInput>
    createMany?: AdministratorCreateManyPatientInputEnvelope
    connect?: Enumerable<AdministratorWhereUniqueInput>
  }

  export type AppointmentUncheckedCreateNestedManyWithoutPatientInput = {
    create?: XOR<Enumerable<AppointmentCreateWithoutPatientInput>, Enumerable<AppointmentUncheckedCreateWithoutPatientInput>>
    connectOrCreate?: Enumerable<AppointmentCreateOrConnectWithoutPatientInput>
    createMany?: AppointmentCreateManyPatientInputEnvelope
    connect?: Enumerable<AppointmentWhereUniqueInput>
  }

  export type DoctorUncheckedCreateNestedManyWithoutPatientInput = {
    create?: XOR<Enumerable<DoctorCreateWithoutPatientInput>, Enumerable<DoctorUncheckedCreateWithoutPatientInput>>
    connectOrCreate?: Enumerable<DoctorCreateOrConnectWithoutPatientInput>
    createMany?: DoctorCreateManyPatientInputEnvelope
    connect?: Enumerable<DoctorWhereUniqueInput>
  }

  export type MedicalRecordUncheckedCreateNestedManyWithoutPatientInput = {
    create?: XOR<Enumerable<MedicalRecordCreateWithoutPatientInput>, Enumerable<MedicalRecordUncheckedCreateWithoutPatientInput>>
    connectOrCreate?: Enumerable<MedicalRecordCreateOrConnectWithoutPatientInput>
    createMany?: MedicalRecordCreateManyPatientInputEnvelope
    connect?: Enumerable<MedicalRecordWhereUniqueInput>
  }

  export type RecepcionistUncheckedCreateNestedManyWithoutPatientInput = {
    create?: XOR<Enumerable<RecepcionistCreateWithoutPatientInput>, Enumerable<RecepcionistUncheckedCreateWithoutPatientInput>>
    connectOrCreate?: Enumerable<RecepcionistCreateOrConnectWithoutPatientInput>
    createMany?: RecepcionistCreateManyPatientInputEnvelope
    connect?: Enumerable<RecepcionistWhereUniqueInput>
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type AdministratorUpdateManyWithoutPatientNestedInput = {
    create?: XOR<Enumerable<AdministratorCreateWithoutPatientInput>, Enumerable<AdministratorUncheckedCreateWithoutPatientInput>>
    connectOrCreate?: Enumerable<AdministratorCreateOrConnectWithoutPatientInput>
    upsert?: Enumerable<AdministratorUpsertWithWhereUniqueWithoutPatientInput>
    createMany?: AdministratorCreateManyPatientInputEnvelope
    set?: Enumerable<AdministratorWhereUniqueInput>
    disconnect?: Enumerable<AdministratorWhereUniqueInput>
    delete?: Enumerable<AdministratorWhereUniqueInput>
    connect?: Enumerable<AdministratorWhereUniqueInput>
    update?: Enumerable<AdministratorUpdateWithWhereUniqueWithoutPatientInput>
    updateMany?: Enumerable<AdministratorUpdateManyWithWhereWithoutPatientInput>
    deleteMany?: Enumerable<AdministratorScalarWhereInput>
  }

  export type AppointmentUpdateManyWithoutPatientNestedInput = {
    create?: XOR<Enumerable<AppointmentCreateWithoutPatientInput>, Enumerable<AppointmentUncheckedCreateWithoutPatientInput>>
    connectOrCreate?: Enumerable<AppointmentCreateOrConnectWithoutPatientInput>
    upsert?: Enumerable<AppointmentUpsertWithWhereUniqueWithoutPatientInput>
    createMany?: AppointmentCreateManyPatientInputEnvelope
    set?: Enumerable<AppointmentWhereUniqueInput>
    disconnect?: Enumerable<AppointmentWhereUniqueInput>
    delete?: Enumerable<AppointmentWhereUniqueInput>
    connect?: Enumerable<AppointmentWhereUniqueInput>
    update?: Enumerable<AppointmentUpdateWithWhereUniqueWithoutPatientInput>
    updateMany?: Enumerable<AppointmentUpdateManyWithWhereWithoutPatientInput>
    deleteMany?: Enumerable<AppointmentScalarWhereInput>
  }

  export type DoctorUpdateManyWithoutPatientNestedInput = {
    create?: XOR<Enumerable<DoctorCreateWithoutPatientInput>, Enumerable<DoctorUncheckedCreateWithoutPatientInput>>
    connectOrCreate?: Enumerable<DoctorCreateOrConnectWithoutPatientInput>
    upsert?: Enumerable<DoctorUpsertWithWhereUniqueWithoutPatientInput>
    createMany?: DoctorCreateManyPatientInputEnvelope
    set?: Enumerable<DoctorWhereUniqueInput>
    disconnect?: Enumerable<DoctorWhereUniqueInput>
    delete?: Enumerable<DoctorWhereUniqueInput>
    connect?: Enumerable<DoctorWhereUniqueInput>
    update?: Enumerable<DoctorUpdateWithWhereUniqueWithoutPatientInput>
    updateMany?: Enumerable<DoctorUpdateManyWithWhereWithoutPatientInput>
    deleteMany?: Enumerable<DoctorScalarWhereInput>
  }

  export type MedicalRecordUpdateManyWithoutPatientNestedInput = {
    create?: XOR<Enumerable<MedicalRecordCreateWithoutPatientInput>, Enumerable<MedicalRecordUncheckedCreateWithoutPatientInput>>
    connectOrCreate?: Enumerable<MedicalRecordCreateOrConnectWithoutPatientInput>
    upsert?: Enumerable<MedicalRecordUpsertWithWhereUniqueWithoutPatientInput>
    createMany?: MedicalRecordCreateManyPatientInputEnvelope
    set?: Enumerable<MedicalRecordWhereUniqueInput>
    disconnect?: Enumerable<MedicalRecordWhereUniqueInput>
    delete?: Enumerable<MedicalRecordWhereUniqueInput>
    connect?: Enumerable<MedicalRecordWhereUniqueInput>
    update?: Enumerable<MedicalRecordUpdateWithWhereUniqueWithoutPatientInput>
    updateMany?: Enumerable<MedicalRecordUpdateManyWithWhereWithoutPatientInput>
    deleteMany?: Enumerable<MedicalRecordScalarWhereInput>
  }

  export type AddressUpdateOneRequiredWithoutPatientNestedInput = {
    create?: XOR<AddressCreateWithoutPatientInput, AddressUncheckedCreateWithoutPatientInput>
    connectOrCreate?: AddressCreateOrConnectWithoutPatientInput
    upsert?: AddressUpsertWithoutPatientInput
    connect?: AddressWhereUniqueInput
    update?: XOR<AddressUpdateWithoutPatientInput, AddressUncheckedUpdateWithoutPatientInput>
  }

  export type RecepcionistUpdateManyWithoutPatientNestedInput = {
    create?: XOR<Enumerable<RecepcionistCreateWithoutPatientInput>, Enumerable<RecepcionistUncheckedCreateWithoutPatientInput>>
    connectOrCreate?: Enumerable<RecepcionistCreateOrConnectWithoutPatientInput>
    upsert?: Enumerable<RecepcionistUpsertWithWhereUniqueWithoutPatientInput>
    createMany?: RecepcionistCreateManyPatientInputEnvelope
    set?: Enumerable<RecepcionistWhereUniqueInput>
    disconnect?: Enumerable<RecepcionistWhereUniqueInput>
    delete?: Enumerable<RecepcionistWhereUniqueInput>
    connect?: Enumerable<RecepcionistWhereUniqueInput>
    update?: Enumerable<RecepcionistUpdateWithWhereUniqueWithoutPatientInput>
    updateMany?: Enumerable<RecepcionistUpdateManyWithWhereWithoutPatientInput>
    deleteMany?: Enumerable<RecepcionistScalarWhereInput>
  }

  export type AdministratorUncheckedUpdateManyWithoutPatientNestedInput = {
    create?: XOR<Enumerable<AdministratorCreateWithoutPatientInput>, Enumerable<AdministratorUncheckedCreateWithoutPatientInput>>
    connectOrCreate?: Enumerable<AdministratorCreateOrConnectWithoutPatientInput>
    upsert?: Enumerable<AdministratorUpsertWithWhereUniqueWithoutPatientInput>
    createMany?: AdministratorCreateManyPatientInputEnvelope
    set?: Enumerable<AdministratorWhereUniqueInput>
    disconnect?: Enumerable<AdministratorWhereUniqueInput>
    delete?: Enumerable<AdministratorWhereUniqueInput>
    connect?: Enumerable<AdministratorWhereUniqueInput>
    update?: Enumerable<AdministratorUpdateWithWhereUniqueWithoutPatientInput>
    updateMany?: Enumerable<AdministratorUpdateManyWithWhereWithoutPatientInput>
    deleteMany?: Enumerable<AdministratorScalarWhereInput>
  }

  export type AppointmentUncheckedUpdateManyWithoutPatientNestedInput = {
    create?: XOR<Enumerable<AppointmentCreateWithoutPatientInput>, Enumerable<AppointmentUncheckedCreateWithoutPatientInput>>
    connectOrCreate?: Enumerable<AppointmentCreateOrConnectWithoutPatientInput>
    upsert?: Enumerable<AppointmentUpsertWithWhereUniqueWithoutPatientInput>
    createMany?: AppointmentCreateManyPatientInputEnvelope
    set?: Enumerable<AppointmentWhereUniqueInput>
    disconnect?: Enumerable<AppointmentWhereUniqueInput>
    delete?: Enumerable<AppointmentWhereUniqueInput>
    connect?: Enumerable<AppointmentWhereUniqueInput>
    update?: Enumerable<AppointmentUpdateWithWhereUniqueWithoutPatientInput>
    updateMany?: Enumerable<AppointmentUpdateManyWithWhereWithoutPatientInput>
    deleteMany?: Enumerable<AppointmentScalarWhereInput>
  }

  export type DoctorUncheckedUpdateManyWithoutPatientNestedInput = {
    create?: XOR<Enumerable<DoctorCreateWithoutPatientInput>, Enumerable<DoctorUncheckedCreateWithoutPatientInput>>
    connectOrCreate?: Enumerable<DoctorCreateOrConnectWithoutPatientInput>
    upsert?: Enumerable<DoctorUpsertWithWhereUniqueWithoutPatientInput>
    createMany?: DoctorCreateManyPatientInputEnvelope
    set?: Enumerable<DoctorWhereUniqueInput>
    disconnect?: Enumerable<DoctorWhereUniqueInput>
    delete?: Enumerable<DoctorWhereUniqueInput>
    connect?: Enumerable<DoctorWhereUniqueInput>
    update?: Enumerable<DoctorUpdateWithWhereUniqueWithoutPatientInput>
    updateMany?: Enumerable<DoctorUpdateManyWithWhereWithoutPatientInput>
    deleteMany?: Enumerable<DoctorScalarWhereInput>
  }

  export type MedicalRecordUncheckedUpdateManyWithoutPatientNestedInput = {
    create?: XOR<Enumerable<MedicalRecordCreateWithoutPatientInput>, Enumerable<MedicalRecordUncheckedCreateWithoutPatientInput>>
    connectOrCreate?: Enumerable<MedicalRecordCreateOrConnectWithoutPatientInput>
    upsert?: Enumerable<MedicalRecordUpsertWithWhereUniqueWithoutPatientInput>
    createMany?: MedicalRecordCreateManyPatientInputEnvelope
    set?: Enumerable<MedicalRecordWhereUniqueInput>
    disconnect?: Enumerable<MedicalRecordWhereUniqueInput>
    delete?: Enumerable<MedicalRecordWhereUniqueInput>
    connect?: Enumerable<MedicalRecordWhereUniqueInput>
    update?: Enumerable<MedicalRecordUpdateWithWhereUniqueWithoutPatientInput>
    updateMany?: Enumerable<MedicalRecordUpdateManyWithWhereWithoutPatientInput>
    deleteMany?: Enumerable<MedicalRecordScalarWhereInput>
  }

  export type RecepcionistUncheckedUpdateManyWithoutPatientNestedInput = {
    create?: XOR<Enumerable<RecepcionistCreateWithoutPatientInput>, Enumerable<RecepcionistUncheckedCreateWithoutPatientInput>>
    connectOrCreate?: Enumerable<RecepcionistCreateOrConnectWithoutPatientInput>
    upsert?: Enumerable<RecepcionistUpsertWithWhereUniqueWithoutPatientInput>
    createMany?: RecepcionistCreateManyPatientInputEnvelope
    set?: Enumerable<RecepcionistWhereUniqueInput>
    disconnect?: Enumerable<RecepcionistWhereUniqueInput>
    delete?: Enumerable<RecepcionistWhereUniqueInput>
    connect?: Enumerable<RecepcionistWhereUniqueInput>
    update?: Enumerable<RecepcionistUpdateWithWhereUniqueWithoutPatientInput>
    updateMany?: Enumerable<RecepcionistUpdateManyWithWhereWithoutPatientInput>
    deleteMany?: Enumerable<RecepcionistScalarWhereInput>
  }

  export type AppointmentCreateNestedManyWithoutRecepcionistInput = {
    create?: XOR<Enumerable<AppointmentCreateWithoutRecepcionistInput>, Enumerable<AppointmentUncheckedCreateWithoutRecepcionistInput>>
    connectOrCreate?: Enumerable<AppointmentCreateOrConnectWithoutRecepcionistInput>
    createMany?: AppointmentCreateManyRecepcionistInputEnvelope
    connect?: Enumerable<AppointmentWhereUniqueInput>
  }

  export type PatientCreateNestedOneWithoutRecepcionistInput = {
    create?: XOR<PatientCreateWithoutRecepcionistInput, PatientUncheckedCreateWithoutRecepcionistInput>
    connectOrCreate?: PatientCreateOrConnectWithoutRecepcionistInput
    connect?: PatientWhereUniqueInput
  }

  export type RoleCreateNestedOneWithoutRecepcionistInput = {
    create?: XOR<RoleCreateWithoutRecepcionistInput, RoleUncheckedCreateWithoutRecepcionistInput>
    connectOrCreate?: RoleCreateOrConnectWithoutRecepcionistInput
    connect?: RoleWhereUniqueInput
  }

  export type AppointmentUncheckedCreateNestedManyWithoutRecepcionistInput = {
    create?: XOR<Enumerable<AppointmentCreateWithoutRecepcionistInput>, Enumerable<AppointmentUncheckedCreateWithoutRecepcionistInput>>
    connectOrCreate?: Enumerable<AppointmentCreateOrConnectWithoutRecepcionistInput>
    createMany?: AppointmentCreateManyRecepcionistInputEnvelope
    connect?: Enumerable<AppointmentWhereUniqueInput>
  }

  export type AppointmentUpdateManyWithoutRecepcionistNestedInput = {
    create?: XOR<Enumerable<AppointmentCreateWithoutRecepcionistInput>, Enumerable<AppointmentUncheckedCreateWithoutRecepcionistInput>>
    connectOrCreate?: Enumerable<AppointmentCreateOrConnectWithoutRecepcionistInput>
    upsert?: Enumerable<AppointmentUpsertWithWhereUniqueWithoutRecepcionistInput>
    createMany?: AppointmentCreateManyRecepcionistInputEnvelope
    set?: Enumerable<AppointmentWhereUniqueInput>
    disconnect?: Enumerable<AppointmentWhereUniqueInput>
    delete?: Enumerable<AppointmentWhereUniqueInput>
    connect?: Enumerable<AppointmentWhereUniqueInput>
    update?: Enumerable<AppointmentUpdateWithWhereUniqueWithoutRecepcionistInput>
    updateMany?: Enumerable<AppointmentUpdateManyWithWhereWithoutRecepcionistInput>
    deleteMany?: Enumerable<AppointmentScalarWhereInput>
  }

  export type PatientUpdateOneRequiredWithoutRecepcionistNestedInput = {
    create?: XOR<PatientCreateWithoutRecepcionistInput, PatientUncheckedCreateWithoutRecepcionistInput>
    connectOrCreate?: PatientCreateOrConnectWithoutRecepcionistInput
    upsert?: PatientUpsertWithoutRecepcionistInput
    connect?: PatientWhereUniqueInput
    update?: XOR<PatientUpdateWithoutRecepcionistInput, PatientUncheckedUpdateWithoutRecepcionistInput>
  }

  export type RoleUpdateOneRequiredWithoutRecepcionistNestedInput = {
    create?: XOR<RoleCreateWithoutRecepcionistInput, RoleUncheckedCreateWithoutRecepcionistInput>
    connectOrCreate?: RoleCreateOrConnectWithoutRecepcionistInput
    upsert?: RoleUpsertWithoutRecepcionistInput
    connect?: RoleWhereUniqueInput
    update?: XOR<RoleUpdateWithoutRecepcionistInput, RoleUncheckedUpdateWithoutRecepcionistInput>
  }

  export type AppointmentUncheckedUpdateManyWithoutRecepcionistNestedInput = {
    create?: XOR<Enumerable<AppointmentCreateWithoutRecepcionistInput>, Enumerable<AppointmentUncheckedCreateWithoutRecepcionistInput>>
    connectOrCreate?: Enumerable<AppointmentCreateOrConnectWithoutRecepcionistInput>
    upsert?: Enumerable<AppointmentUpsertWithWhereUniqueWithoutRecepcionistInput>
    createMany?: AppointmentCreateManyRecepcionistInputEnvelope
    set?: Enumerable<AppointmentWhereUniqueInput>
    disconnect?: Enumerable<AppointmentWhereUniqueInput>
    delete?: Enumerable<AppointmentWhereUniqueInput>
    connect?: Enumerable<AppointmentWhereUniqueInput>
    update?: Enumerable<AppointmentUpdateWithWhereUniqueWithoutRecepcionistInput>
    updateMany?: Enumerable<AppointmentUpdateManyWithWhereWithoutRecepcionistInput>
    deleteMany?: Enumerable<AppointmentScalarWhereInput>
  }

  export type AdministratorCreateNestedManyWithoutRoleInput = {
    create?: XOR<Enumerable<AdministratorCreateWithoutRoleInput>, Enumerable<AdministratorUncheckedCreateWithoutRoleInput>>
    connectOrCreate?: Enumerable<AdministratorCreateOrConnectWithoutRoleInput>
    createMany?: AdministratorCreateManyRoleInputEnvelope
    connect?: Enumerable<AdministratorWhereUniqueInput>
  }

  export type DoctorCreateNestedManyWithoutRoleInput = {
    create?: XOR<Enumerable<DoctorCreateWithoutRoleInput>, Enumerable<DoctorUncheckedCreateWithoutRoleInput>>
    connectOrCreate?: Enumerable<DoctorCreateOrConnectWithoutRoleInput>
    createMany?: DoctorCreateManyRoleInputEnvelope
    connect?: Enumerable<DoctorWhereUniqueInput>
  }

  export type RecepcionistCreateNestedManyWithoutRoleInput = {
    create?: XOR<Enumerable<RecepcionistCreateWithoutRoleInput>, Enumerable<RecepcionistUncheckedCreateWithoutRoleInput>>
    connectOrCreate?: Enumerable<RecepcionistCreateOrConnectWithoutRoleInput>
    createMany?: RecepcionistCreateManyRoleInputEnvelope
    connect?: Enumerable<RecepcionistWhereUniqueInput>
  }

  export type AdministratorUncheckedCreateNestedManyWithoutRoleInput = {
    create?: XOR<Enumerable<AdministratorCreateWithoutRoleInput>, Enumerable<AdministratorUncheckedCreateWithoutRoleInput>>
    connectOrCreate?: Enumerable<AdministratorCreateOrConnectWithoutRoleInput>
    createMany?: AdministratorCreateManyRoleInputEnvelope
    connect?: Enumerable<AdministratorWhereUniqueInput>
  }

  export type DoctorUncheckedCreateNestedManyWithoutRoleInput = {
    create?: XOR<Enumerable<DoctorCreateWithoutRoleInput>, Enumerable<DoctorUncheckedCreateWithoutRoleInput>>
    connectOrCreate?: Enumerable<DoctorCreateOrConnectWithoutRoleInput>
    createMany?: DoctorCreateManyRoleInputEnvelope
    connect?: Enumerable<DoctorWhereUniqueInput>
  }

  export type RecepcionistUncheckedCreateNestedManyWithoutRoleInput = {
    create?: XOR<Enumerable<RecepcionistCreateWithoutRoleInput>, Enumerable<RecepcionistUncheckedCreateWithoutRoleInput>>
    connectOrCreate?: Enumerable<RecepcionistCreateOrConnectWithoutRoleInput>
    createMany?: RecepcionistCreateManyRoleInputEnvelope
    connect?: Enumerable<RecepcionistWhereUniqueInput>
  }

  export type AdministratorUpdateManyWithoutRoleNestedInput = {
    create?: XOR<Enumerable<AdministratorCreateWithoutRoleInput>, Enumerable<AdministratorUncheckedCreateWithoutRoleInput>>
    connectOrCreate?: Enumerable<AdministratorCreateOrConnectWithoutRoleInput>
    upsert?: Enumerable<AdministratorUpsertWithWhereUniqueWithoutRoleInput>
    createMany?: AdministratorCreateManyRoleInputEnvelope
    set?: Enumerable<AdministratorWhereUniqueInput>
    disconnect?: Enumerable<AdministratorWhereUniqueInput>
    delete?: Enumerable<AdministratorWhereUniqueInput>
    connect?: Enumerable<AdministratorWhereUniqueInput>
    update?: Enumerable<AdministratorUpdateWithWhereUniqueWithoutRoleInput>
    updateMany?: Enumerable<AdministratorUpdateManyWithWhereWithoutRoleInput>
    deleteMany?: Enumerable<AdministratorScalarWhereInput>
  }

  export type DoctorUpdateManyWithoutRoleNestedInput = {
    create?: XOR<Enumerable<DoctorCreateWithoutRoleInput>, Enumerable<DoctorUncheckedCreateWithoutRoleInput>>
    connectOrCreate?: Enumerable<DoctorCreateOrConnectWithoutRoleInput>
    upsert?: Enumerable<DoctorUpsertWithWhereUniqueWithoutRoleInput>
    createMany?: DoctorCreateManyRoleInputEnvelope
    set?: Enumerable<DoctorWhereUniqueInput>
    disconnect?: Enumerable<DoctorWhereUniqueInput>
    delete?: Enumerable<DoctorWhereUniqueInput>
    connect?: Enumerable<DoctorWhereUniqueInput>
    update?: Enumerable<DoctorUpdateWithWhereUniqueWithoutRoleInput>
    updateMany?: Enumerable<DoctorUpdateManyWithWhereWithoutRoleInput>
    deleteMany?: Enumerable<DoctorScalarWhereInput>
  }

  export type RecepcionistUpdateManyWithoutRoleNestedInput = {
    create?: XOR<Enumerable<RecepcionistCreateWithoutRoleInput>, Enumerable<RecepcionistUncheckedCreateWithoutRoleInput>>
    connectOrCreate?: Enumerable<RecepcionistCreateOrConnectWithoutRoleInput>
    upsert?: Enumerable<RecepcionistUpsertWithWhereUniqueWithoutRoleInput>
    createMany?: RecepcionistCreateManyRoleInputEnvelope
    set?: Enumerable<RecepcionistWhereUniqueInput>
    disconnect?: Enumerable<RecepcionistWhereUniqueInput>
    delete?: Enumerable<RecepcionistWhereUniqueInput>
    connect?: Enumerable<RecepcionistWhereUniqueInput>
    update?: Enumerable<RecepcionistUpdateWithWhereUniqueWithoutRoleInput>
    updateMany?: Enumerable<RecepcionistUpdateManyWithWhereWithoutRoleInput>
    deleteMany?: Enumerable<RecepcionistScalarWhereInput>
  }

  export type AdministratorUncheckedUpdateManyWithoutRoleNestedInput = {
    create?: XOR<Enumerable<AdministratorCreateWithoutRoleInput>, Enumerable<AdministratorUncheckedCreateWithoutRoleInput>>
    connectOrCreate?: Enumerable<AdministratorCreateOrConnectWithoutRoleInput>
    upsert?: Enumerable<AdministratorUpsertWithWhereUniqueWithoutRoleInput>
    createMany?: AdministratorCreateManyRoleInputEnvelope
    set?: Enumerable<AdministratorWhereUniqueInput>
    disconnect?: Enumerable<AdministratorWhereUniqueInput>
    delete?: Enumerable<AdministratorWhereUniqueInput>
    connect?: Enumerable<AdministratorWhereUniqueInput>
    update?: Enumerable<AdministratorUpdateWithWhereUniqueWithoutRoleInput>
    updateMany?: Enumerable<AdministratorUpdateManyWithWhereWithoutRoleInput>
    deleteMany?: Enumerable<AdministratorScalarWhereInput>
  }

  export type DoctorUncheckedUpdateManyWithoutRoleNestedInput = {
    create?: XOR<Enumerable<DoctorCreateWithoutRoleInput>, Enumerable<DoctorUncheckedCreateWithoutRoleInput>>
    connectOrCreate?: Enumerable<DoctorCreateOrConnectWithoutRoleInput>
    upsert?: Enumerable<DoctorUpsertWithWhereUniqueWithoutRoleInput>
    createMany?: DoctorCreateManyRoleInputEnvelope
    set?: Enumerable<DoctorWhereUniqueInput>
    disconnect?: Enumerable<DoctorWhereUniqueInput>
    delete?: Enumerable<DoctorWhereUniqueInput>
    connect?: Enumerable<DoctorWhereUniqueInput>
    update?: Enumerable<DoctorUpdateWithWhereUniqueWithoutRoleInput>
    updateMany?: Enumerable<DoctorUpdateManyWithWhereWithoutRoleInput>
    deleteMany?: Enumerable<DoctorScalarWhereInput>
  }

  export type RecepcionistUncheckedUpdateManyWithoutRoleNestedInput = {
    create?: XOR<Enumerable<RecepcionistCreateWithoutRoleInput>, Enumerable<RecepcionistUncheckedCreateWithoutRoleInput>>
    connectOrCreate?: Enumerable<RecepcionistCreateOrConnectWithoutRoleInput>
    upsert?: Enumerable<RecepcionistUpsertWithWhereUniqueWithoutRoleInput>
    createMany?: RecepcionistCreateManyRoleInputEnvelope
    set?: Enumerable<RecepcionistWhereUniqueInput>
    disconnect?: Enumerable<RecepcionistWhereUniqueInput>
    delete?: Enumerable<RecepcionistWhereUniqueInput>
    connect?: Enumerable<RecepcionistWhereUniqueInput>
    update?: Enumerable<RecepcionistUpdateWithWhereUniqueWithoutRoleInput>
    updateMany?: Enumerable<RecepcionistUpdateManyWithWhereWithoutRoleInput>
    deleteMany?: Enumerable<RecepcionistScalarWhereInput>
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string> | Date | string
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string> | Date | string
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | number | null
    notIn?: Enumerable<number> | number | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type PatientCreateWithoutAddressInput = {
    name: string
    birthdate: Date | string
    gender: string
    cpf: string
    rg?: string | null
    mother: string
    father: string
    email: string
    phone: string
    createdAt?: Date | string
    Administrator?: AdministratorCreateNestedManyWithoutPatientInput
    Appointment?: AppointmentCreateNestedManyWithoutPatientInput
    Doctor?: DoctorCreateNestedManyWithoutPatientInput
    MedicalRecord?: MedicalRecordCreateNestedManyWithoutPatientInput
    Recepcionist?: RecepcionistCreateNestedManyWithoutPatientInput
  }

  export type PatientUncheckedCreateWithoutAddressInput = {
    id?: number
    name: string
    birthdate: Date | string
    gender: string
    cpf: string
    rg?: string | null
    mother: string
    father: string
    email: string
    phone: string
    createdAt?: Date | string
    Administrator?: AdministratorUncheckedCreateNestedManyWithoutPatientInput
    Appointment?: AppointmentUncheckedCreateNestedManyWithoutPatientInput
    Doctor?: DoctorUncheckedCreateNestedManyWithoutPatientInput
    MedicalRecord?: MedicalRecordUncheckedCreateNestedManyWithoutPatientInput
    Recepcionist?: RecepcionistUncheckedCreateNestedManyWithoutPatientInput
  }

  export type PatientCreateOrConnectWithoutAddressInput = {
    where: PatientWhereUniqueInput
    create: XOR<PatientCreateWithoutAddressInput, PatientUncheckedCreateWithoutAddressInput>
  }

  export type PatientCreateManyAddressInputEnvelope = {
    data: Enumerable<PatientCreateManyAddressInput>
    skipDuplicates?: boolean
  }

  export type PatientUpsertWithWhereUniqueWithoutAddressInput = {
    where: PatientWhereUniqueInput
    update: XOR<PatientUpdateWithoutAddressInput, PatientUncheckedUpdateWithoutAddressInput>
    create: XOR<PatientCreateWithoutAddressInput, PatientUncheckedCreateWithoutAddressInput>
  }

  export type PatientUpdateWithWhereUniqueWithoutAddressInput = {
    where: PatientWhereUniqueInput
    data: XOR<PatientUpdateWithoutAddressInput, PatientUncheckedUpdateWithoutAddressInput>
  }

  export type PatientUpdateManyWithWhereWithoutAddressInput = {
    where: PatientScalarWhereInput
    data: XOR<PatientUpdateManyMutationInput, PatientUncheckedUpdateManyWithoutPatientInput>
  }

  export type PatientScalarWhereInput = {
    AND?: Enumerable<PatientScalarWhereInput>
    OR?: Enumerable<PatientScalarWhereInput>
    NOT?: Enumerable<PatientScalarWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    birthdate?: DateTimeFilter | Date | string
    gender?: StringFilter | string
    cpf?: StringFilter | string
    rg?: StringNullableFilter | string | null
    mother?: StringFilter | string
    father?: StringFilter | string
    email?: StringFilter | string
    phone?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    addressId?: IntFilter | number
  }

  export type PatientCreateWithoutAdministratorInput = {
    name: string
    birthdate: Date | string
    gender: string
    cpf: string
    rg?: string | null
    mother: string
    father: string
    email: string
    phone: string
    createdAt?: Date | string
    Appointment?: AppointmentCreateNestedManyWithoutPatientInput
    Doctor?: DoctorCreateNestedManyWithoutPatientInput
    MedicalRecord?: MedicalRecordCreateNestedManyWithoutPatientInput
    Address: AddressCreateNestedOneWithoutPatientInput
    Recepcionist?: RecepcionistCreateNestedManyWithoutPatientInput
  }

  export type PatientUncheckedCreateWithoutAdministratorInput = {
    id?: number
    name: string
    birthdate: Date | string
    gender: string
    cpf: string
    rg?: string | null
    mother: string
    father: string
    email: string
    phone: string
    createdAt?: Date | string
    addressId: number
    Appointment?: AppointmentUncheckedCreateNestedManyWithoutPatientInput
    Doctor?: DoctorUncheckedCreateNestedManyWithoutPatientInput
    MedicalRecord?: MedicalRecordUncheckedCreateNestedManyWithoutPatientInput
    Recepcionist?: RecepcionistUncheckedCreateNestedManyWithoutPatientInput
  }

  export type PatientCreateOrConnectWithoutAdministratorInput = {
    where: PatientWhereUniqueInput
    create: XOR<PatientCreateWithoutAdministratorInput, PatientUncheckedCreateWithoutAdministratorInput>
  }

  export type RoleCreateWithoutAdministratorInput = {
    name: string
    accessLevel: number
    Doctor?: DoctorCreateNestedManyWithoutRoleInput
    Recepcionist?: RecepcionistCreateNestedManyWithoutRoleInput
  }

  export type RoleUncheckedCreateWithoutAdministratorInput = {
    id?: number
    name: string
    accessLevel: number
    Doctor?: DoctorUncheckedCreateNestedManyWithoutRoleInput
    Recepcionist?: RecepcionistUncheckedCreateNestedManyWithoutRoleInput
  }

  export type RoleCreateOrConnectWithoutAdministratorInput = {
    where: RoleWhereUniqueInput
    create: XOR<RoleCreateWithoutAdministratorInput, RoleUncheckedCreateWithoutAdministratorInput>
  }

  export type PatientUpsertWithoutAdministratorInput = {
    update: XOR<PatientUpdateWithoutAdministratorInput, PatientUncheckedUpdateWithoutAdministratorInput>
    create: XOR<PatientCreateWithoutAdministratorInput, PatientUncheckedCreateWithoutAdministratorInput>
  }

  export type PatientUpdateWithoutAdministratorInput = {
    name?: StringFieldUpdateOperationsInput | string
    birthdate?: DateTimeFieldUpdateOperationsInput | Date | string
    gender?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    rg?: NullableStringFieldUpdateOperationsInput | string | null
    mother?: StringFieldUpdateOperationsInput | string
    father?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Appointment?: AppointmentUpdateManyWithoutPatientNestedInput
    Doctor?: DoctorUpdateManyWithoutPatientNestedInput
    MedicalRecord?: MedicalRecordUpdateManyWithoutPatientNestedInput
    Address?: AddressUpdateOneRequiredWithoutPatientNestedInput
    Recepcionist?: RecepcionistUpdateManyWithoutPatientNestedInput
  }

  export type PatientUncheckedUpdateWithoutAdministratorInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    birthdate?: DateTimeFieldUpdateOperationsInput | Date | string
    gender?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    rg?: NullableStringFieldUpdateOperationsInput | string | null
    mother?: StringFieldUpdateOperationsInput | string
    father?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    addressId?: IntFieldUpdateOperationsInput | number
    Appointment?: AppointmentUncheckedUpdateManyWithoutPatientNestedInput
    Doctor?: DoctorUncheckedUpdateManyWithoutPatientNestedInput
    MedicalRecord?: MedicalRecordUncheckedUpdateManyWithoutPatientNestedInput
    Recepcionist?: RecepcionistUncheckedUpdateManyWithoutPatientNestedInput
  }

  export type RoleUpsertWithoutAdministratorInput = {
    update: XOR<RoleUpdateWithoutAdministratorInput, RoleUncheckedUpdateWithoutAdministratorInput>
    create: XOR<RoleCreateWithoutAdministratorInput, RoleUncheckedCreateWithoutAdministratorInput>
  }

  export type RoleUpdateWithoutAdministratorInput = {
    name?: StringFieldUpdateOperationsInput | string
    accessLevel?: IntFieldUpdateOperationsInput | number
    Doctor?: DoctorUpdateManyWithoutRoleNestedInput
    Recepcionist?: RecepcionistUpdateManyWithoutRoleNestedInput
  }

  export type RoleUncheckedUpdateWithoutAdministratorInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    accessLevel?: IntFieldUpdateOperationsInput | number
    Doctor?: DoctorUncheckedUpdateManyWithoutRoleNestedInput
    Recepcionist?: RecepcionistUncheckedUpdateManyWithoutRoleNestedInput
  }

  export type PatientCreateWithoutAppointmentInput = {
    name: string
    birthdate: Date | string
    gender: string
    cpf: string
    rg?: string | null
    mother: string
    father: string
    email: string
    phone: string
    createdAt?: Date | string
    Administrator?: AdministratorCreateNestedManyWithoutPatientInput
    Doctor?: DoctorCreateNestedManyWithoutPatientInput
    MedicalRecord?: MedicalRecordCreateNestedManyWithoutPatientInput
    Address: AddressCreateNestedOneWithoutPatientInput
    Recepcionist?: RecepcionistCreateNestedManyWithoutPatientInput
  }

  export type PatientUncheckedCreateWithoutAppointmentInput = {
    id?: number
    name: string
    birthdate: Date | string
    gender: string
    cpf: string
    rg?: string | null
    mother: string
    father: string
    email: string
    phone: string
    createdAt?: Date | string
    addressId: number
    Administrator?: AdministratorUncheckedCreateNestedManyWithoutPatientInput
    Doctor?: DoctorUncheckedCreateNestedManyWithoutPatientInput
    MedicalRecord?: MedicalRecordUncheckedCreateNestedManyWithoutPatientInput
    Recepcionist?: RecepcionistUncheckedCreateNestedManyWithoutPatientInput
  }

  export type PatientCreateOrConnectWithoutAppointmentInput = {
    where: PatientWhereUniqueInput
    create: XOR<PatientCreateWithoutAppointmentInput, PatientUncheckedCreateWithoutAppointmentInput>
  }

  export type DoctorCreateWithoutAppointmentInput = {
    crm: string
    speciality: string
    password: string
    Patient: PatientCreateNestedOneWithoutDoctorInput
    Role: RoleCreateNestedOneWithoutDoctorInput
  }

  export type DoctorUncheckedCreateWithoutAppointmentInput = {
    id?: number
    patientId: number
    crm: string
    speciality: string
    password: string
    roleId: number
  }

  export type DoctorCreateOrConnectWithoutAppointmentInput = {
    where: DoctorWhereUniqueInput
    create: XOR<DoctorCreateWithoutAppointmentInput, DoctorUncheckedCreateWithoutAppointmentInput>
  }

  export type RecepcionistCreateWithoutAppointmentInput = {
    password: string
    Patient: PatientCreateNestedOneWithoutRecepcionistInput
    Role: RoleCreateNestedOneWithoutRecepcionistInput
  }

  export type RecepcionistUncheckedCreateWithoutAppointmentInput = {
    id?: number
    patientId: number
    password: string
    roleId: number
  }

  export type RecepcionistCreateOrConnectWithoutAppointmentInput = {
    where: RecepcionistWhereUniqueInput
    create: XOR<RecepcionistCreateWithoutAppointmentInput, RecepcionistUncheckedCreateWithoutAppointmentInput>
  }

  export type MedicalRecordCreateWithoutAppointmentInput = {
    Patient: PatientCreateNestedOneWithoutMedicalRecordInput
  }

  export type MedicalRecordUncheckedCreateWithoutAppointmentInput = {
    id?: number
    patientId: number
  }

  export type MedicalRecordCreateOrConnectWithoutAppointmentInput = {
    where: MedicalRecordWhereUniqueInput
    create: XOR<MedicalRecordCreateWithoutAppointmentInput, MedicalRecordUncheckedCreateWithoutAppointmentInput>
  }

  export type MedicalRecordCreateManyAppointmentInputEnvelope = {
    data: Enumerable<MedicalRecordCreateManyAppointmentInput>
    skipDuplicates?: boolean
  }

  export type PatientUpsertWithoutAppointmentInput = {
    update: XOR<PatientUpdateWithoutAppointmentInput, PatientUncheckedUpdateWithoutAppointmentInput>
    create: XOR<PatientCreateWithoutAppointmentInput, PatientUncheckedCreateWithoutAppointmentInput>
  }

  export type PatientUpdateWithoutAppointmentInput = {
    name?: StringFieldUpdateOperationsInput | string
    birthdate?: DateTimeFieldUpdateOperationsInput | Date | string
    gender?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    rg?: NullableStringFieldUpdateOperationsInput | string | null
    mother?: StringFieldUpdateOperationsInput | string
    father?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Administrator?: AdministratorUpdateManyWithoutPatientNestedInput
    Doctor?: DoctorUpdateManyWithoutPatientNestedInput
    MedicalRecord?: MedicalRecordUpdateManyWithoutPatientNestedInput
    Address?: AddressUpdateOneRequiredWithoutPatientNestedInput
    Recepcionist?: RecepcionistUpdateManyWithoutPatientNestedInput
  }

  export type PatientUncheckedUpdateWithoutAppointmentInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    birthdate?: DateTimeFieldUpdateOperationsInput | Date | string
    gender?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    rg?: NullableStringFieldUpdateOperationsInput | string | null
    mother?: StringFieldUpdateOperationsInput | string
    father?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    addressId?: IntFieldUpdateOperationsInput | number
    Administrator?: AdministratorUncheckedUpdateManyWithoutPatientNestedInput
    Doctor?: DoctorUncheckedUpdateManyWithoutPatientNestedInput
    MedicalRecord?: MedicalRecordUncheckedUpdateManyWithoutPatientNestedInput
    Recepcionist?: RecepcionistUncheckedUpdateManyWithoutPatientNestedInput
  }

  export type DoctorUpsertWithoutAppointmentInput = {
    update: XOR<DoctorUpdateWithoutAppointmentInput, DoctorUncheckedUpdateWithoutAppointmentInput>
    create: XOR<DoctorCreateWithoutAppointmentInput, DoctorUncheckedCreateWithoutAppointmentInput>
  }

  export type DoctorUpdateWithoutAppointmentInput = {
    crm?: StringFieldUpdateOperationsInput | string
    speciality?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    Patient?: PatientUpdateOneRequiredWithoutDoctorNestedInput
    Role?: RoleUpdateOneRequiredWithoutDoctorNestedInput
  }

  export type DoctorUncheckedUpdateWithoutAppointmentInput = {
    id?: IntFieldUpdateOperationsInput | number
    patientId?: IntFieldUpdateOperationsInput | number
    crm?: StringFieldUpdateOperationsInput | string
    speciality?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    roleId?: IntFieldUpdateOperationsInput | number
  }

  export type RecepcionistUpsertWithoutAppointmentInput = {
    update: XOR<RecepcionistUpdateWithoutAppointmentInput, RecepcionistUncheckedUpdateWithoutAppointmentInput>
    create: XOR<RecepcionistCreateWithoutAppointmentInput, RecepcionistUncheckedCreateWithoutAppointmentInput>
  }

  export type RecepcionistUpdateWithoutAppointmentInput = {
    password?: StringFieldUpdateOperationsInput | string
    Patient?: PatientUpdateOneRequiredWithoutRecepcionistNestedInput
    Role?: RoleUpdateOneRequiredWithoutRecepcionistNestedInput
  }

  export type RecepcionistUncheckedUpdateWithoutAppointmentInput = {
    id?: IntFieldUpdateOperationsInput | number
    patientId?: IntFieldUpdateOperationsInput | number
    password?: StringFieldUpdateOperationsInput | string
    roleId?: IntFieldUpdateOperationsInput | number
  }

  export type MedicalRecordUpsertWithWhereUniqueWithoutAppointmentInput = {
    where: MedicalRecordWhereUniqueInput
    update: XOR<MedicalRecordUpdateWithoutAppointmentInput, MedicalRecordUncheckedUpdateWithoutAppointmentInput>
    create: XOR<MedicalRecordCreateWithoutAppointmentInput, MedicalRecordUncheckedCreateWithoutAppointmentInput>
  }

  export type MedicalRecordUpdateWithWhereUniqueWithoutAppointmentInput = {
    where: MedicalRecordWhereUniqueInput
    data: XOR<MedicalRecordUpdateWithoutAppointmentInput, MedicalRecordUncheckedUpdateWithoutAppointmentInput>
  }

  export type MedicalRecordUpdateManyWithWhereWithoutAppointmentInput = {
    where: MedicalRecordScalarWhereInput
    data: XOR<MedicalRecordUpdateManyMutationInput, MedicalRecordUncheckedUpdateManyWithoutMedicalRecordInput>
  }

  export type MedicalRecordScalarWhereInput = {
    AND?: Enumerable<MedicalRecordScalarWhereInput>
    OR?: Enumerable<MedicalRecordScalarWhereInput>
    NOT?: Enumerable<MedicalRecordScalarWhereInput>
    id?: IntFilter | number
    patientId?: IntFilter | number
    appointmentId?: IntFilter | number
  }

  export type AppointmentCreateWithoutDoctorInput = {
    scheduleTo: Date | string
    diagnosis: string
    createdAt?: Date | string
    Patient: PatientCreateNestedOneWithoutAppointmentInput
    Recepcionist: RecepcionistCreateNestedOneWithoutAppointmentInput
    MedicalRecord?: MedicalRecordCreateNestedManyWithoutAppointmentInput
  }

  export type AppointmentUncheckedCreateWithoutDoctorInput = {
    id?: number
    scheduleTo: Date | string
    patientId: number
    recepcionistId: number
    diagnosis: string
    createdAt?: Date | string
    MedicalRecord?: MedicalRecordUncheckedCreateNestedManyWithoutAppointmentInput
  }

  export type AppointmentCreateOrConnectWithoutDoctorInput = {
    where: AppointmentWhereUniqueInput
    create: XOR<AppointmentCreateWithoutDoctorInput, AppointmentUncheckedCreateWithoutDoctorInput>
  }

  export type AppointmentCreateManyDoctorInputEnvelope = {
    data: Enumerable<AppointmentCreateManyDoctorInput>
    skipDuplicates?: boolean
  }

  export type PatientCreateWithoutDoctorInput = {
    name: string
    birthdate: Date | string
    gender: string
    cpf: string
    rg?: string | null
    mother: string
    father: string
    email: string
    phone: string
    createdAt?: Date | string
    Administrator?: AdministratorCreateNestedManyWithoutPatientInput
    Appointment?: AppointmentCreateNestedManyWithoutPatientInput
    MedicalRecord?: MedicalRecordCreateNestedManyWithoutPatientInput
    Address: AddressCreateNestedOneWithoutPatientInput
    Recepcionist?: RecepcionistCreateNestedManyWithoutPatientInput
  }

  export type PatientUncheckedCreateWithoutDoctorInput = {
    id?: number
    name: string
    birthdate: Date | string
    gender: string
    cpf: string
    rg?: string | null
    mother: string
    father: string
    email: string
    phone: string
    createdAt?: Date | string
    addressId: number
    Administrator?: AdministratorUncheckedCreateNestedManyWithoutPatientInput
    Appointment?: AppointmentUncheckedCreateNestedManyWithoutPatientInput
    MedicalRecord?: MedicalRecordUncheckedCreateNestedManyWithoutPatientInput
    Recepcionist?: RecepcionistUncheckedCreateNestedManyWithoutPatientInput
  }

  export type PatientCreateOrConnectWithoutDoctorInput = {
    where: PatientWhereUniqueInput
    create: XOR<PatientCreateWithoutDoctorInput, PatientUncheckedCreateWithoutDoctorInput>
  }

  export type RoleCreateWithoutDoctorInput = {
    name: string
    accessLevel: number
    Administrator?: AdministratorCreateNestedManyWithoutRoleInput
    Recepcionist?: RecepcionistCreateNestedManyWithoutRoleInput
  }

  export type RoleUncheckedCreateWithoutDoctorInput = {
    id?: number
    name: string
    accessLevel: number
    Administrator?: AdministratorUncheckedCreateNestedManyWithoutRoleInput
    Recepcionist?: RecepcionistUncheckedCreateNestedManyWithoutRoleInput
  }

  export type RoleCreateOrConnectWithoutDoctorInput = {
    where: RoleWhereUniqueInput
    create: XOR<RoleCreateWithoutDoctorInput, RoleUncheckedCreateWithoutDoctorInput>
  }

  export type AppointmentUpsertWithWhereUniqueWithoutDoctorInput = {
    where: AppointmentWhereUniqueInput
    update: XOR<AppointmentUpdateWithoutDoctorInput, AppointmentUncheckedUpdateWithoutDoctorInput>
    create: XOR<AppointmentCreateWithoutDoctorInput, AppointmentUncheckedCreateWithoutDoctorInput>
  }

  export type AppointmentUpdateWithWhereUniqueWithoutDoctorInput = {
    where: AppointmentWhereUniqueInput
    data: XOR<AppointmentUpdateWithoutDoctorInput, AppointmentUncheckedUpdateWithoutDoctorInput>
  }

  export type AppointmentUpdateManyWithWhereWithoutDoctorInput = {
    where: AppointmentScalarWhereInput
    data: XOR<AppointmentUpdateManyMutationInput, AppointmentUncheckedUpdateManyWithoutAppointmentInput>
  }

  export type AppointmentScalarWhereInput = {
    AND?: Enumerable<AppointmentScalarWhereInput>
    OR?: Enumerable<AppointmentScalarWhereInput>
    NOT?: Enumerable<AppointmentScalarWhereInput>
    id?: IntFilter | number
    scheduleTo?: DateTimeFilter | Date | string
    patientId?: IntFilter | number
    doctorId?: IntFilter | number
    recepcionistId?: IntFilter | number
    diagnosis?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
  }

  export type PatientUpsertWithoutDoctorInput = {
    update: XOR<PatientUpdateWithoutDoctorInput, PatientUncheckedUpdateWithoutDoctorInput>
    create: XOR<PatientCreateWithoutDoctorInput, PatientUncheckedCreateWithoutDoctorInput>
  }

  export type PatientUpdateWithoutDoctorInput = {
    name?: StringFieldUpdateOperationsInput | string
    birthdate?: DateTimeFieldUpdateOperationsInput | Date | string
    gender?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    rg?: NullableStringFieldUpdateOperationsInput | string | null
    mother?: StringFieldUpdateOperationsInput | string
    father?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Administrator?: AdministratorUpdateManyWithoutPatientNestedInput
    Appointment?: AppointmentUpdateManyWithoutPatientNestedInput
    MedicalRecord?: MedicalRecordUpdateManyWithoutPatientNestedInput
    Address?: AddressUpdateOneRequiredWithoutPatientNestedInput
    Recepcionist?: RecepcionistUpdateManyWithoutPatientNestedInput
  }

  export type PatientUncheckedUpdateWithoutDoctorInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    birthdate?: DateTimeFieldUpdateOperationsInput | Date | string
    gender?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    rg?: NullableStringFieldUpdateOperationsInput | string | null
    mother?: StringFieldUpdateOperationsInput | string
    father?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    addressId?: IntFieldUpdateOperationsInput | number
    Administrator?: AdministratorUncheckedUpdateManyWithoutPatientNestedInput
    Appointment?: AppointmentUncheckedUpdateManyWithoutPatientNestedInput
    MedicalRecord?: MedicalRecordUncheckedUpdateManyWithoutPatientNestedInput
    Recepcionist?: RecepcionistUncheckedUpdateManyWithoutPatientNestedInput
  }

  export type RoleUpsertWithoutDoctorInput = {
    update: XOR<RoleUpdateWithoutDoctorInput, RoleUncheckedUpdateWithoutDoctorInput>
    create: XOR<RoleCreateWithoutDoctorInput, RoleUncheckedCreateWithoutDoctorInput>
  }

  export type RoleUpdateWithoutDoctorInput = {
    name?: StringFieldUpdateOperationsInput | string
    accessLevel?: IntFieldUpdateOperationsInput | number
    Administrator?: AdministratorUpdateManyWithoutRoleNestedInput
    Recepcionist?: RecepcionistUpdateManyWithoutRoleNestedInput
  }

  export type RoleUncheckedUpdateWithoutDoctorInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    accessLevel?: IntFieldUpdateOperationsInput | number
    Administrator?: AdministratorUncheckedUpdateManyWithoutRoleNestedInput
    Recepcionist?: RecepcionistUncheckedUpdateManyWithoutRoleNestedInput
  }

  export type PatientCreateWithoutMedicalRecordInput = {
    name: string
    birthdate: Date | string
    gender: string
    cpf: string
    rg?: string | null
    mother: string
    father: string
    email: string
    phone: string
    createdAt?: Date | string
    Administrator?: AdministratorCreateNestedManyWithoutPatientInput
    Appointment?: AppointmentCreateNestedManyWithoutPatientInput
    Doctor?: DoctorCreateNestedManyWithoutPatientInput
    Address: AddressCreateNestedOneWithoutPatientInput
    Recepcionist?: RecepcionistCreateNestedManyWithoutPatientInput
  }

  export type PatientUncheckedCreateWithoutMedicalRecordInput = {
    id?: number
    name: string
    birthdate: Date | string
    gender: string
    cpf: string
    rg?: string | null
    mother: string
    father: string
    email: string
    phone: string
    createdAt?: Date | string
    addressId: number
    Administrator?: AdministratorUncheckedCreateNestedManyWithoutPatientInput
    Appointment?: AppointmentUncheckedCreateNestedManyWithoutPatientInput
    Doctor?: DoctorUncheckedCreateNestedManyWithoutPatientInput
    Recepcionist?: RecepcionistUncheckedCreateNestedManyWithoutPatientInput
  }

  export type PatientCreateOrConnectWithoutMedicalRecordInput = {
    where: PatientWhereUniqueInput
    create: XOR<PatientCreateWithoutMedicalRecordInput, PatientUncheckedCreateWithoutMedicalRecordInput>
  }

  export type AppointmentCreateWithoutMedicalRecordInput = {
    scheduleTo: Date | string
    diagnosis: string
    createdAt?: Date | string
    Patient: PatientCreateNestedOneWithoutAppointmentInput
    Doctor: DoctorCreateNestedOneWithoutAppointmentInput
    Recepcionist: RecepcionistCreateNestedOneWithoutAppointmentInput
  }

  export type AppointmentUncheckedCreateWithoutMedicalRecordInput = {
    id?: number
    scheduleTo: Date | string
    patientId: number
    doctorId: number
    recepcionistId: number
    diagnosis: string
    createdAt?: Date | string
  }

  export type AppointmentCreateOrConnectWithoutMedicalRecordInput = {
    where: AppointmentWhereUniqueInput
    create: XOR<AppointmentCreateWithoutMedicalRecordInput, AppointmentUncheckedCreateWithoutMedicalRecordInput>
  }

  export type PatientUpsertWithoutMedicalRecordInput = {
    update: XOR<PatientUpdateWithoutMedicalRecordInput, PatientUncheckedUpdateWithoutMedicalRecordInput>
    create: XOR<PatientCreateWithoutMedicalRecordInput, PatientUncheckedCreateWithoutMedicalRecordInput>
  }

  export type PatientUpdateWithoutMedicalRecordInput = {
    name?: StringFieldUpdateOperationsInput | string
    birthdate?: DateTimeFieldUpdateOperationsInput | Date | string
    gender?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    rg?: NullableStringFieldUpdateOperationsInput | string | null
    mother?: StringFieldUpdateOperationsInput | string
    father?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Administrator?: AdministratorUpdateManyWithoutPatientNestedInput
    Appointment?: AppointmentUpdateManyWithoutPatientNestedInput
    Doctor?: DoctorUpdateManyWithoutPatientNestedInput
    Address?: AddressUpdateOneRequiredWithoutPatientNestedInput
    Recepcionist?: RecepcionistUpdateManyWithoutPatientNestedInput
  }

  export type PatientUncheckedUpdateWithoutMedicalRecordInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    birthdate?: DateTimeFieldUpdateOperationsInput | Date | string
    gender?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    rg?: NullableStringFieldUpdateOperationsInput | string | null
    mother?: StringFieldUpdateOperationsInput | string
    father?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    addressId?: IntFieldUpdateOperationsInput | number
    Administrator?: AdministratorUncheckedUpdateManyWithoutPatientNestedInput
    Appointment?: AppointmentUncheckedUpdateManyWithoutPatientNestedInput
    Doctor?: DoctorUncheckedUpdateManyWithoutPatientNestedInput
    Recepcionist?: RecepcionistUncheckedUpdateManyWithoutPatientNestedInput
  }

  export type AppointmentUpsertWithoutMedicalRecordInput = {
    update: XOR<AppointmentUpdateWithoutMedicalRecordInput, AppointmentUncheckedUpdateWithoutMedicalRecordInput>
    create: XOR<AppointmentCreateWithoutMedicalRecordInput, AppointmentUncheckedCreateWithoutMedicalRecordInput>
  }

  export type AppointmentUpdateWithoutMedicalRecordInput = {
    scheduleTo?: DateTimeFieldUpdateOperationsInput | Date | string
    diagnosis?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Patient?: PatientUpdateOneRequiredWithoutAppointmentNestedInput
    Doctor?: DoctorUpdateOneRequiredWithoutAppointmentNestedInput
    Recepcionist?: RecepcionistUpdateOneRequiredWithoutAppointmentNestedInput
  }

  export type AppointmentUncheckedUpdateWithoutMedicalRecordInput = {
    id?: IntFieldUpdateOperationsInput | number
    scheduleTo?: DateTimeFieldUpdateOperationsInput | Date | string
    patientId?: IntFieldUpdateOperationsInput | number
    doctorId?: IntFieldUpdateOperationsInput | number
    recepcionistId?: IntFieldUpdateOperationsInput | number
    diagnosis?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AdministratorCreateWithoutPatientInput = {
    password: string
    Role: RoleCreateNestedOneWithoutAdministratorInput
  }

  export type AdministratorUncheckedCreateWithoutPatientInput = {
    id?: number
    password: string
    roleId: number
  }

  export type AdministratorCreateOrConnectWithoutPatientInput = {
    where: AdministratorWhereUniqueInput
    create: XOR<AdministratorCreateWithoutPatientInput, AdministratorUncheckedCreateWithoutPatientInput>
  }

  export type AdministratorCreateManyPatientInputEnvelope = {
    data: Enumerable<AdministratorCreateManyPatientInput>
    skipDuplicates?: boolean
  }

  export type AppointmentCreateWithoutPatientInput = {
    scheduleTo: Date | string
    diagnosis: string
    createdAt?: Date | string
    Doctor: DoctorCreateNestedOneWithoutAppointmentInput
    Recepcionist: RecepcionistCreateNestedOneWithoutAppointmentInput
    MedicalRecord?: MedicalRecordCreateNestedManyWithoutAppointmentInput
  }

  export type AppointmentUncheckedCreateWithoutPatientInput = {
    id?: number
    scheduleTo: Date | string
    doctorId: number
    recepcionistId: number
    diagnosis: string
    createdAt?: Date | string
    MedicalRecord?: MedicalRecordUncheckedCreateNestedManyWithoutAppointmentInput
  }

  export type AppointmentCreateOrConnectWithoutPatientInput = {
    where: AppointmentWhereUniqueInput
    create: XOR<AppointmentCreateWithoutPatientInput, AppointmentUncheckedCreateWithoutPatientInput>
  }

  export type AppointmentCreateManyPatientInputEnvelope = {
    data: Enumerable<AppointmentCreateManyPatientInput>
    skipDuplicates?: boolean
  }

  export type DoctorCreateWithoutPatientInput = {
    crm: string
    speciality: string
    password: string
    Appointment?: AppointmentCreateNestedManyWithoutDoctorInput
    Role: RoleCreateNestedOneWithoutDoctorInput
  }

  export type DoctorUncheckedCreateWithoutPatientInput = {
    id?: number
    crm: string
    speciality: string
    password: string
    roleId: number
    Appointment?: AppointmentUncheckedCreateNestedManyWithoutDoctorInput
  }

  export type DoctorCreateOrConnectWithoutPatientInput = {
    where: DoctorWhereUniqueInput
    create: XOR<DoctorCreateWithoutPatientInput, DoctorUncheckedCreateWithoutPatientInput>
  }

  export type DoctorCreateManyPatientInputEnvelope = {
    data: Enumerable<DoctorCreateManyPatientInput>
    skipDuplicates?: boolean
  }

  export type MedicalRecordCreateWithoutPatientInput = {
    Appointment: AppointmentCreateNestedOneWithoutMedicalRecordInput
  }

  export type MedicalRecordUncheckedCreateWithoutPatientInput = {
    id?: number
    appointmentId: number
  }

  export type MedicalRecordCreateOrConnectWithoutPatientInput = {
    where: MedicalRecordWhereUniqueInput
    create: XOR<MedicalRecordCreateWithoutPatientInput, MedicalRecordUncheckedCreateWithoutPatientInput>
  }

  export type MedicalRecordCreateManyPatientInputEnvelope = {
    data: Enumerable<MedicalRecordCreateManyPatientInput>
    skipDuplicates?: boolean
  }

  export type AddressCreateWithoutPatientInput = {
    street: string
    houseNumber: string
    complement: string
    district: string
    city: string
    state: string
  }

  export type AddressUncheckedCreateWithoutPatientInput = {
    id?: number
    street: string
    houseNumber: string
    complement: string
    district: string
    city: string
    state: string
  }

  export type AddressCreateOrConnectWithoutPatientInput = {
    where: AddressWhereUniqueInput
    create: XOR<AddressCreateWithoutPatientInput, AddressUncheckedCreateWithoutPatientInput>
  }

  export type RecepcionistCreateWithoutPatientInput = {
    password: string
    Appointment?: AppointmentCreateNestedManyWithoutRecepcionistInput
    Role: RoleCreateNestedOneWithoutRecepcionistInput
  }

  export type RecepcionistUncheckedCreateWithoutPatientInput = {
    id?: number
    password: string
    roleId: number
    Appointment?: AppointmentUncheckedCreateNestedManyWithoutRecepcionistInput
  }

  export type RecepcionistCreateOrConnectWithoutPatientInput = {
    where: RecepcionistWhereUniqueInput
    create: XOR<RecepcionistCreateWithoutPatientInput, RecepcionistUncheckedCreateWithoutPatientInput>
  }

  export type RecepcionistCreateManyPatientInputEnvelope = {
    data: Enumerable<RecepcionistCreateManyPatientInput>
    skipDuplicates?: boolean
  }

  export type AdministratorUpsertWithWhereUniqueWithoutPatientInput = {
    where: AdministratorWhereUniqueInput
    update: XOR<AdministratorUpdateWithoutPatientInput, AdministratorUncheckedUpdateWithoutPatientInput>
    create: XOR<AdministratorCreateWithoutPatientInput, AdministratorUncheckedCreateWithoutPatientInput>
  }

  export type AdministratorUpdateWithWhereUniqueWithoutPatientInput = {
    where: AdministratorWhereUniqueInput
    data: XOR<AdministratorUpdateWithoutPatientInput, AdministratorUncheckedUpdateWithoutPatientInput>
  }

  export type AdministratorUpdateManyWithWhereWithoutPatientInput = {
    where: AdministratorScalarWhereInput
    data: XOR<AdministratorUpdateManyMutationInput, AdministratorUncheckedUpdateManyWithoutAdministratorInput>
  }

  export type AdministratorScalarWhereInput = {
    AND?: Enumerable<AdministratorScalarWhereInput>
    OR?: Enumerable<AdministratorScalarWhereInput>
    NOT?: Enumerable<AdministratorScalarWhereInput>
    id?: IntFilter | number
    patientId?: IntFilter | number
    password?: StringFilter | string
    roleId?: IntFilter | number
  }

  export type AppointmentUpsertWithWhereUniqueWithoutPatientInput = {
    where: AppointmentWhereUniqueInput
    update: XOR<AppointmentUpdateWithoutPatientInput, AppointmentUncheckedUpdateWithoutPatientInput>
    create: XOR<AppointmentCreateWithoutPatientInput, AppointmentUncheckedCreateWithoutPatientInput>
  }

  export type AppointmentUpdateWithWhereUniqueWithoutPatientInput = {
    where: AppointmentWhereUniqueInput
    data: XOR<AppointmentUpdateWithoutPatientInput, AppointmentUncheckedUpdateWithoutPatientInput>
  }

  export type AppointmentUpdateManyWithWhereWithoutPatientInput = {
    where: AppointmentScalarWhereInput
    data: XOR<AppointmentUpdateManyMutationInput, AppointmentUncheckedUpdateManyWithoutAppointmentInput>
  }

  export type DoctorUpsertWithWhereUniqueWithoutPatientInput = {
    where: DoctorWhereUniqueInput
    update: XOR<DoctorUpdateWithoutPatientInput, DoctorUncheckedUpdateWithoutPatientInput>
    create: XOR<DoctorCreateWithoutPatientInput, DoctorUncheckedCreateWithoutPatientInput>
  }

  export type DoctorUpdateWithWhereUniqueWithoutPatientInput = {
    where: DoctorWhereUniqueInput
    data: XOR<DoctorUpdateWithoutPatientInput, DoctorUncheckedUpdateWithoutPatientInput>
  }

  export type DoctorUpdateManyWithWhereWithoutPatientInput = {
    where: DoctorScalarWhereInput
    data: XOR<DoctorUpdateManyMutationInput, DoctorUncheckedUpdateManyWithoutDoctorInput>
  }

  export type DoctorScalarWhereInput = {
    AND?: Enumerable<DoctorScalarWhereInput>
    OR?: Enumerable<DoctorScalarWhereInput>
    NOT?: Enumerable<DoctorScalarWhereInput>
    id?: IntFilter | number
    patientId?: IntFilter | number
    crm?: StringFilter | string
    speciality?: StringFilter | string
    password?: StringFilter | string
    roleId?: IntFilter | number
  }

  export type MedicalRecordUpsertWithWhereUniqueWithoutPatientInput = {
    where: MedicalRecordWhereUniqueInput
    update: XOR<MedicalRecordUpdateWithoutPatientInput, MedicalRecordUncheckedUpdateWithoutPatientInput>
    create: XOR<MedicalRecordCreateWithoutPatientInput, MedicalRecordUncheckedCreateWithoutPatientInput>
  }

  export type MedicalRecordUpdateWithWhereUniqueWithoutPatientInput = {
    where: MedicalRecordWhereUniqueInput
    data: XOR<MedicalRecordUpdateWithoutPatientInput, MedicalRecordUncheckedUpdateWithoutPatientInput>
  }

  export type MedicalRecordUpdateManyWithWhereWithoutPatientInput = {
    where: MedicalRecordScalarWhereInput
    data: XOR<MedicalRecordUpdateManyMutationInput, MedicalRecordUncheckedUpdateManyWithoutMedicalRecordInput>
  }

  export type AddressUpsertWithoutPatientInput = {
    update: XOR<AddressUpdateWithoutPatientInput, AddressUncheckedUpdateWithoutPatientInput>
    create: XOR<AddressCreateWithoutPatientInput, AddressUncheckedCreateWithoutPatientInput>
  }

  export type AddressUpdateWithoutPatientInput = {
    street?: StringFieldUpdateOperationsInput | string
    houseNumber?: StringFieldUpdateOperationsInput | string
    complement?: StringFieldUpdateOperationsInput | string
    district?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
  }

  export type AddressUncheckedUpdateWithoutPatientInput = {
    id?: IntFieldUpdateOperationsInput | number
    street?: StringFieldUpdateOperationsInput | string
    houseNumber?: StringFieldUpdateOperationsInput | string
    complement?: StringFieldUpdateOperationsInput | string
    district?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
  }

  export type RecepcionistUpsertWithWhereUniqueWithoutPatientInput = {
    where: RecepcionistWhereUniqueInput
    update: XOR<RecepcionistUpdateWithoutPatientInput, RecepcionistUncheckedUpdateWithoutPatientInput>
    create: XOR<RecepcionistCreateWithoutPatientInput, RecepcionistUncheckedCreateWithoutPatientInput>
  }

  export type RecepcionistUpdateWithWhereUniqueWithoutPatientInput = {
    where: RecepcionistWhereUniqueInput
    data: XOR<RecepcionistUpdateWithoutPatientInput, RecepcionistUncheckedUpdateWithoutPatientInput>
  }

  export type RecepcionistUpdateManyWithWhereWithoutPatientInput = {
    where: RecepcionistScalarWhereInput
    data: XOR<RecepcionistUpdateManyMutationInput, RecepcionistUncheckedUpdateManyWithoutRecepcionistInput>
  }

  export type RecepcionistScalarWhereInput = {
    AND?: Enumerable<RecepcionistScalarWhereInput>
    OR?: Enumerable<RecepcionistScalarWhereInput>
    NOT?: Enumerable<RecepcionistScalarWhereInput>
    id?: IntFilter | number
    patientId?: IntFilter | number
    password?: StringFilter | string
    roleId?: IntFilter | number
  }

  export type AppointmentCreateWithoutRecepcionistInput = {
    scheduleTo: Date | string
    diagnosis: string
    createdAt?: Date | string
    Patient: PatientCreateNestedOneWithoutAppointmentInput
    Doctor: DoctorCreateNestedOneWithoutAppointmentInput
    MedicalRecord?: MedicalRecordCreateNestedManyWithoutAppointmentInput
  }

  export type AppointmentUncheckedCreateWithoutRecepcionistInput = {
    id?: number
    scheduleTo: Date | string
    patientId: number
    doctorId: number
    diagnosis: string
    createdAt?: Date | string
    MedicalRecord?: MedicalRecordUncheckedCreateNestedManyWithoutAppointmentInput
  }

  export type AppointmentCreateOrConnectWithoutRecepcionistInput = {
    where: AppointmentWhereUniqueInput
    create: XOR<AppointmentCreateWithoutRecepcionistInput, AppointmentUncheckedCreateWithoutRecepcionistInput>
  }

  export type AppointmentCreateManyRecepcionistInputEnvelope = {
    data: Enumerable<AppointmentCreateManyRecepcionistInput>
    skipDuplicates?: boolean
  }

  export type PatientCreateWithoutRecepcionistInput = {
    name: string
    birthdate: Date | string
    gender: string
    cpf: string
    rg?: string | null
    mother: string
    father: string
    email: string
    phone: string
    createdAt?: Date | string
    Administrator?: AdministratorCreateNestedManyWithoutPatientInput
    Appointment?: AppointmentCreateNestedManyWithoutPatientInput
    Doctor?: DoctorCreateNestedManyWithoutPatientInput
    MedicalRecord?: MedicalRecordCreateNestedManyWithoutPatientInput
    Address: AddressCreateNestedOneWithoutPatientInput
  }

  export type PatientUncheckedCreateWithoutRecepcionistInput = {
    id?: number
    name: string
    birthdate: Date | string
    gender: string
    cpf: string
    rg?: string | null
    mother: string
    father: string
    email: string
    phone: string
    createdAt?: Date | string
    addressId: number
    Administrator?: AdministratorUncheckedCreateNestedManyWithoutPatientInput
    Appointment?: AppointmentUncheckedCreateNestedManyWithoutPatientInput
    Doctor?: DoctorUncheckedCreateNestedManyWithoutPatientInput
    MedicalRecord?: MedicalRecordUncheckedCreateNestedManyWithoutPatientInput
  }

  export type PatientCreateOrConnectWithoutRecepcionistInput = {
    where: PatientWhereUniqueInput
    create: XOR<PatientCreateWithoutRecepcionistInput, PatientUncheckedCreateWithoutRecepcionistInput>
  }

  export type RoleCreateWithoutRecepcionistInput = {
    name: string
    accessLevel: number
    Administrator?: AdministratorCreateNestedManyWithoutRoleInput
    Doctor?: DoctorCreateNestedManyWithoutRoleInput
  }

  export type RoleUncheckedCreateWithoutRecepcionistInput = {
    id?: number
    name: string
    accessLevel: number
    Administrator?: AdministratorUncheckedCreateNestedManyWithoutRoleInput
    Doctor?: DoctorUncheckedCreateNestedManyWithoutRoleInput
  }

  export type RoleCreateOrConnectWithoutRecepcionistInput = {
    where: RoleWhereUniqueInput
    create: XOR<RoleCreateWithoutRecepcionistInput, RoleUncheckedCreateWithoutRecepcionistInput>
  }

  export type AppointmentUpsertWithWhereUniqueWithoutRecepcionistInput = {
    where: AppointmentWhereUniqueInput
    update: XOR<AppointmentUpdateWithoutRecepcionistInput, AppointmentUncheckedUpdateWithoutRecepcionistInput>
    create: XOR<AppointmentCreateWithoutRecepcionistInput, AppointmentUncheckedCreateWithoutRecepcionistInput>
  }

  export type AppointmentUpdateWithWhereUniqueWithoutRecepcionistInput = {
    where: AppointmentWhereUniqueInput
    data: XOR<AppointmentUpdateWithoutRecepcionistInput, AppointmentUncheckedUpdateWithoutRecepcionistInput>
  }

  export type AppointmentUpdateManyWithWhereWithoutRecepcionistInput = {
    where: AppointmentScalarWhereInput
    data: XOR<AppointmentUpdateManyMutationInput, AppointmentUncheckedUpdateManyWithoutAppointmentInput>
  }

  export type PatientUpsertWithoutRecepcionistInput = {
    update: XOR<PatientUpdateWithoutRecepcionistInput, PatientUncheckedUpdateWithoutRecepcionistInput>
    create: XOR<PatientCreateWithoutRecepcionistInput, PatientUncheckedCreateWithoutRecepcionistInput>
  }

  export type PatientUpdateWithoutRecepcionistInput = {
    name?: StringFieldUpdateOperationsInput | string
    birthdate?: DateTimeFieldUpdateOperationsInput | Date | string
    gender?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    rg?: NullableStringFieldUpdateOperationsInput | string | null
    mother?: StringFieldUpdateOperationsInput | string
    father?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Administrator?: AdministratorUpdateManyWithoutPatientNestedInput
    Appointment?: AppointmentUpdateManyWithoutPatientNestedInput
    Doctor?: DoctorUpdateManyWithoutPatientNestedInput
    MedicalRecord?: MedicalRecordUpdateManyWithoutPatientNestedInput
    Address?: AddressUpdateOneRequiredWithoutPatientNestedInput
  }

  export type PatientUncheckedUpdateWithoutRecepcionistInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    birthdate?: DateTimeFieldUpdateOperationsInput | Date | string
    gender?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    rg?: NullableStringFieldUpdateOperationsInput | string | null
    mother?: StringFieldUpdateOperationsInput | string
    father?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    addressId?: IntFieldUpdateOperationsInput | number
    Administrator?: AdministratorUncheckedUpdateManyWithoutPatientNestedInput
    Appointment?: AppointmentUncheckedUpdateManyWithoutPatientNestedInput
    Doctor?: DoctorUncheckedUpdateManyWithoutPatientNestedInput
    MedicalRecord?: MedicalRecordUncheckedUpdateManyWithoutPatientNestedInput
  }

  export type RoleUpsertWithoutRecepcionistInput = {
    update: XOR<RoleUpdateWithoutRecepcionistInput, RoleUncheckedUpdateWithoutRecepcionistInput>
    create: XOR<RoleCreateWithoutRecepcionistInput, RoleUncheckedCreateWithoutRecepcionistInput>
  }

  export type RoleUpdateWithoutRecepcionistInput = {
    name?: StringFieldUpdateOperationsInput | string
    accessLevel?: IntFieldUpdateOperationsInput | number
    Administrator?: AdministratorUpdateManyWithoutRoleNestedInput
    Doctor?: DoctorUpdateManyWithoutRoleNestedInput
  }

  export type RoleUncheckedUpdateWithoutRecepcionistInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    accessLevel?: IntFieldUpdateOperationsInput | number
    Administrator?: AdministratorUncheckedUpdateManyWithoutRoleNestedInput
    Doctor?: DoctorUncheckedUpdateManyWithoutRoleNestedInput
  }

  export type AdministratorCreateWithoutRoleInput = {
    password: string
    Patient: PatientCreateNestedOneWithoutAdministratorInput
  }

  export type AdministratorUncheckedCreateWithoutRoleInput = {
    id?: number
    patientId: number
    password: string
  }

  export type AdministratorCreateOrConnectWithoutRoleInput = {
    where: AdministratorWhereUniqueInput
    create: XOR<AdministratorCreateWithoutRoleInput, AdministratorUncheckedCreateWithoutRoleInput>
  }

  export type AdministratorCreateManyRoleInputEnvelope = {
    data: Enumerable<AdministratorCreateManyRoleInput>
    skipDuplicates?: boolean
  }

  export type DoctorCreateWithoutRoleInput = {
    crm: string
    speciality: string
    password: string
    Appointment?: AppointmentCreateNestedManyWithoutDoctorInput
    Patient: PatientCreateNestedOneWithoutDoctorInput
  }

  export type DoctorUncheckedCreateWithoutRoleInput = {
    id?: number
    patientId: number
    crm: string
    speciality: string
    password: string
    Appointment?: AppointmentUncheckedCreateNestedManyWithoutDoctorInput
  }

  export type DoctorCreateOrConnectWithoutRoleInput = {
    where: DoctorWhereUniqueInput
    create: XOR<DoctorCreateWithoutRoleInput, DoctorUncheckedCreateWithoutRoleInput>
  }

  export type DoctorCreateManyRoleInputEnvelope = {
    data: Enumerable<DoctorCreateManyRoleInput>
    skipDuplicates?: boolean
  }

  export type RecepcionistCreateWithoutRoleInput = {
    password: string
    Appointment?: AppointmentCreateNestedManyWithoutRecepcionistInput
    Patient: PatientCreateNestedOneWithoutRecepcionistInput
  }

  export type RecepcionistUncheckedCreateWithoutRoleInput = {
    id?: number
    patientId: number
    password: string
    Appointment?: AppointmentUncheckedCreateNestedManyWithoutRecepcionistInput
  }

  export type RecepcionistCreateOrConnectWithoutRoleInput = {
    where: RecepcionistWhereUniqueInput
    create: XOR<RecepcionistCreateWithoutRoleInput, RecepcionistUncheckedCreateWithoutRoleInput>
  }

  export type RecepcionistCreateManyRoleInputEnvelope = {
    data: Enumerable<RecepcionistCreateManyRoleInput>
    skipDuplicates?: boolean
  }

  export type AdministratorUpsertWithWhereUniqueWithoutRoleInput = {
    where: AdministratorWhereUniqueInput
    update: XOR<AdministratorUpdateWithoutRoleInput, AdministratorUncheckedUpdateWithoutRoleInput>
    create: XOR<AdministratorCreateWithoutRoleInput, AdministratorUncheckedCreateWithoutRoleInput>
  }

  export type AdministratorUpdateWithWhereUniqueWithoutRoleInput = {
    where: AdministratorWhereUniqueInput
    data: XOR<AdministratorUpdateWithoutRoleInput, AdministratorUncheckedUpdateWithoutRoleInput>
  }

  export type AdministratorUpdateManyWithWhereWithoutRoleInput = {
    where: AdministratorScalarWhereInput
    data: XOR<AdministratorUpdateManyMutationInput, AdministratorUncheckedUpdateManyWithoutAdministratorInput>
  }

  export type DoctorUpsertWithWhereUniqueWithoutRoleInput = {
    where: DoctorWhereUniqueInput
    update: XOR<DoctorUpdateWithoutRoleInput, DoctorUncheckedUpdateWithoutRoleInput>
    create: XOR<DoctorCreateWithoutRoleInput, DoctorUncheckedCreateWithoutRoleInput>
  }

  export type DoctorUpdateWithWhereUniqueWithoutRoleInput = {
    where: DoctorWhereUniqueInput
    data: XOR<DoctorUpdateWithoutRoleInput, DoctorUncheckedUpdateWithoutRoleInput>
  }

  export type DoctorUpdateManyWithWhereWithoutRoleInput = {
    where: DoctorScalarWhereInput
    data: XOR<DoctorUpdateManyMutationInput, DoctorUncheckedUpdateManyWithoutDoctorInput>
  }

  export type RecepcionistUpsertWithWhereUniqueWithoutRoleInput = {
    where: RecepcionistWhereUniqueInput
    update: XOR<RecepcionistUpdateWithoutRoleInput, RecepcionistUncheckedUpdateWithoutRoleInput>
    create: XOR<RecepcionistCreateWithoutRoleInput, RecepcionistUncheckedCreateWithoutRoleInput>
  }

  export type RecepcionistUpdateWithWhereUniqueWithoutRoleInput = {
    where: RecepcionistWhereUniqueInput
    data: XOR<RecepcionistUpdateWithoutRoleInput, RecepcionistUncheckedUpdateWithoutRoleInput>
  }

  export type RecepcionistUpdateManyWithWhereWithoutRoleInput = {
    where: RecepcionistScalarWhereInput
    data: XOR<RecepcionistUpdateManyMutationInput, RecepcionistUncheckedUpdateManyWithoutRecepcionistInput>
  }

  export type PatientCreateManyAddressInput = {
    id?: number
    name: string
    birthdate: Date | string
    gender: string
    cpf: string
    rg?: string | null
    mother: string
    father: string
    email: string
    phone: string
    createdAt?: Date | string
  }

  export type PatientUpdateWithoutAddressInput = {
    name?: StringFieldUpdateOperationsInput | string
    birthdate?: DateTimeFieldUpdateOperationsInput | Date | string
    gender?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    rg?: NullableStringFieldUpdateOperationsInput | string | null
    mother?: StringFieldUpdateOperationsInput | string
    father?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Administrator?: AdministratorUpdateManyWithoutPatientNestedInput
    Appointment?: AppointmentUpdateManyWithoutPatientNestedInput
    Doctor?: DoctorUpdateManyWithoutPatientNestedInput
    MedicalRecord?: MedicalRecordUpdateManyWithoutPatientNestedInput
    Recepcionist?: RecepcionistUpdateManyWithoutPatientNestedInput
  }

  export type PatientUncheckedUpdateWithoutAddressInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    birthdate?: DateTimeFieldUpdateOperationsInput | Date | string
    gender?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    rg?: NullableStringFieldUpdateOperationsInput | string | null
    mother?: StringFieldUpdateOperationsInput | string
    father?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Administrator?: AdministratorUncheckedUpdateManyWithoutPatientNestedInput
    Appointment?: AppointmentUncheckedUpdateManyWithoutPatientNestedInput
    Doctor?: DoctorUncheckedUpdateManyWithoutPatientNestedInput
    MedicalRecord?: MedicalRecordUncheckedUpdateManyWithoutPatientNestedInput
    Recepcionist?: RecepcionistUncheckedUpdateManyWithoutPatientNestedInput
  }

  export type PatientUncheckedUpdateManyWithoutPatientInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    birthdate?: DateTimeFieldUpdateOperationsInput | Date | string
    gender?: StringFieldUpdateOperationsInput | string
    cpf?: StringFieldUpdateOperationsInput | string
    rg?: NullableStringFieldUpdateOperationsInput | string | null
    mother?: StringFieldUpdateOperationsInput | string
    father?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MedicalRecordCreateManyAppointmentInput = {
    id?: number
    patientId: number
  }

  export type MedicalRecordUpdateWithoutAppointmentInput = {
    Patient?: PatientUpdateOneRequiredWithoutMedicalRecordNestedInput
  }

  export type MedicalRecordUncheckedUpdateWithoutAppointmentInput = {
    id?: IntFieldUpdateOperationsInput | number
    patientId?: IntFieldUpdateOperationsInput | number
  }

  export type MedicalRecordUncheckedUpdateManyWithoutMedicalRecordInput = {
    id?: IntFieldUpdateOperationsInput | number
    patientId?: IntFieldUpdateOperationsInput | number
  }

  export type AppointmentCreateManyDoctorInput = {
    id?: number
    scheduleTo: Date | string
    patientId: number
    recepcionistId: number
    diagnosis: string
    createdAt?: Date | string
  }

  export type AppointmentUpdateWithoutDoctorInput = {
    scheduleTo?: DateTimeFieldUpdateOperationsInput | Date | string
    diagnosis?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Patient?: PatientUpdateOneRequiredWithoutAppointmentNestedInput
    Recepcionist?: RecepcionistUpdateOneRequiredWithoutAppointmentNestedInput
    MedicalRecord?: MedicalRecordUpdateManyWithoutAppointmentNestedInput
  }

  export type AppointmentUncheckedUpdateWithoutDoctorInput = {
    id?: IntFieldUpdateOperationsInput | number
    scheduleTo?: DateTimeFieldUpdateOperationsInput | Date | string
    patientId?: IntFieldUpdateOperationsInput | number
    recepcionistId?: IntFieldUpdateOperationsInput | number
    diagnosis?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    MedicalRecord?: MedicalRecordUncheckedUpdateManyWithoutAppointmentNestedInput
  }

  export type AppointmentUncheckedUpdateManyWithoutAppointmentInput = {
    id?: IntFieldUpdateOperationsInput | number
    scheduleTo?: DateTimeFieldUpdateOperationsInput | Date | string
    patientId?: IntFieldUpdateOperationsInput | number
    recepcionistId?: IntFieldUpdateOperationsInput | number
    diagnosis?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AdministratorCreateManyPatientInput = {
    id?: number
    password: string
    roleId: number
  }

  export type AppointmentCreateManyPatientInput = {
    id?: number
    scheduleTo: Date | string
    doctorId: number
    recepcionistId: number
    diagnosis: string
    createdAt?: Date | string
  }

  export type DoctorCreateManyPatientInput = {
    id?: number
    crm: string
    speciality: string
    password: string
    roleId: number
  }

  export type MedicalRecordCreateManyPatientInput = {
    id?: number
    appointmentId: number
  }

  export type RecepcionistCreateManyPatientInput = {
    id?: number
    password: string
    roleId: number
  }

  export type AdministratorUpdateWithoutPatientInput = {
    password?: StringFieldUpdateOperationsInput | string
    Role?: RoleUpdateOneRequiredWithoutAdministratorNestedInput
  }

  export type AdministratorUncheckedUpdateWithoutPatientInput = {
    id?: IntFieldUpdateOperationsInput | number
    password?: StringFieldUpdateOperationsInput | string
    roleId?: IntFieldUpdateOperationsInput | number
  }

  export type AdministratorUncheckedUpdateManyWithoutAdministratorInput = {
    id?: IntFieldUpdateOperationsInput | number
    password?: StringFieldUpdateOperationsInput | string
    roleId?: IntFieldUpdateOperationsInput | number
  }

  export type AppointmentUpdateWithoutPatientInput = {
    scheduleTo?: DateTimeFieldUpdateOperationsInput | Date | string
    diagnosis?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Doctor?: DoctorUpdateOneRequiredWithoutAppointmentNestedInput
    Recepcionist?: RecepcionistUpdateOneRequiredWithoutAppointmentNestedInput
    MedicalRecord?: MedicalRecordUpdateManyWithoutAppointmentNestedInput
  }

  export type AppointmentUncheckedUpdateWithoutPatientInput = {
    id?: IntFieldUpdateOperationsInput | number
    scheduleTo?: DateTimeFieldUpdateOperationsInput | Date | string
    doctorId?: IntFieldUpdateOperationsInput | number
    recepcionistId?: IntFieldUpdateOperationsInput | number
    diagnosis?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    MedicalRecord?: MedicalRecordUncheckedUpdateManyWithoutAppointmentNestedInput
  }

  export type DoctorUpdateWithoutPatientInput = {
    crm?: StringFieldUpdateOperationsInput | string
    speciality?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    Appointment?: AppointmentUpdateManyWithoutDoctorNestedInput
    Role?: RoleUpdateOneRequiredWithoutDoctorNestedInput
  }

  export type DoctorUncheckedUpdateWithoutPatientInput = {
    id?: IntFieldUpdateOperationsInput | number
    crm?: StringFieldUpdateOperationsInput | string
    speciality?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    roleId?: IntFieldUpdateOperationsInput | number
    Appointment?: AppointmentUncheckedUpdateManyWithoutDoctorNestedInput
  }

  export type DoctorUncheckedUpdateManyWithoutDoctorInput = {
    id?: IntFieldUpdateOperationsInput | number
    crm?: StringFieldUpdateOperationsInput | string
    speciality?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    roleId?: IntFieldUpdateOperationsInput | number
  }

  export type MedicalRecordUpdateWithoutPatientInput = {
    Appointment?: AppointmentUpdateOneRequiredWithoutMedicalRecordNestedInput
  }

  export type MedicalRecordUncheckedUpdateWithoutPatientInput = {
    id?: IntFieldUpdateOperationsInput | number
    appointmentId?: IntFieldUpdateOperationsInput | number
  }

  export type RecepcionistUpdateWithoutPatientInput = {
    password?: StringFieldUpdateOperationsInput | string
    Appointment?: AppointmentUpdateManyWithoutRecepcionistNestedInput
    Role?: RoleUpdateOneRequiredWithoutRecepcionistNestedInput
  }

  export type RecepcionistUncheckedUpdateWithoutPatientInput = {
    id?: IntFieldUpdateOperationsInput | number
    password?: StringFieldUpdateOperationsInput | string
    roleId?: IntFieldUpdateOperationsInput | number
    Appointment?: AppointmentUncheckedUpdateManyWithoutRecepcionistNestedInput
  }

  export type RecepcionistUncheckedUpdateManyWithoutRecepcionistInput = {
    id?: IntFieldUpdateOperationsInput | number
    password?: StringFieldUpdateOperationsInput | string
    roleId?: IntFieldUpdateOperationsInput | number
  }

  export type AppointmentCreateManyRecepcionistInput = {
    id?: number
    scheduleTo: Date | string
    patientId: number
    doctorId: number
    diagnosis: string
    createdAt?: Date | string
  }

  export type AppointmentUpdateWithoutRecepcionistInput = {
    scheduleTo?: DateTimeFieldUpdateOperationsInput | Date | string
    diagnosis?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Patient?: PatientUpdateOneRequiredWithoutAppointmentNestedInput
    Doctor?: DoctorUpdateOneRequiredWithoutAppointmentNestedInput
    MedicalRecord?: MedicalRecordUpdateManyWithoutAppointmentNestedInput
  }

  export type AppointmentUncheckedUpdateWithoutRecepcionistInput = {
    id?: IntFieldUpdateOperationsInput | number
    scheduleTo?: DateTimeFieldUpdateOperationsInput | Date | string
    patientId?: IntFieldUpdateOperationsInput | number
    doctorId?: IntFieldUpdateOperationsInput | number
    diagnosis?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    MedicalRecord?: MedicalRecordUncheckedUpdateManyWithoutAppointmentNestedInput
  }

  export type AdministratorCreateManyRoleInput = {
    id?: number
    patientId: number
    password: string
  }

  export type DoctorCreateManyRoleInput = {
    id?: number
    patientId: number
    crm: string
    speciality: string
    password: string
  }

  export type RecepcionistCreateManyRoleInput = {
    id?: number
    patientId: number
    password: string
  }

  export type AdministratorUpdateWithoutRoleInput = {
    password?: StringFieldUpdateOperationsInput | string
    Patient?: PatientUpdateOneRequiredWithoutAdministratorNestedInput
  }

  export type AdministratorUncheckedUpdateWithoutRoleInput = {
    id?: IntFieldUpdateOperationsInput | number
    patientId?: IntFieldUpdateOperationsInput | number
    password?: StringFieldUpdateOperationsInput | string
  }

  export type DoctorUpdateWithoutRoleInput = {
    crm?: StringFieldUpdateOperationsInput | string
    speciality?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    Appointment?: AppointmentUpdateManyWithoutDoctorNestedInput
    Patient?: PatientUpdateOneRequiredWithoutDoctorNestedInput
  }

  export type DoctorUncheckedUpdateWithoutRoleInput = {
    id?: IntFieldUpdateOperationsInput | number
    patientId?: IntFieldUpdateOperationsInput | number
    crm?: StringFieldUpdateOperationsInput | string
    speciality?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    Appointment?: AppointmentUncheckedUpdateManyWithoutDoctorNestedInput
  }

  export type RecepcionistUpdateWithoutRoleInput = {
    password?: StringFieldUpdateOperationsInput | string
    Appointment?: AppointmentUpdateManyWithoutRecepcionistNestedInput
    Patient?: PatientUpdateOneRequiredWithoutRecepcionistNestedInput
  }

  export type RecepcionistUncheckedUpdateWithoutRoleInput = {
    id?: IntFieldUpdateOperationsInput | number
    patientId?: IntFieldUpdateOperationsInput | number
    password?: StringFieldUpdateOperationsInput | string
    Appointment?: AppointmentUncheckedUpdateManyWithoutRecepcionistNestedInput
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}